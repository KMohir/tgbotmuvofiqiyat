from aiogram import types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from utils.db_api.security_db import check_user_access, check_group_access, is_admin
from utils.logger import log_security_event, log_group_event
from data.config import SECURITY_ENABLED, AUTO_LEAVE_GROUPS

class SecurityMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
    """
    
    def __init__(self):
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        if not SECURITY_ENABLED:
            return
        
        user_id = message.from_user.id
        chat_type = message.chat.type
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if await is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if chat_type == 'private':
            await self._check_private_chat(message)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
        elif chat_type in ['group', 'supergroup']:
            await self._check_group_chat(message)
    
    async def _check_private_chat(self, message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        user_id = message.from_user.id
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if message.text and message.text.startswith('/start'):
            return
        
        if not await check_user_access(user_id):
            log_security_event("ACCESS_DENIED", user_id, "–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</b>\n\n"
                "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                parse_mode='HTML'
            )
            raise CancelHandler()
    
    async def _check_group_chat(self, message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        chat_id = message.chat.id
        
        if not await check_group_access(chat_id):
            log_group_event("UNAUTHORIZED_GROUP", chat_id, f"–ì—Ä—É–ø–ø–∞: {message.chat.title}")
            
            if AUTO_LEAVE_GROUPS:
                await message.answer(
                    "‚ùå <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞</b>\n\n"
                    "üö™ –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É...\n"
                    "üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode='HTML'
                )
                await message.bot.leave_chat(chat_id)
            else:
                await message.answer(
                    "‚ö†Ô∏è <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞</b>\n\n"
                    "üìù –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                    parse_mode='HTML'
                )
            
            raise CancelHandler()

    async def on_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        if not SECURITY_ENABLED:
            return
        
        user_id = callback_query.from_user.id
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if await is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if callback_query.message.chat.type == 'private':
            if not await check_user_access(user_id):
                log_security_event("CALLBACK_ACCESS_DENIED", user_id, f"Data: {callback_query.data}")
                
                await callback_query.answer(
                    "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start",
                    show_alert=True
                )
                raise CancelHandler() 