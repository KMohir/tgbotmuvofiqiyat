#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ!
"""

import psycopg2
import os
from environs import Env

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()

DB_HOST = env.str("DB_HOST")
DB_NAME = env.str("DB_NAME") 
DB_USER = env.str("DB_USER")
DB_PASSWORD = env.str("DB_PASS")

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def clear_security_tables():
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        
        print("üßπ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_name IN ('user_security', 'group_whitelist') AND table_schema = 'public';")
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        if not existing_tables:
            print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)")
            return
            
        for table in existing_tables:
            cursor.execute(f"DELETE FROM {table};")
            print(f"üóëÔ∏è  –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def clear_all_data():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        
        print("üí• –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;")
        tables = [row[0] for row in cursor.fetchall()]
        
        if not tables:
            print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
            
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        cleared_count = 0
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table};")
                count_before = cursor.fetchone()[0]
                
                cursor.execute(f"DELETE FROM {table};")
                
                print(f"üóëÔ∏è  {table}: —É–¥–∞–ª–µ–Ω–æ {count_before} –∑–∞–ø–∏—Å–µ–π")
                cleared_count += 1
            except Exception as table_error:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {table_error}")
        
        conn.commit()
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {cleared_count} –∏–∑ {len(tables)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def drop_security_tables():
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        
        print("üî• –£–¥–∞–ª—è—é —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        cursor.execute("DROP TABLE IF EXISTS user_security CASCADE;")
        cursor.execute("DROP TABLE IF EXISTS group_whitelist CASCADE;")
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def drop_all_tables():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    conn = connect_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        
        print("üíÄ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;")
        tables = [row[0] for row in cursor.fetchall()]
        
        if not tables:
            print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞")
            return
            
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(tables)}")
        for table in tables:
            print(f"   üìä {table}")
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        dropped_count = 0
        for table in tables:
            try:
                cursor.execute(f"DROP TABLE {table} CASCADE;")
                print(f"üî• –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")
                dropped_count += 1
            except Exception as table_error:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table}: {table_error}")
        
        conn.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {dropped_count} –∏–∑ {len(tables)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    print("\n" + "="*50)
    print("üóÑÔ∏è  –ú–ï–ù–Æ –û–ß–ò–°–¢–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*50)
    print("1. üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("2. üí• –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã)")
    print("3. üî• –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("4. üíÄ –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–∞–±–ª–∏—Ü—ã")
    print("5. ‚ùå –í—ã—Ö–æ–¥")
    print("="*50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–¢–°–Ø!")
    print("="*50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        show_menu()
        choice = input("\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == "1":
            confirm = input("‚ùì –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏? (–¥–∞/–Ω–µ—Ç): ").lower()
            if confirm in ['–¥–∞', 'yes', 'y']:
                clear_security_tables()
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                
        elif choice == "2":
            confirm = input("‚ùì –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç): ").lower()
            if confirm in ['–¥–∞', 'yes', 'y']:
                clear_all_data()
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                
        elif choice == "3":
            confirm = input("‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏? (–¥–∞/–Ω–µ—Ç): ").lower()
            if confirm in ['–¥–∞', 'yes', 'y']:
                drop_security_tables()
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                
        elif choice == "4":
            confirm = input("‚ùì –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–∞–±–ª–∏—Ü—ã? (–û–ü–ê–°–ù–û!) (–¥–∞/–Ω–µ—Ç): ").lower()
            if confirm in ['–¥–∞', 'yes', 'y']:
                double_confirm = input("‚ùì –í—ã –¢–û–ß–ù–û —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï! (–¥–∞/–Ω–µ—Ç): ").lower()
                if double_confirm in ['–¥–∞', 'yes', 'y']:
                    drop_all_tables()
                else:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5")

if __name__ == "__main__":
    print("üóÑÔ∏è –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
    print(f"üìã –ë–∞–∑–∞: {DB_NAME} –Ω–∞ {DB_HOST}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_conn = connect_db()
    if test_conn:
        test_conn.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        main()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ") 