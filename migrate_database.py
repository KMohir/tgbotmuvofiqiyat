#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É group_video_settings
"""

import psycopg2
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            dbname=os.getenv('DB_NAME', 'centris_bot'),
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASS'),
            port=os.getenv('DB_PORT', '5432')
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def backup_table():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã"""
    conn = connect_db()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        print("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS group_video_settings_backup AS 
            SELECT * FROM group_video_settings
        """)
        
        conn.commit()
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: group_video_settings_backup")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()
        conn.close()

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    conn = connect_db()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        print("üîÑ –ú–∏–≥—Ä–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("SELECT * FROM group_video_settings")
        rows = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        migrated = 0
        for row in rows:
            chat_id, centris_enabled, centris_season, centris_start_season_id, centris_start_video, \
            golden_enabled, golden_start_season_id, golden_start_video, viewed_videos, is_subscribed = row
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ season_id
            centris_season_id = centris_start_season_id if centris_start_season_id else None
            golden_season_id = golden_start_season_id if golden_start_season_id else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("""
                UPDATE group_video_settings 
                SET centris_season_id = %s, golden_season_id = %s
                WHERE chat_id = %s
            """, (centris_season_id, golden_season_id, chat_id))
            
            migrated += 1
            print(f"  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ {chat_id}")
        
        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated} –≥—Ä—É–ø–ø!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()
        conn.close()

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    conn = connect_db()
    if not conn:
        return
    
    cursor = conn.cursor()
    
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'group_video_settings' 
            ORDER BY ordinal_position
        """)
        columns = cursor.fetchall()
        
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        for col_name, data_type in columns:
            print(f"  - {col_name}: {data_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT * FROM group_video_settings LIMIT 3")
        rows = cursor.fetchall()
        
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 3):")
        for row in rows:
            print(f"  {row}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        cursor.close()
        conn.close()

def main():
    print("üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã group_video_settings")
    print("=" * 70)
    
    while True:
        print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        print("2. üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("3. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        print("4. üö™ –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-4): ").strip()
        
        if choice == "1":
            if backup_table():
                print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                
        elif choice == "2":
            confirm = input("‚ö†Ô∏è –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ? (yes/no): ").strip().lower()
            if confirm == "yes":
                if migrate_data():
                    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        elif choice == "3":
            verify_migration()
            
        elif choice == "4":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")

if __name__ == "__main__":
    main()
