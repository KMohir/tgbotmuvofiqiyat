"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø
"""

import logging
from aiogram import types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from data.config import SUPER_ADMIN_ID, ADMINS
from db import db

logger = logging.getLogger(__name__)


class VideoSecurityMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø"""
    
    def __init__(self):
        super(VideoSecurityMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        chat_type = message.chat.type

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        try:
            state = data.get('state')
            if state is not None:
                current_state = await state.get_state()
                if current_state:
                    return
        except Exception:
            pass

        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if self.is_super_admin(user_id):
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        if chat_type == types.ChatType.PRIVATE:
            await self.check_private_chat_access(message, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
        elif chat_type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            await self.check_group_access(message, chat_id)

    async def check_private_chat_access(self, message: types.Message, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if self.is_super_admin(user_id):
            return
            
        # –†–∞–∑—Ä–µ—à–∏—Ç—å /start –∏ /help –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if message.text and (message.text.startswith('/start') or message.text.startswith('/help')):
            return
            
        status = db.get_user_security_status(user_id)
        
        if status is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                "üîê **Xush kelibsiz!**\n\n"
                "Botga kirish uchun ro'yxatdan o'tish kerak.\n"
                "Ro'yxatdan o'tishni boshlash uchun /start buyrug'ini yuboring."
            )
            raise CancelHandler()
            
        elif status == 'pending':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await message.answer(
                "‚è≥ **Arizangiz ko'rib chiqilmoqda**\n\n"
                "Sizning ro'yxatdan o'tish arizangiz hali ko'rib chiqilmagan.\n"
                "Iltimos, administrator javobini kuting."
            )
            raise CancelHandler()
            
        elif status == 'denied':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω
            await message.answer(
                "‚ùå **Arizangiz rad etildi**\n\n"
                "Afsuski, sizning ro'yxatdan o'tish arizangiz rad etildi.\n"
                "Qo'shimcha ma'lumot uchun administratorga murojaat qiling."
            )
            raise CancelHandler()
        
        elif status == 'approved':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø
            return

    async def check_group_access(self, message: types.Message, chat_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≥—Ä—É–ø–ø—ã {chat_id}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ whitelist
        is_whitelisted = db.is_group_whitelisted(chat_id)
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} –≤ whitelist: {is_whitelisted}")
        
        if not is_whitelisted:
            # –ì—Ä—É–ø–ø–∞ –Ω–µ –≤ whitelist - –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
            try:
                await message.bot.send_message(
                    chat_id,
                    "üö´ **Guruh avtorizatsiya qilinmagan**\n\n"
                    "Bu guruh bot ishlashi uchun ruxsat etilganlar ro'yxatida emas.\n"
                    "Bot avtomatik ravishda guruhni tark etadi.\n\n"
                    "Guruhni qo'shish uchun administratorga murojaat qiling."
                )
                await message.bot.leave_chat(chat_id)
                logger.warning(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É: {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
            
            raise CancelHandler()

    def is_super_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
        admin_ids = [SUPER_ADMIN_ID]
        for admin in ADMINS:
            try:
                if isinstance(admin, str):
                    admin_ids.append(int(admin.strip()))
                elif isinstance(admin, int):
                    admin_ids.append(admin)
            except (ValueError, AttributeError):
                continue
        return user_id == SUPER_ADMIN_ID or user_id in admin_ids

    async def on_process_callback_query(self, callback: types.CallbackQuery, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        chat_type = callback.message.chat.type

        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if self.is_super_admin(user_id):
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        if chat_type == types.ChatType.PRIVATE:
            status = db.get_user_security_status(user_id)
            
            if status != 'approved':
                await callback.answer(
                    "‚ùå Sizga bu harakatni bajarish uchun ruxsat yo'q.",
                    show_alert=True
                )
                raise CancelHandler()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø
        elif chat_type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            if not db.is_group_whitelisted(chat_id):
                await callback.answer(
                    "‚ùå Bu guruh avtorizatsiya qilinmagan.",
                    show_alert=True
                )
                raise CancelHandler()

    async def on_process_inline_query(self, inline_query: types.InlineQuery, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        user_id = inline_query.from_user.id

        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if self.is_super_admin(user_id):
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = db.get_user_security_status(user_id)
        
        if status != 'approved':
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å inline –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await inline_query.answer(
                [],
                cache_time=0,
                switch_pm_text="‚ùå Ruxsat yo'q",
                switch_pm_parameter="access_denied"
            )
            raise CancelHandler() 