import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime, timedelta
import os
from environs import Env
import gspread
from google.oauth2.service_account import Credentials
import platform
import sqlite3
import psycopg2
from psycopg2 import sql, IntegrityError
import re
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()
API_TOKEN = env.str('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    date_selection = State()  # –í—ã–±–æ—Ä –¥–∞—Ç—ã (–≤—á–µ—Ä–∞/—Å–µ–≥–æ–¥–Ω—è)
    type = State()  # –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º
    object_name = State()  # –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
    expense_type = State()  # –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏
    currency_type = State()  # –°–æ–º –∏–ª–∏ –î–æ–ª–ª–∞—Ä
    payment_type = State()  # –¢—É–ª–æ–≤ —Ç—É—Ä–∏
    amount = State()  # –°—É–º–º–∞
    exchange_rate = State()  # –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞)
    comment = State()  # –ò–∑–æ—Ö

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
date_selection_kb = InlineKeyboardMarkup(row_width=2)
date_selection_kb.add(
    InlineKeyboardButton('üìÖ Bugun', callback_data='date_today'),
    InlineKeyboardButton('üìÖ Kecha', callback_data='date_yesterday')
)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º
type_selection_kb = InlineKeyboardMarkup(row_width=2)
type_selection_kb.add(
    InlineKeyboardButton('üü¢ –ö–∏—Ä–∏–º', callback_data='type_kirim'),
    InlineKeyboardButton('üî¥ –ß–∏“õ–∏–º', callback_data='type_chiqim')
)

# –û–±—ä–µ–∫—Ç—ã –Ω–æ–º–∏
object_names = [
    "–°–∞–º –°–∏—Ç–∏",
    "–°–∏—Ç–π+–°–∏—ë–± –ë –ô –ö –±–ª–æ–∫",
    "–ê–ª –ë—É—Ö–æ—Ä–∏–π",
    "–ê–ª-–ë—É—Ö–æ—Ä–∏–π –•–æ—Ç–µ–ª",
    "–†—É–±–ª–æ–≤–∫–∞",
    "“ö—É–≤–∞ “ö–í–ü",
    "–ú–∞–∫–æ–Ω –ú–∞–ª–ª",
    "–ö–∞—Ä—à–∏ –ú–∞–ª–ª",
    "–ö–∞—Ä—à–∏ –•–æ—Ç–µ–ª",
    "–í–æ—Ö–∞ –ì–∞–≤—Ö–∞—Ä–∏",
    "–ó–∞—Ä–º–µ—Ç–∞–Ω —É—Å—Ç–æ “í–∞—Ñ—É—Ä",
    "–ö–æ–∂–∞ –∑–∞–≤–æ–¥",
    "–ú–æ—Ç—Ä–∏–¥ –∫–∞—Ç–µ–∂",
    "–•–∏—à—Ä–∞–≤",
    "–ú–∞—Ö–¥—É–º–∏ –ê–∑–∞–º",
    "–°–∏—Ä–¥–∞—Ä—ë 1/10 –ó—É—Ö—Ä–∏",
    "–≠—à–æ–Ω–≥—É–∑–∞—Ä",
    "–†—É–±–ª–æ–≤–∫–∞(–•–æ–∂–∏ –±–æ–±–æ –¥–æ–º)",
    "–£—Ä–≥—É—Ç",
    "“ö—û“õ–æ–Ω –º–∞–ª–ª"
]

# –¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_types = [
    "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω",
    "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "–ü–∏—Ç–∞–Ω–∏—è",
    "–ö—É—Ä–∏–ª–∏—à –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä",
    "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏",
    "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
    "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)",
    "–ô–æ“õ–∏–ª“ì–∏",
    "–û–π–ª–∏–∫",
    "–û–±—ë–º",
    "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä",
    "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞",
    "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥",
    "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –ü—Ä–∏—Ö–æ–¥",
    "–≠—Ö—Å–æ–Ω",
    "–ö–∞—Ä–∑ –æ–ª–∏–Ω–¥–∏",
    "–ö–∞—Ä–∑ –∫–∞–π—Ç–∞—Ä–∏–ª–¥–∏",
    "–ü–µ—Ä–µ–≤–æ–¥",
    "–î–æ–ª–ª–∞—Ä –æ–ª–∏–Ω–¥–∏",
    "–î–æ–ª–ª–∞—Ä –°–æ—Ç–∏–ª–¥–∏",
    "–ü—Ä–µ–º–∏—è",
    "–†–∞—Å—Ö–æ–¥ —Ç–µ—Ö–Ω–∏–∫–∞",
    "—Ö–æ–∑—Ç–∞–≤–∞—Ä",
    "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏",
    "–ö–æ–Ω—Å—Ç–∞–≤–∞—Ä",
    "–•–æ–º–∏–π–ª–∏–∫"
]

# –¢–∏–ø—ã –≤–∞–ª—é—Ç
currency_types = [
    ("–°–æ–º", "currency_som"),
    ("–î–æ–ª–ª–∞—Ä", "currency_dollar")
]

# –¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã
payment_types = [
    ("–ù–∞—Ö—Ç", "payment_nah"),
    ("–ü–ª–∞—Å—Ç–∏–∫", "payment_plastik"),
    ("–ë–∞–Ω–∫", "payment_bank")
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä—ã–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
categories = [
    ("üü• Doimiy Xarajat", "cat_doimiy"),
    ("üü© O ªzgaruvchan Xarajat", "cat_ozgaruvchan"),
    ("üü™ Qarz", "cat_qarz"),
    ("‚ö™ Avtoprom", "cat_avtoprom"),
    ("üü© Divident", "cat_divident"),
    ("üü™ Soliq", "cat_soliq"),
    ("üü¶ Ish Xaqi", "cat_ishhaqi")
]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> —ç–º–æ–¥–∑–∏
category_emojis = {
    "Qurilish materiallari": "üü©",
    "Doimiy Xarajat": "üü•",
    "Qarz": "üü™",
    "Divident": "üü©",
    "Soliq": "üü™",
    "Ish Xaqi": "üü¶",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–º–æ–¥–∑–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_category_with_emoji(category_name):
    emoji = category_emojis.get(category_name, "")
    return f"{emoji} {category_name}".strip()

def get_object_names_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_object_names():
        cb = f"object_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_expense_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_expense_types():
        cb = f"expense_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_currency_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name, cb in currency_types:
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_payment_types_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    for name, cb in payment_types:
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_categories_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_categories():
        cb = f"cat_{name}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –º–µ–Ω—é
        btn_text = get_category_with_emoji(name)
        kb.add(InlineKeyboardButton(btn_text, callback_data=cb))
    return kb

# –¢–∏–ø –æ–ø–ª–∞—Ç—ã
pay_types = [
    ("Plastik", "pay_plastik"),
    ("Naxt", "pay_naxt"),
    ("Perevod", "pay_perevod"),
    ("Bank", "pay_bank")
]

def get_pay_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_pay_types():
        cb = f"pay_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è Izoh
skip_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"))

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_kb = InlineKeyboardMarkup(row_width=2)
confirm_kb.add(
    InlineKeyboardButton('‚úÖ Ha', callback_data='confirm_yes'),
    InlineKeyboardButton('‚ùå Yoq', callback_data='confirm_no')
)

# --- Google Sheets settings ---
SHEET_ID = '1D-9i4Y2R_txHL90LI0Kohx7H1HjvZ8vNJlLi7r4n6Oo'
SHEET_NAME = '–ö–∏—Ä–∏–º–ß–∏–∫–∏–º'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
CREDENTIALS_FILE = 'credentials.json'

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤
def get_sheet_names():
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        return [ws.title for ws in sh.worksheets()]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤: {e}")
        return []

def get_e1_g1_values():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫ E1 –∏ G1 (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º—É–ª, –Ω–µ —Å–∞–º–∏ —Ñ–æ—Ä–º—É–ª—ã)."""
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        worksheet = sh.worksheet(SHEET_NAME)

        # –ß–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ —Ñ–æ—Ä–º—É–ª)
        e1 = worksheet.get('E1', value_render_option='UNFORMATTED_VALUE')
        g1 = worksheet.get('G1', value_render_option='UNFORMATTED_VALUE')

        def extract_single(val):
            try:
                return val[0][0] if val and len(val) > 0 and len(val[0]) > 0 else ''
            except Exception:
                return ''

        e1_value = extract_single(e1)
        g1_value = extract_single(g1)
        return e1_value, g1_value
    except Exception as e:
        logging.error(f"E1/G1 ni o'qishda xatolik: {e}")
        return '', ''

def clean_emoji(text):
    # –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    return re.sub(r'^[^\w\s]+', '', text).strip()

async def safe_answer_callback(call, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if is_callback_processed(call.id):
        logging.info(f"Callback {call.id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    mark_callback_processed(call.id)
    
    try:
        await call.answer(**kwargs)
    except Exception as e:
        error_str = str(e)
        if any(phrase in error_str for phrase in [
            "Query is too old", 
            "InvalidQueryID", 
            "query id is invalid",
            "response timeout expired"
        ]):
            logging.warning(f"Callback query –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {e}")
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ callback —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω

async def safe_edit_text(message, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π MessageNotModified"""
    try:
        await message.edit_text(text, **kwargs)
    except Exception as e:
        error_str = str(e)
        if "Message is not modified" in error_str:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {text[:50]}...")
            return
        elif any(phrase in error_str for phrase in [
            "message to edit not found",
            "message can't be edited",
            "Query is too old"
        ]):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ: {e}")
            try:
                await message.answer(text, **kwargs)
            except Exception as fallback_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")
        else:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

def add_to_google_sheet(data):
    from datetime import datetime
    global recent_entries
    
    logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –≤ Google Sheet. –î–∞–Ω–Ω—ã–µ: {data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    user_id = data.get('user_id', '')
    current_time = datetime.now().timestamp()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏
    entry_key = f"{user_id}_{data.get('object_name', '')}_{data.get('type', '')}_{data.get('expense_type', '')}_{data.get('amount', '')}_{data.get('comment', '')}"
    logging.info(f"üîë –ö–ª—é—á –∑–∞–ø–∏—Å–∏: {entry_key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    if entry_key in recent_entries:
        last_time = recent_entries[entry_key]
        if current_time - last_time < 30:  # 30 —Å–µ–∫—É–Ω–¥
            logging.info(f"‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
    recent_entries[entry_key] = current_time
    logging.info(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ recent_entries")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
    current_time = datetime.now().timestamp()
    recent_entries = {k: v for k, v in recent_entries.items() if current_time - v < 300}
    
    try:
        logging.info(f"üîê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Sheets...")
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        logging.info(f"‚úÖ Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        gc = gspread.authorize(creds)
        logging.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        sh = gc.open_by_key(SHEET_ID)
        logging.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {SHEET_ID}")
        
        worksheet = sh.worksheet(SHEET_NAME)
        logging.info(f"‚úÖ –õ–∏—Å—Ç –æ—Ç–∫—Ä—ã—Ç: {SHEET_NAME}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    date_to_use = data.get('dt_for_sheet')
    logging.info(f"üìÖ –î–∞—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {date_to_use}")
    
    if date_to_use:
        # –ï—Å–ª–∏ dt_for_sheet —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(date_to_use, str) and '/' in date_to_use:
            date_str = date_to_use
            logging.info(f"‚úÖ –î–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: {date_str}")
        else:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            try:
                if isinstance(date_to_use, str):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM:SS'
                    parsed_date = datetime.strptime(date_to_use, '%Y-%m-%d %H:%M:%S')
                else:
                    parsed_date = date_to_use
                
                if platform.system() == 'Windows':
                    date_str = parsed_date.strftime('%m/%d/%Y')
                else:
                    date_str = parsed_date.strftime('%-m/%-d/%Y')
                logging.info(f"‚úÖ –î–∞—Ç–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞: {date_str}")
            except (ValueError, AttributeError) as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {date_to_use}: {e}")
                now = datetime.now()
                if platform.system() == 'Windows':
                    date_str = now.strftime('%m/%d/%Y')
                else:
                    date_str = now.strftime('%-m/%-d/%Y')
                logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date_str}")
    else:
        # –ï—Å–ª–∏ dt_for_sheet –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        logging.warning(f"‚ö†Ô∏è dt_for_sheet –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
        now = datetime.now()
        if platform.system() == 'Windows':
            date_str = now.strftime('%m/%d/%Y')
        else:
            date_str = now.strftime('%-m/%-d/%Y')
        logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date_str}")
    
    # –í—Ä–µ–º—è –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—É—â–µ–µ
    time_str = datetime.now().strftime('%H:%M')
    logging.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {time_str}")
    
    user_name = get_user_name(data.get('user_id', data.get('user_id', '')))
    logging.info(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    currency_type = data.get('currency_type', '')
    amount = data.get('amount', '')
    exchange_rate = data.get('exchange_rate', '')
    
    if currency_type == '–î–æ–ª–ª–∞—Ä':
        # –ï—Å–ª–∏ –¥–æ–ª–ª–∞—Ä: –ö—É—Ä—Å = –∫—É—Ä—Å, $ = —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –°–æ–º = –ø—É—Å—Ç–æ
        som_amount = ''
        dollar_amount = int(float(amount)) if amount else ''
        exchange_rate = int(float(exchange_rate)) if exchange_rate else ''
    else:
        # –ï—Å–ª–∏ —Å–æ–º: –ö—É—Ä—Å = –ø—É—Å—Ç–æ, $ = –ø—É—Å—Ç–æ, –°–æ–º = —Å—É–º–º–∞ –≤ —Å–æ–º–∞—Ö
        som_amount = int(float(amount)) if amount else ''
        dollar_amount = ''
        exchange_rate = ''
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    all_values = worksheet.get_all_values()
    
    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    next_row = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∏ 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    for i, row in enumerate(all_values[1:], 2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not any(cell.strip() for cell in row[:9]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 9 —Å—Ç–æ–ª–±—Ü–æ–≤
            next_row = i
            break
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        next_row = len(all_values) + 1
        # –†–∞—Å—à–∏—Ä—è–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if next_row > 45:
            worksheet.resize(next_row + 10, 25)  # –î–æ–±–∞–≤–ª—è–µ–º 10 —Å—Ç—Ä–æ–∫
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (A-J)
    logging.info(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É {next_row}")
    
    try:
        worksheet.update(f'A{next_row}', data.get('object_name', ''))      # –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
        worksheet.update(f'B{next_row}', data.get('type', ''))             # –ö–∏—Ä–∏–º/–ß–∏–∫–∏–º
        worksheet.update(f'C{next_row}', data.get('expense_type', ''))     # –•–∞—Ä–∞–∂–∞—Ç –¢—É—Ä–∏
        worksheet.update(f'D{next_row}', data.get('comment', ''))          # –ò–∑–æ—Ö
        worksheet.update(f'E{next_row}', dollar_amount)                     # $
        worksheet.update(f'F{next_row}', exchange_rate)                     # –ö—É—Ä—Å
        worksheet.update(f'G{next_row}', som_amount)                        # –°–æ–º
        worksheet.update(f'H{next_row}', date_str)                         # –°–∞–Ω–∞
        worksheet.update(f'I{next_row}', user_name)                        # –ú–∞—Å—É–ª —à–∞—Ö—Å
        worksheet.update(f'K{next_row}', data.get('payment_type', ''))     # –¢—É–ª–æ–≤ —Ç—É—Ä–∏
        
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheet, —Å—Ç—Ä–æ–∫–∞ {next_row}")
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheet: {e}")
        return False

def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        num_str = str(int(float(number)))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∫–∞–∂–¥—ã–µ 3 —Ü–∏—Ñ—Ä—ã —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        formatted = ""
        for i, digit in enumerate(reversed(num_str)):
            if i > 0 and i % 3 == 0:
                formatted = " " + formatted
            formatted = digit + formatted
        
        return formatted
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return str(number)

def format_summary(data):
    tur_emoji = 'üü¢' if data.get('type') == '–ö–∏—Ä–∏–º' else 'üî¥'
    dt = data.get('dt', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–µ –∏ –≤–∞–ª—é—Ç–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    currency_type = data.get('currency_type', '')
    amount = data.get('amount', '-')
    
    if currency_type == '–î–æ–ª–ª–∞—Ä':
        exchange_rate = data.get('exchange_rate', '-')
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –∏ –∫—É—Ä—Å
        formatted_amount = format_number(amount)
        formatted_rate = format_number(exchange_rate)
        amount_info = f"{formatted_amount} $ (–∫—É—Ä—Å: {formatted_rate})"
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Å–æ–º–∞—Ö
        formatted_amount = format_number(amount)
        amount_info = f"{formatted_amount} –°–æ–º"
    
    return (
        f"<b>Natija:</b>\n"
        f"<b>Tur:</b> {tur_emoji} {data.get('type', '-')}\n"
        f"<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏:</b> {data.get('object_name', '-')}\n"
        f"<b>–•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏:</b> {data.get('expense_type', '-')}\n"
        f"<b>–í–∞–ª—é—Ç–∞:</b> {currency_type}\n"
        f"<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏:</b> {data.get('payment_type', '-')}\n"
        f"<b>–°—É–º–º–∞:</b> {amount_info}\n"
        f"<b>–ò–∑–æ—Ö:</b> {data.get('comment', '-')}\n"
        f"<b>Vaqt:</b> {dt}"
    )

# --- –ê–¥–º–∏–Ω—ã ---
ADMINS = [5657091547, 5048593195]  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
recent_entries = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤
processed_callbacks = set()

def is_callback_processed(callback_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω callback —Å –¥–∞–Ω–Ω—ã–º ID"""
    return callback_id in processed_callbacks

def mark_callback_processed(callback_id):
    """–û—Ç–º–µ—á–∞–µ—Ç callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
    processed_callbacks.add(callback_id)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    if len(processed_callbacks) > 10000:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5000
        old_callbacks = list(processed_callbacks)[:-5000]
        for old_id in old_callbacks:
            processed_callbacks.discard(old_id)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–ª–∞–Ω—Å–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
recent_balance_messages = {}

def is_balance_message_duplicate(user_id, operation_type, amount, currency, timestamp):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–º"""
    key = f"{user_id}_{operation_type}_{amount}_{currency}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if key in recent_balance_messages:
        last_time = recent_balance_messages[key]
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–º
        if (timestamp - last_time).total_seconds() < 5:
            return True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    recent_balance_messages[key] = timestamp
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
    if len(recent_balance_messages) > 1000:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        old_keys = list(recent_balance_messages.keys())[:-500]
        for old_key in old_keys:
            del recent_balance_messages[old_key]
    
    return False

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def get_db_conn():
    return psycopg2.connect(
        dbname=env.str('POSTGRES_DB', 'kapital'),
        user=env.str('POSTGRES_USER', 'postgres'),
        password=env.str('POSTGRES_PASSWORD', 'postgres'),
        host=env.str('POSTGRES_HOST', 'localhost'),
        port=env.str('POSTGRES_PORT', '5432')
    )

def init_db():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        phone TEXT,
        status TEXT,
        reg_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS admins (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        added_by BIGINT,
        added_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS pay_types (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS object_names (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS expense_types (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS pending_approvals (
        id SERIAL PRIMARY KEY,
        approval_key TEXT UNIQUE,
        user_id BIGINT,
        data JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    c.execute('DELETE FROM object_names')
    c.execute('DELETE FROM expense_types')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
    c.execute('SELECT COUNT(*) FROM pay_types')
    if c.fetchone()[0] == 0:
        for name in ["Plastik", "Naxt", "Perevod", "Bank"]:
            c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
    c.execute('SELECT COUNT(*) FROM categories')
    if c.fetchone()[0] == 0:
        for name in ["üü• Doimiy Xarajat", "üü© O ªzgaruvchan Xarajat", "üü™ Qarz", "‚ö™ Avtoprom", "üü© Divident", "üü™ Soliq", "üü¶ Ish Xaqi"]:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    c.execute('SELECT COUNT(*) FROM admins')
    if c.fetchone()[0] == 0:
        from datetime import datetime
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        for admin_id in ADMINS:
            c.execute('INSERT INTO admins (user_id, name, added_by, added_date) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                      (admin_id, f'Admin {admin_id}', admin_id, current_time))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–æ–º–∏
    for name in object_names:
        c.execute('INSERT INTO object_names (name) VALUES (%s)', (name,))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
    for name in expense_types:
        c.execute('INSERT INTO expense_types (name) VALUES (%s)', (name,))
    
    conn.commit()
    conn.close()

init_db()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_status(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT status FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º ---
def is_admin(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id FROM admins WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row is not None

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ ---
def add_admin(user_id, name, added_by):
    from datetime import datetime
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO admins (user_id, name, added_by, added_date) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                  (user_id, name, added_by, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
        return True
    except IntegrityError:
        conn.rollback()
        return False
    finally:
        conn.close()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
def remove_admin(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM admins WHERE user_id=%s', (user_id,))
    result = c.rowcount > 0
    conn.commit()
    conn.close()
    return result

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ ---
def get_all_admins():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id, name, added_date FROM admins ORDER BY added_date')
    admins = c.fetchall()
    conn.close()
    return admins

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def register_user(user_id, name, phone):
    from datetime import datetime
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO users (user_id, name, phone, status, reg_date) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                  (user_id, name, phone, 'pending', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
    except IntegrityError:
        conn.rollback()
    conn.close()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_user_status(user_id, status):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE users SET status=%s WHERE user_id=%s', (status, user_id))
    conn.commit()
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Google Sheets ---
def get_user_name(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else ''

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ ---
def get_pay_types():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM pay_types')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_categories():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM categories ORDER BY name')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_object_names():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ object_names
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM object_names')
    db_names = [row[0] for row in c.fetchall()]
    conn.close()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ object_names
    result = []
    for name in object_names:
        if name in db_names:
            result.append(name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for name in db_names:
        if name not in result:
            result.append(name)
    
    return result

def get_expense_types():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ expense_types
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM expense_types')
    db_names = [row[0] for row in c.fetchall()]
    conn.close()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ expense_types
    result = []
    for name in expense_types:
        if name in db_names:
            result.append(name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for name in db_names:
        if name not in result:
            result.append(name)
    
    return result

# --- –°—Ç–∞—Ä—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ---
@dp.message_handler(commands=['start'])
async def start(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    status = get_user_status(user_id)
    if status == 'approved':
        await state.finish()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await show_main_menu(msg, state)
        logging.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    elif status == 'pending':
        await msg.answer('‚è≥ Sizning arizangiz ko\'rib chiqilmoqda. Iltimos, kuting.')
    elif status == 'denied':
        await msg.answer('‚ùå Sizga botdan foydalanishga ruxsat berilmagan.')
    else:
        await msg.answer('Ismingizni kiriting:')
        await state.set_state('register_name')

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Register(StatesGroup):
    name = State()
    phone = State()

@dp.message_handler(state='register_name', content_types=types.ContentTypes.TEXT)
async def process_register_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± Telefon raqamni yuborish", request_contact=True))
    await msg.answer('Telefon raqamingizni yuboring:', reply_markup=kb)
    await state.set_state('register_phone')

@dp.message_handler(state='register_phone', content_types=types.ContentTypes.CONTACT)
async def process_register_phone(msg: types.Message, state: FSMContext):
    phone = msg.contact.phone_number
    data = await state.get_data()
    user_id = msg.from_user.id
    name = data.get('name', '')
    register_user(user_id, name, phone)
    await msg.answer('‚è≥ Arizangiz adminga yuborildi. Iltimos, kuting.', reply_markup=types.ReplyKeyboardRemove())
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    admins = get_all_admins()
    for admin_id, admin_name, added_date in admins:
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton('‚úÖ Ha', callback_data=f'approve_{user_id}'),
            InlineKeyboardButton('‚ùå Yoq', callback_data=f'deny_{user_id}')
        )
        await bot.send_message(admin_id, f'üÜï Yangi foydalanuvchi ro\'yxatdan o\'tdi:\nID: <code>{user_id}</code>\nIsmi: <b>{name}</b>\nTelefon: <code>{phone}</code>', reply_markup=kb)
    await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–∑–∞–ø—Ä–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–º ---
@dp.callback_query_handler(lambda c: (c.data.startswith('approve_') or c.data.startswith('deny_')) and not c.data.startswith('approve_large_') and not c.data.startswith('reject_large_'), state='*')
async def process_admin_approve(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await safe_answer_callback(call, text='Faqat admin uchun!', show_alert=True)
        return
    action, user_id = call.data.split('_')
    user_id = int(user_id)
    if action == 'approve':
        update_user_status(user_id, 'approved')
        await bot.send_message(user_id, '‚úÖ Sizga botdan foydalanishga ruxsat berildi! /start')
        await safe_edit_text(call.message, '‚úÖ Foydalanuvchi tasdiqlandi.')
    else:
        update_user_status(user_id, 'denied')
        await bot.send_message(user_id, '‚ùå Sizga botdan foydalanishga ruxsat berilmagan.')
        await safe_edit_text(call.message, '‚ùå Foydalanuvchi rad etildi.')
    await safe_answer_callback(call)

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
@dp.message_handler(lambda msg: get_user_status(msg.from_user.id) != 'approved', state='*')
async def block_unapproved(msg: types.Message, state: FSMContext):
    await msg.answer('‚è≥ Sizning arizangiz ko\'rib chiqilmoqda yoki sizga ruxsat berilmagan.')
    await state.finish()

async def show_main_menu(bot_or_msg_or_call, state_or_user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    text = "<b>Qaysi kun uchun operatsiya?</b>"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: bot + user_id –∏–ª–∏ msg/call + state
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç Bot –æ–±—ä–µ–∫—Ç–æ–º (—É Bot –µ—Å—Ç—å –º–µ—Ç–æ–¥ send_message, –Ω–æ –Ω–µ—Ç from_user)
    if hasattr(bot_or_msg_or_call, 'send_message') and not hasattr(bot_or_msg_or_call, 'from_user') and isinstance(state_or_user_id, int):
        # –ü–µ—Ä–µ–¥–∞–Ω bot –∏ user_id - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot_or_msg_or_call.send_message(state_or_user_id, text, reply_markup=date_selection_kb)
        user_id = state_or_user_id
        logging.info(f"–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —á–µ—Ä–µ–∑ bot.send_message")
    else:
        # –ü–µ—Ä–µ–¥–∞–Ω msg/call –∏ state - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
        msg_or_call = bot_or_msg_or_call
        state = state_or_user_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if hasattr(msg_or_call, 'message'):
            # –≠—Ç–æ CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º call.message
            await msg_or_call.message.answer(text, reply_markup=date_selection_kb)
        else:
            # –≠—Ç–æ Message, –∏—Å–ø–æ–ª—å–∑—É–µ–º msg
            await msg_or_call.answer(text, reply_markup=date_selection_kb)
        
        await Form.date_selection.set()
        
        user_id = msg_or_call.from_user.id if hasattr(msg_or_call, 'from_user') else msg_or_call.chat.id
        logging.info(f"–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é start - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é

@dp.message_handler(commands=['reboot'], state='*')
async def reboot_cmd(msg: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Å–±—Ä–æ—Å–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /reboot –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    await msg.answer("üîÑ Bot qayta ishga tushirildi! FSM holati tozalandi.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(msg, state)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é FSM")

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.date_selection)
async def process_date_selection(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    logging.info(f"process_date_selection –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id} —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    if call.data == 'date_today':
        selected_date = datetime.now()
        date_text = "Bugun"
    else:  # date_yesterday
        selected_date = datetime.now() - timedelta(days=1)
        date_text = "Kecha"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_date=selected_date, date_text=date_text)
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {date_text} ({selected_date.strftime('%Y-%m-%d')})")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await safe_edit_text(call.message, "<b>Qaysi turdagi operatsiya?</b>", reply_markup=type_selection_kb)
    await Form.type.set()

# –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state=Form.type)
async def process_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    t = '–ö–∏—Ä–∏–º' if call.data == 'type_kirim' else '–ß–∏“õ–∏–º'
    await state.update_data(type=t)
    await safe_edit_text(call.message, "<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ tanlang:</b>", reply_markup=get_object_names_kb())
    await Form.object_name.set()

# –û–±—ä–µ–∫—Ç –Ω–æ–º–∏ –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('object_'), state=Form.object_name)
async def process_object_name(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    object_name = call.data[7:]  # –£–±–∏—Ä–∞–µ–º 'object_' –ø—Ä–µ—Ñ–∏–∫—Å
    await state.update_data(object_name=object_name)
    await safe_edit_text(call.message, "<b>–•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_expense_types_kb())
    await Form.expense_type.set()

# –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('expense_'), state=Form.expense_type)
async def process_expense_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    expense_type = call.data[8:]  # –£–±–∏—Ä–∞–µ–º 'expense_' –ø—Ä–µ—Ñ–∏–∫—Å
    await state.update_data(expense_type=expense_type)
    await safe_edit_text(call.message, "<b>Qanday to'lov turi? –°–æ–º yoki $?</b>", reply_markup=get_currency_types_kb())
    await Form.currency_type.set()

# –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('currency_'), state=Form.currency_type)
async def process_currency_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    currency = '–°–æ–º' if call.data == 'currency_som' else '–î–æ–ª–ª–∞—Ä'
    await state.update_data(currency_type=currency)
    await safe_edit_text(call.message, "<b>Summani kiriting:</b>")
    await Form.amount.set()

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('payment_'), state=Form.payment_type)
async def process_payment_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    payment_map = {
        'payment_nah': '–ù–∞—Ö—Ç',
        'payment_plastik': '–ü–ª–∞—Å—Ç–∏–∫',
        'payment_bank': '–ë–∞–Ω–∫'
    }
    payment = payment_map.get(call.data, '–ù–∞—Ö—Ç')
    await state.update_data(payment_type=payment)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω"
    data = await state.get_data()
    expense_type = data.get('expense_type', '')
    
    if expense_type == '–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω':
        await safe_edit_text(call.message, "<b>–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∫–∞–º–∏ kiriting (yoki –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):</b>", reply_markup=skip_kb)
    else:
        await safe_edit_text(call.message, "<b>–ò–∑–æ—Ö kiriting (yoki –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):</b>", reply_markup=skip_kb)
    
    await Form.comment.set()

# –°—É–º–º–∞
@dp.message_handler(lambda m: m.text.replace('.', '', 1).isdigit(), state=Form.amount)
async def process_amount(msg: types.Message, state: FSMContext):
    await state.update_data(amount=msg.text)
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –î–æ–ª–ª–∞—Ä, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å
    if data.get('currency_type') == '–î–æ–ª–ª–∞—Ä':
        await msg.answer("<b>–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞–Ω–∏ kiriting:</b>")
        await Form.exchange_rate.set()
    else:
        # –ï—Å–ª–∏ –°–æ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã
        await msg.answer("<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_payment_types_kb())
        await Form.payment_type.set()

# –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
@dp.message_handler(lambda m: m.text.replace('.', '', 1).isdigit(), state=Form.exchange_rate)
async def process_exchange_rate(msg: types.Message, state: FSMContext):
    await state.update_data(exchange_rate=msg.text)
    await msg.answer("<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_payment_types_kb())
    await Form.payment_type.set()

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data == 'skip_comment', state=Form.comment)
async def skip_comment_btn(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    logging.info(f"skip_comment_btn –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    await state.update_data(comment='-')
    data = await state.get_data()
    # Set and save the final timestamp
    data['dt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await state.update_data(dt=data['dt'])
    
    text = format_summary(data)
    
    await call.message.answer(text, reply_markup=confirm_kb)
    await state.set_state('confirm')

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫)
@dp.message_handler(state=Form.comment, content_types=types.ContentTypes.TEXT)
async def process_comment(msg: types.Message, state: FSMContext):
    logging.info(f"process_comment –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    
    await state.update_data(comment=msg.text)
    data = await state.get_data()
    # Set and save the final timestamp
    data['dt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await state.update_data(dt=data['dt'])
    
    text = format_summary(data)

    await msg.answer(text, reply_markup=confirm_kb)
    await state.set_state('confirm')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç
@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state='confirm')
async def process_confirm(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    logging.info(f"process_confirm –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id} —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    current_state = await state.get_state()
    if current_state != 'confirm':
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")
        await safe_answer_callback(call, text='Operatsiya allaqachon bajarilgan!', show_alert=True)
        return
    
    if call.data == 'confirm_yes':
        data = await state.get_data()
        from datetime import datetime
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é
        selected_date = data.get('selected_date')
        if selected_date:
            # –ï—Å–ª–∏ selected_date - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
            if isinstance(selected_date, str):
                try:
                    selected_date = datetime.strptime(selected_date, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    selected_date = datetime.now()
            # –ï—Å–ª–∏ selected_date - —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            elif isinstance(selected_date, datetime):
                pass
            else:
                selected_date = datetime.now()
        else:
            # –ï—Å–ª–∏ selected_date –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            selected_date = datetime.now()
        
        dt = selected_date  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        import platform
        if platform.system() == 'Windows':
            date_str = dt.strftime('%m/%d/%Y')
        else:
            date_str = dt.strftime('%-m/%-d/%Y')
        time_str = dt.strftime('%H:%M')
        data['dt_for_sheet'] = date_str
        data['vaqt'] = time_str
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user_id –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        data['user_id'] = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è Chiqim)
        operation_type = data.get('type', '')
        currency_type = data.get('currency_type', '')
        amount = data.get('amount', '0')
        exchange_rate = data.get('exchange_rate', '0')
        
        try:
            amount_value = float(amount)
            exchange_rate_value = float(exchange_rate) if exchange_rate != '0' else 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Å–æ–º–∞—Ö
            if currency_type == '–î–æ–ª–ª–∞—Ä':
                total_som_amount = amount_value * exchange_rate_value
            else:
                total_som_amount = amount_value
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Chiqim –∏ –µ—Å–ª–∏ —Å—É–º–º–∞ >= 10,000,000 —Å–æ–º)
            needs_approval = (operation_type == '–ß–∏“õ–∏–º' and total_som_amount >= 10000000)
            
            if needs_approval:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                approval_timestamp = int(dt.timestamp())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                user_name = get_user_name(call.from_user.id) or call.from_user.full_name
                summary_text = format_summary(data)
                admin_approval_text = f"‚ö†Ô∏è <b>Tasdiqlash talab qilinadi!</b>\n\nFoydalanuvchi <b>{user_name}</b> tomonidan kiritilgan katta summa:\n\n{summary_text}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º timestamp
                admin_kb = InlineKeyboardMarkup(row_width=2)
                admin_kb.add(
                    InlineKeyboardButton('‚úÖ Tasdiqlash', callback_data=f'approve_large_{call.from_user.id}_{approval_timestamp}'),
                    InlineKeyboardButton('‚ùå Rad etish', callback_data=f'reject_large_{call.from_user.id}_{approval_timestamp}')
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                approval_key = f"{call.from_user.id}_{approval_timestamp}"
                data['pending_approval'] = True
                data['approval_timestamp'] = approval_timestamp
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î. –ö–ª—é—á: {approval_key}, –¥–∞–Ω–Ω—ã–µ: {data}")
                if save_pending_approval(approval_key, call.from_user.id, data):
                    logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ö–ª—é—á: {approval_key}")
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: {approval_key}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                sent_to_admin = False
                admins = get_all_admins()
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ: {len(admins)}")
                for admin_id, admin_name, added_date in admins:
                    logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} ({admin_name})")
                    try:
                        await bot.send_message(admin_id, admin_approval_text, reply_markup=admin_kb)
                        sent_to_admin = True
                        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    except Exception as e:
                        error_msg = str(e)
                        if "Chat not found" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ.")
                        elif "Forbidden" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                        else:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {error_msg}")
                
                if sent_to_admin:
                    await call.message.answer('‚è≥ Arizangiz administratorga yuborildi. Tasdiqlashni kuting.')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.finish()
                    await show_main_menu(call.message, state)
                else:
                    await call.message.answer('‚ö†Ô∏è Xatolik: tasdiqlashga yuborish amalga oshmadi. Iltimos, administrator bilan bog\'laning.')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.finish()
                    await show_main_menu(call.message, state)
            else:
                # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheet
                success = add_to_google_sheet(data)
                if success:
                    await call.message.answer('‚úÖ Ma\'lumotlar Google Sheets-ga muvaffaqiyatli yuborildi!')
                                    # Jo'natilgandan so'ng, valyutaga qarab E1 yoki G1 natijaviy qiymatini yuboramiz
                try:
                    e1_value, g1_value = get_e1_g1_values()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
                    from datetime import datetime
                    current_time = datetime.now()
                    is_duplicate = is_balance_message_duplicate(
                        call.from_user.id, 
                        data.get('type', ''), 
                        data.get('amount', ''), 
                        data.get('currency_type', ''), 
                        current_time
                    )
                    
                    if not is_duplicate:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
                        if data.get('currency_type') == '–î–æ–ª–ª–∞—Ä':
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.from_user.id}: {e1_value}")
                            await call.message.answer(f"üí∞ Balans: dollarda {e1_value}")
                        else:  # –°–æ–º
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–æ–º–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.from_user.id}: {g1_value}")
                            await call.message.answer(f"üí∞ Balans: somda {g1_value}")
                    else:
                        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç")
                        
                except Exception as e:
                    logging.error(f"E1/G1 qiymatlarini yuborishda xatolik: {e}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                user_name = get_user_name(call.from_user.id) or call.from_user.full_name
                summary_text = format_summary(data)
                admin_notification_text = f"Foydalanuvchi <b>{user_name}</b> tomonidan kiritilgan yangi ma'lumot:\n\n{summary_text}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –≤–∞–ª—é—Ç—ã)
                try:
                    e1_value, g1_value = get_e1_g1_values()
                    balance_info = f"\n\nüí∞ <b>Balans:</b>\n"
                    balance_info += f"üíµ Dollarda: {format_number(e1_value)}\n"
                    balance_info += f"üí∏ Somda: {format_number(g1_value)}"
                    admin_notification_text += balance_info
                    logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: E1={e1_value}, G1={g1_value}")
                except Exception as e:
                    logging.error(f"Balans ma'lumotlarini qo'shishda xatolik: {e}")
                
                admins = get_all_admins()
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(admins)} –∞–¥–º–∏–Ω–∞–º")
                for admin_id, admin_name, added_date in admins:
                    try:
                        await bot.send_message(admin_id, admin_notification_text)
                        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id} ({admin_name})")
                    except Exception as e:
                        error_msg = str(e)
                        if "Chat not found" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
                        elif "Forbidden" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                        else:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {error_msg}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.finish()
                await show_main_menu(call.message, state)

        except Exception as e:
            await call.message.answer(f'‚ö†Ô∏è Google Sheets-ga yuborishda xatolik: {e}')
            await state.finish()
    else:
        await call.message.answer('‚ùå Operatsiya bekor qilindi.')
        await state.finish()
    
    # –¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
@dp.callback_query_handler(lambda c: c.data.startswith('approve_large_'), state='*')
async def approve_large_amount(call: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å—É–º–º –≤—ã–∑–≤–∞–Ω–æ: {call.data}")
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é - –µ—Å–ª–∏ callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º
    if is_callback_processed(f"approve_{call.data}"):
        logging.info(f"Callback {call.data} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è")
        return
    mark_callback_processed(f"approve_{call.data}")
    
    if not is_admin(call.from_user.id):
        try:
            await call.answer('Faqat admin uchun!', show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∞–≤–∞—Ö: {e}")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    try:
        parts = call.data.split('_')
        if len(parts) < 4:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {call.data}")
            await call.answer('Xatolik: noto\'g\'ri ma\'lumotlar', show_alert=True)
            return
            
        user_id = int(parts[2])
        timestamp = int(parts[3])
        approval_key = f"{user_id}_{timestamp}"
        
        logging.info(f"Approval key: {approval_key}, user_id: {user_id}, timestamp: {timestamp}")
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}, data: {call.data}")
        await call.answer('Xatolik: noto\'g\'ri ma\'lumotlar', show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –∫–ª—é—á –æ–¥–æ–±—Ä–µ–Ω–∏—è
    if not check_approval_status(approval_key):
        logging.warning(f"–ö–ª—é—á –æ–¥–æ–±—Ä–µ–Ω–∏—è {approval_key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        try:
            await call.answer('Bu ariza allaqachon ko\'rib chiqilgan yoki mavjud emas!', show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        saved_data = get_pending_approval(approval_key)
        if saved_data:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: {saved_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheet
            success = add_to_google_sheet(saved_data)
            if success:
                logging.info("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheet")
                # Jo'natilgandan so'ng, valyutaga qarab E1 yoki G1 natijaviy qiymatini yuboramiz
                try:
                    e1_value, g1_value = get_e1_g1_values()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
                    current_time = datetime.now()
                    is_duplicate = is_balance_message_duplicate(
                        user_id, 
                        saved_data.get('type', ''), 
                        saved_data.get('amount', ''), 
                        saved_data.get('currency_type', ''), 
                        current_time
                    )
                    
                    if not is_duplicate:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        balance_message = f"üí∞ <b>Balans:</b>\n"
                        balance_message += f"üíµ Dollarda: {format_number(e1_value)}\n"
                        balance_message += f"üí∏ Somda: {format_number(g1_value)}"
                        
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: E1={e1_value}, G1={g1_value}")
                        await bot.send_message(user_id, balance_message)
                    else:
                        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç")
                        
                except Exception as e_val:
                    logging.error(f"E1/G1 qiymatlarini yuborishda xatolik: {e_val}")
            else:
                logging.info("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_id, '‚úÖ Arizangiz tasdiqlandi! Ma\'lumotlar Google Sheet-ga yozildi.')
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_pending_approval(approval_key)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
            try:
                # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ FSM –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
                logging.info(f"FSM –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            try:
                await show_main_menu(bot, user_id)
                logging.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            user_name = get_user_name(user_id) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            admin_notification_text = f"‚úÖ <b>Ariza tasdiqlandi!</b>\n\nFoydalanuvchi <b>{user_name}</b> tomonidan kiritilgan ma'lumot tasdiqlandi va Google Sheet-ga yozildi.\n\n{format_summary(saved_data)}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
            balance_info = f"\n\nüí∞ <b>Balans:</b>\n"
            balance_info += f"üíµ Dollarda: {format_number(e1_value)}\n"
            balance_info += f"üí∏ Somda: {format_number(g1_value)}"
            admin_notification_text += balance_info
            
            admins = get_all_admins()
            for admin_id, admin_name, added_date in admins:
                try:
                    await bot.send_message(admin_id, admin_notification_text)
                    logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id} ({admin_name})")
                except Exception as e:
                    error_msg = str(e)
                    if "Chat not found" in error_msg:
                        logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
                    elif "Forbidden" in error_msg:
                        logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—É {admin_id}: {error_msg}")
        else:
            logging.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è {approval_key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            try:
                await call.answer('Ma\'lumotlar topilmadi!', show_alert=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        try:
            await call.answer('Xatolik yuz berdi!', show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
@dp.callback_query_handler(lambda c: c.data.startswith('reject_large_'), state='*')
async def reject_large_amount(call: types.CallbackQuery, state: FSMContext):
    logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å—É–º–º –≤—ã–∑–≤–∞–Ω–æ: {call.data}")
    
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await safe_answer_callback(call)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é - –µ—Å–ª–∏ callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º
    if is_callback_processed(f"reject_{call.data}"):
        logging.info(f"Callback {call.data} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        return
    mark_callback_processed(f"reject_{call.data}")
    
    if not is_admin(call.from_user.id):
        try:
            await call.answer('Faqat admin uchun!', show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∞–≤–∞—Ö: {e}")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    try:
        parts = call.data.split('_')
        if len(parts) < 4:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {call.data}")
            await call.answer('Xatolik: noto\'g\'ri ma\'lumotlar', show_alert=True)
            return
            
        user_id = int(parts[2])
        timestamp = int(parts[3])
        approval_key = f"{user_id}_{timestamp}"
        
        logging.info(f"Rejection key: {approval_key}, user_id: {user_id}, timestamp: {timestamp}")
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}, data: {call.data}")
        await call.answer('Xatolik: noto\'g\'ri ma\'lumotlar', show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –∫–ª—é—á –æ–¥–æ–±—Ä–µ–Ω–∏—è
    if not check_approval_status(approval_key):
        logging.warning(f"–ö–ª—é—á –æ–¥–æ–±—Ä–µ–Ω–∏—è {approval_key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        try:
            await call.answer('Bu ariza allaqachon ko\'rib chiqilgan yoki mavjud emas!', show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, '‚ùå Arizangiz administrator tomonidan rad etildi.')
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if delete_pending_approval(approval_key):
            logging.info(f"–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {approval_key}")
        else:
            logging.warning(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {approval_key}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞—è–≤–∫—É
            if not check_approval_status(approval_key):
                await safe_edit_text(call.message, '‚ùå Ariza ma\'lumotlari topilmadi. Boshqa admin tomonidan tasdiqlangan yoki rad etilgan bo\'lishi mumkin.', reply_markup=None)
                return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
        try:
            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ FSM –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            logging.info(f"FSM –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        try:
            await show_main_menu(bot, user_id)
            logging.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            if "Message is not modified" in str(edit_error):
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {edit_error}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except Exception as edit_error:
            if "Message is not modified" in str(edit_error):
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {edit_error}")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(commands=['test_approval'], state='*')
async def test_approval_cmd(msg: types.Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'type': '–ß–∏“õ–∏–º',
        'object_name': 'Test Object',
        'expense_type': 'Test Expense',
        'currency_type': '–°–æ–º',
        'payment_type': 'Test Payment',
        'amount': '15000000',
        'comment': 'Test comment',
        'user_id': msg.from_user.id
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    summary_text = format_summary(test_data)
    admin_approval_text = f"‚ö†Ô∏è <b>Tasdiqlash talab qilinadi!</b>\n\nTest ma'lumot:\n\n{summary_text}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_kb = InlineKeyboardMarkup(row_width=2)
    admin_kb.add(
        InlineKeyboardButton('‚úÖ Tasdiqlash', callback_data=f'approve_large_{msg.from_user.id}_{int(datetime.now().timestamp())}'),
        InlineKeyboardButton('‚ùå Rad etish', callback_data=f'reject_large_{msg.from_user.id}_{int(datetime.now().timestamp())}')
    )
    
    await msg.answer(admin_approval_text, reply_markup=admin_kb)

@dp.message_handler(commands=['check_db'], state='*')
async def check_db_cmd(msg: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É pending_approvals
        conn = get_db_conn()
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        c.execute('SELECT COUNT(*) FROM pending_approvals')
        total_count = c.fetchone()[0]
        
        c.execute('SELECT approval_key, user_id, created_at FROM pending_approvals ORDER BY created_at DESC LIMIT 10')
        recent_records = c.fetchall()
        
        conn.close()
        
        response = f"üîç <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:</b>\n\n"
        response += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ pending_approvals: {total_count}\n\n"
        
        if recent_records:
            response += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:</b>\n"
            for i, (key, user_id, created_at) in enumerate(recent_records, 1):
                response += f"{i}. <code>{key}</code>\n"
                response += f"   User: {user_id}, –í—Ä–µ–º—è: {created_at}\n\n"
        else:
            response += "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ë–î\n"
        
        await msg.answer(response)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")

@dp.message_handler(commands=['clear_old_approvals'], state='*')
async def clear_old_approvals_cmd(msg: types.Message, state: FSMContext):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–æ–±—Ä–µ–Ω–∏–π"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        c.execute("DELETE FROM pending_approvals WHERE created_at < NOW() - INTERVAL '24 hours'")
        deleted_count = c.rowcount
        
        conn.commit()
        conn.close()
        
        await msg.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î: {e}")

@dp.message_handler(commands=['check_fsm'], state='*')
async def check_fsm_cmd(msg: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conn = get_db_conn()
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ storage)
        c.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE '%fsm%'
        """)
        fsm_tables = c.fetchall()
        
        response = f"üîç <b>FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b>\n\n"
        response += f"üìä –ù–∞–π–¥–µ–Ω–æ FSM —Ç–∞–±–ª–∏—Ü: {len(fsm_tables)}\n"
        
        if fsm_tables:
            for table in fsm_tables:
                response += f"   - {table[0]}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π FSM —Ç–∞–±–ª–∏—Ü—ã
                try:
                    c.execute(f"SELECT * FROM {table[0]} LIMIT 5")
                    rows = c.fetchall()
                    if rows:
                        response += f"   –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:\n"
                        for i, row in enumerate(rows[:3], 1):
                            response += f"   {i}. {row}\n"
                except Exception as e:
                    response += f"   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}\n"
        else:
            response += "‚ùå FSM —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        conn.close()
        await msg.answer(response)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FSM: {e}")

@dp.message_handler(commands=['reset_approval_system'], state='*')
async def reset_approval_system_cmd(msg: types.Message, state: FSMContext):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–æ–±—Ä–µ–Ω–∏–π
        c.execute("DELETE FROM pending_approvals")
        deleted_count = c.rowcount
        
        conn.commit()
        conn.close()
        
        await msg.answer(f"üîÑ –°–∏—Å—Ç–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–∏—Å—Ç–µ–º—ã: {e}")

@dp.message_handler(commands=['debug_start'], state='*')
async def debug_start_cmd(msg: types.Message, state: FSMContext):
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    try:
        user_id = msg.from_user.id
        status = get_user_status(user_id)
        
        response = f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ /start:</b>\n\n"
        response += f"üë§ User ID: {user_id}\n"
        response += f"üìä Status: {status}\n"
        response += f"üîë FSM State: {state.state}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        conn = get_db_conn()
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
        user_data = c.fetchone()
        conn.close()
        
        if user_data:
            response += f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î\n"
            response += f"üìù –î–∞–Ω–Ω—ã–µ: {user_data}\n"
        else:
            response += f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î\n"
        
        await msg.answer(response)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")

@dp.message_handler(commands=['test_start'], state='*')
async def test_start_cmd(msg: types.Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –±–µ–∑ –æ—à–∏–±–æ–∫"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await msg.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É /start...")
        
        # –í—ã–∑—ã–≤–∞–µ–º start —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        await start(msg, state)
        
        await msg.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ /start: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ /start: {e}")

@dp.message_handler(commands=['test_date'], state='*')
async def test_date_cmd(msg: types.Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await show_main_menu(msg, state)
        
        await msg.answer("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ 'Bugun' –∏–ª–∏ 'Kecha' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")

@dp.message_handler(commands=['test_google_sheet'], state='*')
async def test_google_sheet_cmd(msg: types.Message, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ Google Sheet"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'object_name': 'Test Object',
            'type': '–ö–∏—Ä–∏–º',
            'expense_type': 'Test Expense',
            'comment': 'Test comment',
            'amount': '1000000',
            'currency_type': '–°–æ–º',
            'payment_type': 'Test Payment',
            'dt_for_sheet': '8/28/2025',
            'vaqt': '12:00',
            'user_id': msg.from_user.id
        }
        
        await msg.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø–∏—Å—å –≤ Google Sheet...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheet
        success = add_to_google_sheet(test_data)
        
        if success:
            await msg.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheet!")
        else:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet")
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheet: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheet: {e}")

@dp.message_handler(commands=['check_google_config'], state='*')
async def check_google_config_cmd(msg: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google Sheets"""
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        response = "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Sheets:</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        from dotenv import load_dotenv
        load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CREDENTIALS_FILE
        credentials_file = os.getenv('CREDENTIALS_FILE', 'credentials.json')
        if os.path.exists(credentials_file):
            response += f"‚úÖ –§–∞–π–ª credentials: {credentials_file}\n"
        else:
            response += f"‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_file}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHEET_ID
        sheet_id = os.getenv('SHEET_ID', '')
        if sheet_id:
            response += f"‚úÖ Sheet ID: {sheet_id[:10]}...\n"
        else:
            response += f"‚ùå Sheet ID –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHEET_NAME
        sheet_name = os.getenv('SHEET_NAME', '')
        if sheet_name:
            response += f"‚úÖ Sheet Name: {sheet_name}\n"
        else:
            response += f"‚ùå Sheet Name –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SCOPES
        scopes = os.getenv('SCOPES', '')
        if scopes:
            response += f"‚úÖ Scopes: {scopes}\n"
        else:
            response += f"‚ùå Scopes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        await msg.answer(response)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

@dp.message_handler(commands=['add_tolov'], state='*')
async def add_paytype_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi To\'lov turi nomini yuboring:')
    await state.set_state('add_paytype')

@dp.message_handler(state='add_paytype', content_types=types.ContentTypes.TEXT)
async def add_paytype_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi To\'lov turi qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['add_category'], state='*')
async def add_category_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi kategoriya nomini yuboring:')
    await state.set_state('add_category')

@dp.message_handler(state='add_category', content_types=types.ContentTypes.TEXT)
async def add_category_save(msg: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    name = clean_emoji(msg.text.strip())
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi kategoriya qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ To'lov turi ---
@dp.message_handler(commands=['del_tolov'], state='*')
async def del_tolov_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_tolov_{name}'))
    await msg.answer('O\'chirish uchun To\'lov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_tolov_'))
async def del_tolov_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_tolov_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM pay_types WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await safe_edit_text(call.message, f'‚ùå To\'lov turi o\'chirildi: {name}')
    await safe_answer_callback(call)

@dp.message_handler(commands=['edit_tolov'], state='*')
async def edit_tolov_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_tolov_{name}'))
    await msg.answer('Tahrirlash uchun To\'lov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_tolov_'))
async def edit_tolov_cb(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_tolov_'):]
    await state.update_data(edit_tolov_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_tolov_new')
    await safe_answer_callback(call)

@dp.message_handler(state='edit_tolov_new', content_types=types.ContentTypes.TEXT)
async def edit_tolov_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_tolov_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE pay_types SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è To\'lov turi o\'zgartirildi: {old_name} -> {new_name}')
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Kotegoriyalar ---
@dp.message_handler(commands=['del_category'], state='*')
async def del_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_category_{name}'))
    await msg.answer('O\'chirish uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_category_'))
async def del_category_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_category_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM categories WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await safe_edit_text(call.message, f'‚ùå Kategoriya o\'chirildi: {name}')
    await safe_answer_callback(call)

@dp.message_handler(commands=['edit_category'], state='*')
async def edit_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_category_{name}'))
    await msg.answer('Tahrirlash uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_category_'))
async def edit_category_cb(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_category_'):]
    await state.update_data(edit_category_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_category_new')
    await safe_answer_callback(call)

@dp.message_handler(state='edit_category_new', content_types=types.ContentTypes.TEXT)
async def edit_category_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_category_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE categories SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è Kategoriya o\'zgartirildi: {old_name} -> {new_name}')
    await state.finish()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ ---
@dp.message_handler(commands=['add_object'], state='*')
async def add_object_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ yuboring:')
    await state.set_state('add_object')

@dp.message_handler(state='add_object', content_types=types.ContentTypes.TEXT)
async def add_object_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO object_names (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏ qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['add_expense'], state='*')
async def add_expense_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ yuboring:')
    await state.set_state('add_expense')

@dp.message_handler(state='add_expense', content_types=types.ContentTypes.TEXT)
async def add_expense_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO expense_types (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['del_object'], state='*')
async def del_object_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_object_names():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_object_{name}'))
    await msg.answer('O\'chirish uchun –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_object_'))
async def del_object_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_object_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM object_names WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await safe_edit_text(call.message, f'‚ùå –û–±—ä–µ–∫—Ç –Ω–æ–º–∏ o\'chirildi: {name}')
    await safe_answer_callback(call)

@dp.message_handler(commands=['del_expense'], state='*')
async def del_expense_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_expense_types():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_expense_{name}'))
    await msg.answer('O\'chirish uchun —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_expense_'))
async def del_expense_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_expense_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM expense_types WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await safe_edit_text(call.message, f'‚ùå –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ o\'chirildi: {name}')
    await safe_answer_callback(call)

@dp.message_handler(commands=['check_sheets'], state='*')
async def check_sheets_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    sheet_names = get_sheet_names()
    if sheet_names:
        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ Google Sheet:\n\n"
        for i, name in enumerate(sheet_names, 1):
            response += f"{i}. {name}\n"
        await msg.answer(response)
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤")

@dp.message_handler(commands=['update_lists'], state='*')
async def update_lists_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        c.execute('DELETE FROM object_names')
        c.execute('DELETE FROM expense_types')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for obj in object_names:
            c.execute('INSERT INTO object_names (name) VALUES (%s)', (obj,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        for exp in expense_types:
            c.execute('INSERT INTO expense_types (name) VALUES (%s)', (exp,))
        
        conn.commit()
        conn.close()
        
        await msg.answer('‚úÖ –°–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤: {e}')

@dp.message_handler(commands=['userslist'], state='*')
async def users_list_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name, phone, reg_date FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo\'q.')
        return
    text = '<b>Tasdiqlangan foydalanuvchilar:</b>\n'
    for i, (user_id, name, phone, reg_date) in enumerate(rows, 1):
        text += f"\n{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nTelefon: <code>{phone}</code>\nRo'yxatdan o'tgan: {reg_date}\n"
    await msg.answer(text)

@dp.message_handler(commands=['block_user'], state='*')
async def block_user_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo\'q.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'üö´ {name} ({user_id})', callback_data=f'blockuser_{user_id}'))
    await msg.answer('Bloklash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('blockuser_'))
async def block_user_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('blockuser_'):])
    update_user_status(user_id, 'denied')
    try:
        await bot.send_message(user_id, '‚ùå Sizga botdan foydalanishga ruxsat berilmagan. (Admin tomonidan bloklandi)')
    except Exception:
        pass
    await safe_edit_text(call.message, f'üö´ Foydalanuvchi bloklandi: {user_id}')
    await safe_answer_callback(call)

@dp.message_handler(commands=['approve_user'], state='*')
async def approve_user_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='denied'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham bloklangan foydalanuvchi yo\'q.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'‚úÖ {name} ({user_id})', callback_data=f'approveuser_{user_id}'))
    await msg.answer('Qayta tasdiqlash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('approveuser_'))
async def approve_user_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('approveuser_'):])
    update_user_status(user_id, 'approved')
    try:
        await bot.send_message(user_id, '‚úÖ Sizga botdan foydalanishga yana ruxsat berildi! /start')
    except Exception:
        pass
    await safe_edit_text(call.message, f'‚úÖ Foydalanuvchi qayta tasdiqlandi: {user_id}')
    await safe_answer_callback(call)

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ ---
@dp.message_handler(commands=['add_admin'], state='*')
async def add_admin_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi admin ID raqamini yuboring:')
    await state.set_state('add_admin_id')

@dp.message_handler(state='add_admin_id', content_types=types.ContentTypes.TEXT)
async def add_admin_id_save(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        user_id = int(msg.text.strip())
        if user_id <= 0:
            await msg.answer('‚ùå Noto\'g\'ri ID raqam!')
            await state.finish()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        if is_admin(user_id):
            await msg.answer('‚ùå Bu foydalanuvchi allaqachon admin!')
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await state.update_data(admin_id=user_id)
        await msg.answer('Yangi admin ismini yuboring:')
        await state.set_state('add_admin_name')
        
    except ValueError:
        await msg.answer('‚ùå Noto\'g\'ri format! Faqat raqam kiriting.')
        await state.finish()

@dp.message_handler(state='add_admin_name', content_types=types.ContentTypes.TEXT)
async def add_admin_name_save(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    data = await state.get_data()
    user_id = data.get('admin_id')
    admin_name = msg.text.strip()
    
    if add_admin(user_id, admin_name, msg.from_user.id):
        await msg.answer(f"‚úÖ Yangi admin qo'shildi:\nID: <code>{user_id}</code>\nIsmi: <b>{admin_name}</b>")
        try:
            await bot.send_message(user_id, f'üéâ Sizga admin huquqlari berildi! Botda barcha admin funksiyalaridan foydalanishingiz mumkin.')
        except Exception:
            pass
    else:
        await msg.answer('‚ùå Xatolik yuz berdi!')
    
    await state.finish()

@dp.message_handler(commands=['remove_admin'], state='*')
async def remove_admin_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    admins = get_all_admins()
    if not admins:
        await msg.answer("Hali birorta ham admin yo'q.")

        return
    
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name, added_date in admins:
        kb.add(InlineKeyboardButton(f'üë§ {name} ({user_id})', callback_data=f'removeadmin_{user_id}'))
    
    await msg.answer("O'chirish uchun adminni tanlang:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('removeadmin_'))
async def remove_admin_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    user_id = int(call.data[len('removeadmin_'):])
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == call.from_user.id:
        await call.answer("‚ùå O'zingizni o'chira olmaysiz!", show_alert=True)
        return
    
    if remove_admin(user_id):
        await safe_edit_text(call.message, f"‚úÖ Admin o'chirildi: {user_id}")
        try:
            await bot.send_message(user_id, '‚ùå Sizning admin huquqlaringiz olib tashlandi.')
        except Exception:
            pass
    else:
        await safe_edit_text(call.message, '‚ùå Xatolik yuz berdi!')
    
    await safe_answer_callback(call)

@dp.message_handler(commands=['admins_list'], state='*')
async def admins_list_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    admins = get_all_admins()
    if not admins:
        await msg.answer("Hali birorta ham admin yo'q.")
        return
    
    text = "<b>üìã Adminlar ro'yxati:</b>\n\n"
    for i, (user_id, name, added_date) in enumerate(admins, 1):
        text += f"{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nQo'shilgan: {added_date}\n\n"
    
    await msg.answer(text)

@dp.message_handler(commands=['check_admins'], state='*')
async def check_admins_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    admins = get_all_admins()
    if admins:
        admin_list = "üìã <b>Ro'yxatdagi adminlar:</b>\n\n"
        for i, (admin_id, name, added_date) in enumerate(admins, 1):
            admin_list += f"{i}. <b>{name}</b> (ID: {admin_id})\n"
            admin_list += f"   Qo'shilgan: {added_date}\n\n"
        await msg.answer(admin_list)
    else:
        await msg.answer("‚ùå Adminlar topilmadi.")

@dp.message_handler(commands=['pending_approvals'], state='*')
async def pending_approvals_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    pending_list = get_all_pending_approvals()
    if pending_list:
        response = "üìã <b>Kutilayotgan tasdiqlashlar:</b>\n\n"
        for i, approval in enumerate(pending_list, 1):
            data = approval['data']
            user_name = get_user_name(approval['user_id']) or f"User {approval['user_id']}"
            response += f"{i}. <b>{user_name}</b> (ID: {approval['user_id']})\n"
            response += f"   Tur: {data.get('type', 'N/A')}\n"
            response += f"   Summa: {data.get('amount', 'N/A')} {data.get('currency_type', '')}\n"
            response += f"   Vaqt: {approval['created_at']}\n"
            response += f"   Key: {approval['approval_key']}\n\n"
        await msg.answer(response)
    else:
        await msg.answer("‚úÖ Kutilayotgan tasdiqlashlar yo'q.")

async def set_user_commands(dp):
    commands = [
        types.BotCommand("start", "Botni boshlash"),
        types.BotCommand("reboot", "Qayta boshlash - FSM ni to'xtatish"),
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    ]
    await dp.bot.set_my_commands(commands)

async def notify_all_users(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        conn = get_db_conn()
        c = conn.cursor()
        c.execute("SELECT user_id FROM users WHERE status='approved'")
        rows = c.fetchall()
        conn.close()
        
        total_users = len(rows)
        successful_sends = 0
        failed_sends = 0
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        for (user_id,) in rows:
            try:
                await bot.send_message(user_id, "Iltimos, /start ni bosing va botdan foydalanishni davom eting!")
                successful_sends += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                await asyncio.sleep(0.1)
            except Exception as e:
                failed_sends += 1
                error_msg = str(e)
                if "bot was blocked" in error_msg.lower() or "user is deactivated" in error_msg.lower():
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                elif "chat not found" in error_msg.lower():
                    logger.warning(f"‚ö†Ô∏è –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {successful_sends}/{total_users} —É—Å–ø–µ—à–Ω–æ, {failed_sends} –Ω–µ—É–¥–∞—á–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
def save_pending_approval(approval_key, user_id, data):
    import json
    from datetime import datetime
    
    class DateTimeEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, datetime):
                return obj.strftime('%Y-%m-%d %H:%M:%S')
            return super().default(obj)
    
    conn = get_db_conn()
    c = conn.cursor()
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        data_copy = data.copy()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        for key, value in data_copy.items():
            if isinstance(value, datetime):
                data_copy[key] = value.strftime('%Y-%m-%d %H:%M:%S')
        
        json_data = json.dumps(data_copy, cls=DateTimeEncoder)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î. –ö–ª—é—á: {approval_key}")
        logging.info(f"–î–∞–Ω–Ω—ã–µ: {data_copy}")
        
        c.execute('INSERT INTO pending_approvals (approval_key, user_id, data) VALUES (%s, %s, %s) ON CONFLICT (approval_key) DO NOTHING',
                  (approval_key, user_id, json_data))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if c.rowcount > 0:
            conn.commit()
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –∫–ª—é—á–∞: {approval_key}")
            return True
        else:
            logging.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å –∫–ª—é—á–æ–º {approval_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            conn.rollback()
            return False
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def get_pending_approval(approval_key):
    import json
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('SELECT data FROM pending_approvals WHERE approval_key = %s', (approval_key,))
        row = c.fetchone()
        if row:
            data = row[0]
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –∫–ª—é—á–∞ {approval_key}. –¢–∏–ø: {type(data)}")
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if isinstance(data, dict):
                logging.info(f"–î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è: {data}")
                return data
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ—ë
            elif isinstance(data, str):
                logging.info(f"–ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É: {data[:100]}...")
                return json.loads(data)
            else:
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {data}")
                return None
        else:
            logging.info(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –¥–ª—è –∫–ª—é—á–∞: {approval_key}")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return None
    finally:
        conn.close()

def delete_pending_approval(approval_key):
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('DELETE FROM pending_approvals WHERE approval_key = %s', (approval_key,))
        conn.commit()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def get_all_pending_approvals():
    import json
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('SELECT approval_key, user_id, data, created_at FROM pending_approvals ORDER BY created_at DESC')
        rows = c.fetchall()
        result = []
        for row in rows:
            data = row[2]
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if isinstance(data, dict):
                parsed_data = data
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º –µ—ë
            elif isinstance(data, str):
                parsed_data = json.loads(data)
            else:
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                continue
                
            result.append({
                'approval_key': row[0],
                'user_id': row[1],
                'data': parsed_data,
                'created_at': row[3]
            })
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return []
    finally:
        conn.close()

def check_approval_status(approval_key):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('SELECT COUNT(*) FROM pending_approvals WHERE approval_key = %s', (approval_key,))
        count = c.fetchone()[0]
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {approval_key}: –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
        return count > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {approval_key}: {e}")
        return False
    finally:
        conn.close()

if __name__ == '__main__':
    from aiogram import executor
    import asyncio
    
    async def on_startup(dp):
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        try:
            await set_user_commands(dp)
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            await notify_all_users(dp.bot)
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def on_shutdown(dp):
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        try:
            await dp.storage.close()
            await dp.storage.wait_closed()
            logger.info("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        executor.start_polling(
            dp, 
            skip_updates=True, 
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            timeout=60,
            relax=0.1
        )
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
