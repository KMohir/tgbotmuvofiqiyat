from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from data.config import ADMINS, SUPER_ADMIN_ID
from loader import dp, db
import logging
from aiogram.utils.exceptions import ChatAdminRequired
from aiogram.dispatcher.handler import CancelHandler


@dp.my_chat_member_handler()
async def my_chat_member_handler(message: types.ChatMemberUpdated):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ
        if message.old_chat_member.status in [types.ChatMemberStatus.LEFT, types.ChatMemberStatus.KICKED] and \
           message.new_chat_member.status in [types.ChatMemberStatus.MEMBER, types.ChatMemberStatus.ADMINISTRATOR]:
            group_id = message.chat.id
            group_title = message.chat.title
            added_by = message.from_user.id
            added_by_name = message.from_user.full_name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
            if db.is_group_banned(group_id):
                # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
                await dp.bot.leave_chat(group_id)
                logging.info(f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∏–Ω—É–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É '{group_title}' (ID: {group_id})")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞)
            db.add_user(
                user_id=group_id,
                name=group_title,
                phone=None,  # –£ –≥—Ä—É–ø–ø –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                is_group=True,  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
                group_id=None  # –î–ª—è —Å–∞–º–æ–π –≥—Ä—É–ø–ø—ã group_id –Ω–µ –Ω—É–∂–µ–Ω
            )
            logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{group_title}' (ID: {group_id}). –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ.")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            keyboard = InlineKeyboardMarkup(row_width=2)
            # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data ---
            allow_callback = f"allow_group_{group_id}"
            ban_callback = f"ban_group_{group_id}"
            
            logging.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å callback_data: allow={allow_callback}, ban={ban_callback}")
            
            keyboard.add(
                InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=allow_callback),
                InlineKeyboardButton("‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=ban_callback)
            )

            # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for admin in ADMINS:
                await dp.bot.send_message(
                    admin, 
                    f"ü§ñ –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}\n"
                    f"üÜî ID –≥—Ä—É–ø–ø—ã: {group_id}\n"
                    f"üë§ –î–æ–±–∞–≤–∏–ª: {added_by_name} (ID: {added_by})\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )

        # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
        elif message.new_chat_member.status in [types.ChatMemberStatus.LEFT, types.ChatMemberStatus.KICKED]:
            group_id = message.chat.id
            group_title = message.chat.title

            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            db.set_subscription_status(group_id, False)
            logging.info(f"–ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_title}' (ID: {group_id}). –ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

            # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin in ADMINS:
                await dp.bot.send_message(admin, f"üö™ –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: {group_title}")


@dp.callback_query_handler(lambda c: c.data.startswith(('allow_group_', 'ban_group_')))
async def handle_group_decision(callback_query: types.CallbackQuery):
    print("handle_group_decision –≤—ã–∑–≤–∞–Ω", callback_query.data, callback_query.from_user.id)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    user_id = callback_query.from_user.id
    logging.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {type(user_id)}")
    logging.info(f"ADMINS: {ADMINS}, —Ç–∏–ø: {type(ADMINS)}")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {user_id} in {ADMINS} = {user_id in ADMINS}")
    
    # –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É –∏ –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–∞–º –∏–∑ –±–∞–∑—ã
    if not (db.is_superadmin(user_id) or db.is_admin(user_id)):
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ {ADMINS}")
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä callback_data –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö group_id
    # callback_data –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∞: allow_group_{group_id} –∏–ª–∏ ban_group_{group_id}
    prefix, _, group_id_str = callback_query.data.partition('_group_')
    action = prefix  # allow –∏–ª–∏ ban
    group_id = int(group_id_str)
    logging.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, ID –≥—Ä—É–ø–ø—ã: {group_id}")

    if action == "allow":
        db.unban_group(group_id)
        print(f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã {group_id} –ø–æ—Å–ª–µ allow: is_group_banned = {db.is_group_banned(group_id)}")
        await callback_query.message.edit_text(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É."
        )
        logging.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} —Ä–∞–∑—Ä–µ—à–∏–ª –≥—Ä—É–ø–ø—É {group_id}")

    elif action == "ban":
        db.ban_group(group_id)
        try:
            await dp.bot.leave_chat(group_id)
            await callback_query.message.edit_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É."
            )
            logging.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–µ—Ç–∏–ª –≥—Ä—É–ø–ø—É {group_id}, –±–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É")
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É: {e}"
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã {group_id}: {e}")

    await callback_query.answer() 


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@dp.message_handler(chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_protect_filter(message: types.Message):
    if db.is_group_banned(message.chat.id):
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        raise CancelHandler()
    # –í —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë
    pass


@dp.message_handler(Command('group_subscribe'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_subscribe(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        db.set_subscription_status(chat_id, True)
        await message.reply('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.')

@dp.message_handler(Command('group_unsubscribe'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_unsubscribe(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        db.set_subscription_status(chat_id, False)
        await message.reply('–ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.')

# –†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
@dp.message_handler(Command('send_test_video'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def send_test_video(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        from handlers.users.video_scheduler import send_group_video_new
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Centris
        centris_start_season_id, centris_start_video = db.get_group_video_start(chat_id, 'centris')
        golden_start_season_id, golden_start_video = db.get_group_video_start(chat_id, 'golden')
        sent = False
        if centris_start_season_id:
            await send_group_video_new(chat_id, 'centris', centris_start_season_id, centris_start_video)
            sent = True
        if golden_start_season_id:
            await send_group_video_new(chat_id, 'golden', golden_start_season_id, golden_start_video)
            sent = True
        if sent:
            await message.reply('–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        else:
            await message.reply('–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ.')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.') 

@dp.message_handler(Command('migrate_group_video_settings'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def migrate_group_video_settings(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    updated = 0
    groups = db.get_all_groups_with_settings()
    for group in groups:
        chat_id = group[0]
        centris_season = group[2]
        centris_start_video = group[3]
        if centris_season:
            db.set_group_video_start(chat_id, 'centris', int(centris_season), int(centris_start_video))
            updated += 1
    await message.reply(f'–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {updated}') 

@dp.message_handler(Command('group_settings'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_settings(message: types.Message):
    chat_id = message.chat.id
    settings = db.get_group_video_settings(chat_id)
    centris_start_season_id, centris_start_video = db.get_group_video_start(chat_id, 'centris')
    golden_start_season_id, golden_start_video = db.get_group_video_start(chat_id, 'golden')
    is_subscribed = db.get_subscription_status(chat_id)
    text = (
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:</b>\n"
        f"centris_enabled: {settings[0] if settings else '-'}\n"
        f"centris_season: {settings[1] if settings else '-'}\n"
        f"centris_start_video: {settings[2] if settings else '-'}\n"
        f"golden_enabled: {settings[3] if settings else '-'}\n"
        f"golden_start_video: {settings[4] if settings else '-'}\n"
        f"centris_start_season_id: {centris_start_season_id}\n"
        f"centris_start_video: {centris_start_video}\n"
        f"golden_start_season_id: {golden_start_season_id}\n"
        f"golden_start_video: {golden_start_video}\n"
        f"is_subscribed: {is_subscribed}"
    )
    await message.reply(text, parse_mode='HTML') 

@dp.message_handler(Command('set_centr_season'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def set_centr_season(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply('–£–∫–∞–∂–∏—Ç–µ id —Å–µ–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_centr_season 2')
        return
    season_id = int(args)
    db.set_group_video_start(message.chat.id, 'centris', season_id, db.get_group_video_start(message.chat.id, 'centris')[1])
    await message.reply(f'centris_start_season_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {season_id}') 

@dp.message_handler(Command('set_golden_season'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def set_golden_season(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply('–£–∫–∞–∂–∏—Ç–µ id —Å–µ–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_golden_season 2')
        return
    season_id = int(args)
    db.set_group_video_start(message.chat.id, 'golden', season_id, db.get_group_video_start(message.chat.id, 'golden')[1])
    await message.reply(f'golden_start_season_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {season_id}') 

@dp.message_handler(commands=['list_groups'])
async def list_groups_command(message: types.Message):
    groups = db.get_all_users()
    text = '<b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:</b>\n'
    for user_id, name, phone, dt, is_group in groups:
        if is_group:
            banned = db.is_group_banned(user_id)
            status = "–ù–µ—Ç" if banned else "–î–∞"
            text += f'ID: <code>{user_id}</code> | {name} | –†–∞–∑—Ä–µ—à–µ–Ω–∞: <b>{status}</b>\n'
    await message.reply(text, parse_mode='HTML')

@dp.message_handler(commands=['unban_all_groups'])
async def unban_all_groups_command(message: types.Message):
    db.unban_all_groups()
    await message.reply('–ë–∞–Ω —Å–Ω—è—Ç —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø. –í—Å–µ –≥—Ä—É–ø–ø—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!')

@dp.message_handler(chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def debug_group_message(message: types.Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: chat_id={message.chat.id}, user_id={message.from_user.id}, text={message.text}")
    # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º 