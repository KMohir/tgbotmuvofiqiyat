from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from data.config import ADMINS, SUPER_ADMIN_ID
from loader import dp
from db import db
import logging

# --- –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º/–∑–∞–ø—Ä–µ—Ç–æ–º –≥—Ä—É–ø–ø ---


@dp.my_chat_member_handler()
async def my_chat_member_handler(message: types.ChatMemberUpdated):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ
        if message.old_chat_member.status in [types.ChatMemberStatus.LEFT, types.ChatMemberStatus.KICKED] and \
           message.new_chat_member.status in [types.ChatMemberStatus.MEMBER, types.ChatMemberStatus.ADMINISTRATOR]:
            group_id = message.chat.id
            group_title = message.chat.title
            added_by = message.from_user.id
            added_by_name = message.from_user.full_name

            # –ü–†–û–í–ï–†–Ø–ï–ú: –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
            if not db.is_superadmin(added_by):
                logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {group_id} –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {added_by}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–∞
                try:
                    await message.bot.send_message(
                        group_id,
                        f"üö´ **Bot qo'shish ruxsati yo'q!**\n\n"
                        f"Botni faqat super-admin qo'sha oladi.\n"
                        f"Qo'shgan: {added_by_name} (ID: {added_by})\n\n"
                        f"Bot avtomatik ravishda guruhni tark etadi."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
                
                # –ë–æ—Ç –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥—Ä—É–ø–ø—ã
                try:
                    await message.bot.leave_chat(group_id)
                    logging.warning(f"–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É {group_id} –∏–∑-–∑–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                
                # –û–ø–æ–≤–µ—â–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
                for admin in ADMINS:
                    try:
                        await dp.bot.send_message(
                            admin, 
                            f"üö´ **–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞!**\n\n"
                            f"üìù –ì—Ä—É–ø–ø–∞: {group_title}\n"
                            f"üÜî ID –≥—Ä—É–ø–ø—ã: {group_id}\n"
                            f"üë§ –ü–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å: {added_by_name} (ID: {added_by})\n\n"
                            f"‚ùå –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É."
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin}: {e}")
                
                return

            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ whitelist
            logging.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {added_by} –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {group_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞)
            db.add_user(
                user_id=group_id,
                name=group_title,
                phone=None,  # –£ –≥—Ä—É–ø–ø –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                is_group=True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ whitelist
            if db.add_group_to_whitelist_auto(group_id, group_title, added_by):
                logging.info(f"–ì—Ä—É–ø–ø–∞ '{group_title}' (ID: {group_id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ whitelist")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É '{group_title}' (ID: {group_id}) –≤ whitelist")
            
            logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{group_title}' (ID: {group_id}). –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ.")

            # –û–ø–æ–≤–µ—â–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            for admin in ADMINS:
                try:
                    await dp.bot.send_message(
                        admin, 
                        f"‚úÖ **–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!**\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}\n"
                        f"üÜî ID –≥—Ä—É–ø–ø—ã: {group_id}\n"
                        f"üë§ –î–æ–±–∞–≤–∏–ª: {added_by_name} (ID: {added_by})\n\n"
                        f"ü§ñ –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ whitelist –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin}: {e}")

        # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –≥—Ä—É–ø–ø–µ
        elif message.new_chat_member.status in [types.ChatMemberStatus.LEFT, types.ChatMemberStatus.KICKED]:
            group_id = message.chat.id
            group_title = message.chat.title

            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            db.set_subscription_status(group_id, False)
            logging.info(f"–ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_title}' (ID: {group_id}). –ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

            # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin in ADMINS:
                try:
                    await dp.bot.send_message(admin, f"üö™ –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: {group_title}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin}: {e}")


@dp.callback_query_handler(lambda c: c.data.startswith(('allow_group_', 'ban_group_')))
async def handle_group_decision(callback_query: types.CallbackQuery):
    print("handle_group_decision –≤—ã–∑–≤–∞–Ω", callback_query.data, callback_query.from_user.id)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    user_id = callback_query.from_user.id
    logging.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {type(user_id)}")
    logging.info(f"ADMINS: {ADMINS}, —Ç–∏–ø: {type(ADMINS)}")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {user_id} in {ADMINS} = {user_id in ADMINS}")
    
    # –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É –∏ –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–∞–º –∏–∑ –±–∞–∑—ã
    # if not (db.is_superadmin(user_id) or db.is_admin(user_id)):
    #     logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ {ADMINS}")
    #     await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
    #     return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä callback_data –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö group_id
    # callback_data –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∞: allow_group_{group_id} –∏–ª–∏ ban_group_{group_id}
    prefix, _, group_id_str = callback_query.data.partition('_group_')
    action = prefix  # allow –∏–ª–∏ ban
    group_id = int(group_id_str)
    logging.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}, ID –≥—Ä—É–ø–ø—ã: {group_id}")

    # if action == "allow":
    #     db.unban_group(group_id)
    #     print(f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã {group_id} –ø–æ—Å–ª–µ allow: is_group_banned = {db.is_group_banned(group_id)}")
    #     await callback_query.message.edit_text(
    #         f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É."
    #     )
    #     logging.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} —Ä–∞–∑—Ä–µ—à–∏–ª –≥—Ä—É–ø–ø—É {group_id}")

    # elif action == "ban":
    #     db.ban_group(group_id)
    #     try:
    #         await dp.bot.leave_chat(group_id)
    #         await callback_query.message.edit_text(
    #             f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É."
    #         )
    #         logging.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∑–∞–ø—Ä–µ—Ç–∏–ª –≥—Ä—É–ø–ø—É {group_id}, –±–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É")
    #     except Exception as e:
    #         await callback_query.message.edit_text(
    #             f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É: {e}"
    #         )
    #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã {group_id}: {e}")

    await callback_query.answer() 


@dp.message_handler(Command('group_subscribe'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_subscribe(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        db.set_subscription_status(chat_id, True)
        await message.reply('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.')

@dp.message_handler(Command('group_unsubscribe'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_unsubscribe(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        db.set_subscription_status(chat_id, False)
        await message.reply('–ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.')

# –†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
@dp.message_handler(Command('send_test_video'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def send_test_video(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    member = await message.bot.get_chat_member(chat_id, user_id)
    from data.config import ADMINS
    if member.is_chat_admin() or user_id in ADMINS:
        from handlers.users.video_scheduler import send_group_video_new
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Centris
        centris_start_season_id, centris_start_video = db.get_group_video_start(chat_id, 'centris')
        golden_start_season_id, golden_start_video = db.get_group_video_start(chat_id, 'golden')
        sent = False
        if centris_start_season_id:
            await send_group_video_new(chat_id, 'centris', centris_start_season_id, centris_start_video)
            sent = True
        if golden_start_season_id:
            await send_group_video_new(chat_id, 'golden', golden_start_season_id, golden_start_video)
            sent = True
        if sent:
            await message.reply('–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        else:
            await message.reply('–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ.')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.') 

@dp.message_handler(Command('migrate_group_video_settings'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def migrate_group_video_settings(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    updated = 0
    groups = db.get_all_groups_with_settings()
    for group in groups:
        chat_id = group[0]
        centris_season = group[2]  # centris_season
        centris_start_video = group[4]  # centris_start_video
        if centris_season:
            db.set_group_video_start(chat_id, 'centris', int(centris_season), int(centris_start_video))
            updated += 1
    await message.reply(f'–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {updated}') 

@dp.message_handler(Command('group_settings'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def group_settings(message: types.Message):
    chat_id = message.chat.id
    settings = db.get_group_video_settings(chat_id)
    centris_start_season_id, centris_start_video = db.get_group_video_start(chat_id, 'centris')
    golden_start_season_id, golden_start_video = db.get_group_video_start(chat_id, 'golden')
    is_subscribed = db.get_subscription_status(chat_id)
    text = (
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:</b>\n"
        f"centris_enabled: {settings[0] if settings else '-'}\n"
        f"centris_season: {settings[1] if settings else '-'}\n"
        f"centris_start_video: {settings[2] if settings else '-'}\n"
        f"golden_enabled: {settings[4] if settings else '-'}\n"
        f"golden_season: {settings[5] if settings else '-'}\n"
        f"golden_start_video: {settings[6] if settings else '-'}\n"
        f"centris_start_season_id: {centris_start_season_id}\n"
        f"centris_start_video: {centris_start_video}\n"
        f"golden_start_season_id: {golden_start_season_id}\n"
        f"golden_start_video: {golden_start_video}\n"
        f"is_subscribed: {is_subscribed}"
    )
    await message.reply(text, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø—ã (–∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
@dp.message_handler(Command('show_group_video_settings'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def show_group_video_settings_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from data.config import ADMINS
        if user_id not in ADMINS:
            await message.reply('‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.reply(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        centris_start = db.get_group_video_start(chat_id, 'centris')
        golden_start = db.get_group_video_start(chat_id, 'golden')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö
        centris_season_name = "N/A"
        golden_season_name = "N/A"
        
        if settings[1]:  # centris_season
            centris_season_info = db.get_season_by_id(settings[1])
            if centris_season_info:
                centris_season_name = centris_season_info[1]  # season_name
        
        if settings[5]:  # golden_season
            golden_season_info = db.get_season_by_id(settings[5])
            if golden_season_info:
                golden_season_name = golden_season_info[1]  # season_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
        
        # Centris Towers
        response += "üè¢ **Centris Towers:**\n"
        if settings[0]:  # centris_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {centris_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {centris_start[1] if centris_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # Golden Lake
        response += "üèòÔ∏è **Golden Lake:**\n"
        if settings[4]:  # golden_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {golden_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {golden_start[1] if golden_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = db.get_subscription_status(chat_id)
        response += f"üì° **Obuna holati:** {'‚úÖ Faol' if is_subscribed else '‚ùå Faol emas'}\n"
        
        # Whitelist —Å—Ç–∞—Ç—É—Å
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"üîí **Whitelist:** {'‚úÖ Ruxsat berilgan' if is_whitelisted else '‚ùå Ruxsat berilmagan'}\n"
        
        await message.reply(response, parse_mode='Markdown')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        await message.reply(f"‚ùå Xatolik yuz berdi: {e}")

@dp.message_handler(Command('set_centr_season'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def set_centr_season(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply('–£–∫–∞–∂–∏—Ç–µ id —Å–µ–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_centr_season 2')
        return
    season_id = int(args)
    db.set_group_video_start(message.chat.id, 'centris', season_id, db.get_group_video_start(message.chat.id, 'centris')[1])
    await message.reply(f'centris_start_season_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {season_id}') 

@dp.message_handler(Command('set_golden_season'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def set_golden_season(message: types.Message):
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply('–£–∫–∞–∂–∏—Ç–µ id —Å–µ–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_golden_season 2')
        return
    season_id = int(args)
    db.set_group_video_start(message.chat.id, 'golden', season_id, db.get_group_video_start(message.chat.id, 'golden')[1])
    await message.reply(f'golden_start_season_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {season_id}') 

@dp.message_handler(commands=['list_groups'])
async def list_groups_command(message: types.Message):
    groups = db.get_all_users()
    text = '<b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:</b>\n'
    for user_id, name, phone, dt, is_group in groups:
        if is_group:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ whitelist
            is_whitelisted = db.is_group_whitelisted(user_id)
            status = "–î–∞" if is_whitelisted else "–ù–µ—Ç"
            text += f'ID: <code>{user_id}</code> | {name} | –†–∞–∑—Ä–µ—à–µ–Ω–∞: <b>{status}</b>\n'
    await message.reply(text, parse_mode='HTML')

@dp.message_handler(commands=['unban_all_groups'])
async def unban_all_groups_command(message: types.Message):
    db.unban_all_groups()
    await message.reply('–í—Å–µ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.')

@dp.message_handler(Command('debug_video_sending'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def debug_video_sending(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
    is_whitelisted = db.is_group_whitelisted(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
    settings = db.get_group_video_settings(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    centris_start = db.get_group_video_start(chat_id, 'centris')
    golden_start = db.get_group_video_start(chat_id, 'golden')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    viewed_videos = db.get_group_viewed_videos(chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    from handlers.users.video_scheduler import scheduler
    jobs = scheduler.get_jobs()
    group_jobs = [job for job in jobs if job.id.startswith(f"group_") and str(chat_id) in job.id]
    
    text = f"""üîç **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò –í–ò–î–ï–û**

üìã **–ì—Ä—É–ø–ø–∞:** {chat_id}
‚úÖ **Whitelist:** {'–î–∞' if is_whitelisted else '–ù–µ—Ç'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- Centris: {'–í–∫–ª—é—á–µ–Ω' if settings and settings[0] else '–û—Ç–∫–ª—é—á–µ–Ω'}
- Centris —Å–µ–∑–æ–Ω: {settings[1] if settings else '–ù–µ –∑–∞–¥–∞–Ω'}
- Centris —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {settings[2] if settings else '–ù–µ –∑–∞–¥–∞–Ω–æ'}
- Golden: {'–í–∫–ª—é—á–µ–Ω' if settings and settings[4] else '–û—Ç–∫–ª—é—á–µ–Ω'}
- Golden —Å–µ–∑–æ–Ω: {settings[5] if settings else '–ù–µ –∑–∞–¥–∞–Ω'}
- Golden —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {settings[6] if settings else '–ù–µ –∑–∞–¥–∞–Ω–æ'}

üéØ **–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**
- Centris: —Å–µ–∑–æ–Ω {centris_start[0]}, –≤–∏–¥–µ–æ {centris_start[1]}
- Golden: —Å–µ–∑–æ–Ω {golden_start[0]}, –≤–∏–¥–µ–æ {golden_start[1]}

üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:** {len(viewed_videos)} —à—Ç.
üìÖ **–ó–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:** {len(group_jobs)} —à—Ç.

üîÑ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–∞—Ç—É—Å:** {'–ó–∞–ø—É—â–µ–Ω' if scheduler.running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
"""
    
    await message.reply(text, parse_mode='HTML')

@dp.message_handler(Command('restart_scheduler'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def restart_scheduler_command(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    
    try:
        from handlers.users.video_scheduler import schedule_group_jobs, scheduler
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            scheduler.shutdown()
            await message.reply('üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        schedule_group_jobs()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not scheduler.running:
            scheduler.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        jobs = scheduler.get_jobs()
        group_jobs = [job for job in jobs if job.id.startswith("group_")]
        
        await message.reply(
            f'‚úÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!**\n\n'
            f'üìÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(jobs)}\n'
            f'üè¢ –ó–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø: {len(group_jobs)}\n'
            f'üîÑ –°—Ç–∞—Ç—É—Å: {"–ó–∞–ø—É—â–µ–Ω" if scheduler.running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}',
            parse_mode='HTML'
        )
        
    except Exception as e:
        await message.reply(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}')

@dp.message_handler(Command('test_video_sending'), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def test_video_sending_command(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É"""
    user_id = message.from_user.id
    from data.config import ADMINS
    if user_id not in ADMINS:
        await message.reply('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return
    
    chat_id = message.chat.id
    
    try:
        from handlers.users.video_scheduler import send_group_video_new
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤ whitelist! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É –≤ whitelist.')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = db.get_group_video_settings(chat_id)
        if not settings or (not settings[0] and not settings[4]):
            await message.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group_video')
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
        sent = False
        
        if settings[0] and settings[1]:  # Centris –≤–∫–ª—é—á–µ–Ω
            centris_start = db.get_group_video_start(chat_id, 'centris')
            if centris_start[0]:
                result = await send_group_video_new(chat_id, 'centris', centris_start[0], centris_start[1])
                if result:
                    sent = True
                    await message.reply('‚úÖ Centris –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                else:
                    await message.reply('‚ö†Ô∏è Centris –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã)')
        
        if settings[4] and settings[5]:  # Golden –≤–∫–ª—é—á–µ–Ω
            golden_start = db.get_group_video_start(chat_id, 'golden')
            if golden_start[0]:
                result = await send_group_video_new(chat_id, 'golden_lake', golden_start[0], golden_start[1])
                if result:
                    sent = True
                    await message.reply('‚úÖ Golden Lake –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                else:
                    await message.reply('‚ö†Ô∏è Golden Lake –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã)')
        
        if not sent:
            await message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å.')
            
    except Exception as e:
        await message.reply(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}')

@dp.message_handler(commands=['force_remove_group'])
async def force_remove_group_command(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    if not db.is_superadmin(user_id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    args = message.get_args().strip()
    if not args:
        await message.reply("üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n`/force_remove_group <chat_id>`\n\n–ü—Ä–∏–º–µ—Ä: `/force_remove_group -1001234567890`")
        return
    
    try:
        chat_id = int(args)
        
        if not db.is_group_whitelisted(chat_id):
            await message.reply(f"‚ùå –ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ whitelist.")
            return
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ whitelist
        success = db.remove_group_from_whitelist(chat_id)
        if success:
            # –ë–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É
            try:
                await message.bot.leave_chat(chat_id)
                await message.reply(f"‚úÖ **–ì—Ä—É–ø–ø–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ whitelist –∏ –±–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.**")
                logging.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª –≥—Ä—É–ø–ø—É {chat_id} –∏–∑ whitelist")
            except Exception as e:
                await message.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ whitelist, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat_id} –∏–∑ whitelist.")
            
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chat ID. –í–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await message.reply("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")

@dp.message_handler(chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def debug_group_message(message: types.Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: chat_id={message.chat.id}, user_id={message.from_user.id}, text={message.text}")
    # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º 