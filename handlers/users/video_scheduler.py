from handlers import groups

from aiogram import types
import asyncio
from datetime import datetime, timedelta, time
from db import db
from loader import dp, bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
import logging
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.users.video_lists import VIDEO_LIST_1, VIDEO_LIST_2, VIDEO_LIST_3, VIDEO_LIST_4, VIDEO_LIST_5, VIDEO_LIST_GOLDEN_1
from aiogram.utils.exceptions import MigrateToChat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
SUPER_ADMIN_IDS = [5657091547, 7983512278, 5310261745, 8053364577]

# –í–º–µ—Å—Ç–æ VIDEO_LIST —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º VIDEO_LIST_1
VIDEO_LIST = VIDEO_LIST_1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(
    timezone="Asia/Tashkent",
    job_defaults={
        'coalesce': False,  # –ù–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        'max_instances': 1,  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        'misfire_grace_time': 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    }
)

def schedule_job_with_immediate_check(scheduler, func, hour, minute, args, job_id, timezone="Asia/Tashkent"):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É: –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    """
    try:
        current_time = datetime.now(pytz.timezone(timezone))
        target_time = current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if current_time >= target_time:
            # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            logger.info(f"–í—Ä–µ–º—è {hour:02d}:{minute:02d} —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è {job_id}")
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        scheduler.add_job(
            func,
            'cron',
            hour=hour, minute=minute,
            args=args,
            id=job_id,
            timezone=timezone,
            misfire_grace_time=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            replace_existing=True,
            max_instances=1  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        )
        
        logger.info(f"–ó–∞–¥–∞—á–∞ {job_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {hour:02d}:{minute:02d}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {job_id}: {e}")

def get_video_list_by_project_and_season(project: str, season: str):
    if project == "centris":
        if season == "1-sezon":
            return VIDEO_LIST_1
        elif season == "2-sezon":
            return VIDEO_LIST_2
        elif season == "3-sezon":
            return VIDEO_LIST_3
        elif season == "4-sezon":
            return VIDEO_LIST_4
        elif season == "5-sezon":
            return VIDEO_LIST_5
        else:
            return VIDEO_LIST_1
    elif project == "golden_lake":
        return VIDEO_LIST_GOLDEN_1
    return []

def get_all_group_videos(project):
    if project == "centris":
        return VIDEO_LIST_1 + VIDEO_LIST_2 + VIDEO_LIST_3 + VIDEO_LIST_4 + VIDEO_LIST_5
    elif project == "golden_lake":
        return VIDEO_LIST_GOLDEN_1
    return []

# --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞) ---
async def send_group_video(chat_id: int, project: str, season: str, video_index: int):
    try:
        all_videos = get_all_group_videos(project)
        viewed = db.get_group_viewed_videos(chat_id)
        # –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        next_idx = db.get_next_unwatched_group_video_index(chat_id, len(all_videos))
        if next_idx == -1:
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –≤—Å–µ –≤–∏–¥–µ–æ ({project})")
            return False
        video_url = all_videos[next_idx]
        message_id = int(video_url.split("/")[-1])
        await bot.copy_message(
            chat_id=chat_id,
            from_chat_id=-1002550852551,
            message_id=message_id,
            protect_content=True
        )
        db.mark_group_video_as_viewed(chat_id, next_idx)
        logger.info(f"–í–∏–¥–µ–æ {next_idx} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {chat_id} (–ø—Ä–æ–µ–∫—Ç {project})")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
        return False

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ —Å–µ–∑–æ–Ω–∞ –ø–æ ID (–∏–∑ –±–∞–∑—ã) ---
def get_videos_for_group(project, season_id):
    if project == "centris" and season_id:
        return db.get_videos_by_season(season_id)
    elif project == "golden_lake" and season_id:
        return db.get_videos_by_season(season_id)
    return []

# --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ ---
async def notify_superadmins_season_completed(chat_id: int, season_id: int, project: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_name = "Noma'lum guruh"
        try:
            chat_info = await bot.get_chat(chat_id)
            group_name = chat_info.title or f"Guruh {chat_id}"
        except Exception:
            group_name = f"Guruh {chat_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
        season_name = db.get_season_name(season_id) or f"Sezon {season_id}"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
        project_name_uz = "Centris Towers" if project == "centris" else "Golden Lake" if project in ["golden", "golden_lake"] else project
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
        message = (
            f"üèÅ **SEZON TUGADI**\n\n"
            f"üè¢ **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{chat_id}`\n"
            f"üé¨ **Loyiha:** {project_name_uz}\n"
            f"üì∫ **Sezon:** {season_name}\n\n"
            f"‚úÖ Ushbu guruhdagi barcha videolar yuborildi.\n"
            f"üîÑ Keyingi sezonni boshlash uchun `/set_group_video` buyrug'ini ishlatish kerak.\n\n"
            f"üìÖ **Vaqt:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
        for admin_id in SUPER_ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode="Markdown"
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
        logger.info(f"üèÅ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ {season_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞: {e}")


# --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ ---
async def notify_superadmins_season_auto_switched(chat_id: int, old_season_id: int, project: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω"""
    try:
        from loader import dp
        from data.config import ADMINS
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = db.get_group_by_id(chat_id)
        group_name = group_info[1] if group_info and group_info[1] else "Noma'lum guruh"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ
        settings = db.get_group_video_settings(chat_id)
        project_for_db = "golden" if project == "golden_lake" else project
        
        if project_for_db == "centris" and settings:
            new_season_id = settings[1]  # centris_season_id
        elif project_for_db == "golden" and settings:
            new_season_id = settings[4]  # golden_season_id
        else:
            new_season_id = None
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        new_season_name = "Noma'lum sezon"
        if new_season_id:
            season_info = db.get_season_by_id(new_season_id)
            if season_info:
                new_season_name = season_info[1]
        
        project_name = "Centris Towers" if project_for_db == "centris" else "Golden Lake"
        
        message = f"üîÑ **Avtomatik sezon almashtirish**\n\n" \
                 f"üì± **Guruh:** {group_name}\n" \
                 f"üÜî **ID:** `{chat_id}`\n" \
                 f"üé¨ **Loyiha:** {project_name}\n\n" \
                 f"üìä **O'zgarishlar:**\n" \
                 f"‚Ä¢ Eski sezon ID: `{old_season_id}`\n" \
                 f"‚Ä¢ Yangi sezon ID: `{new_season_id}`\n" \
                 f"‚Ä¢ Yangi sezon: {new_season_name}\n\n" \
                 f"‚úÖ **Guruh avtomatik ravishda keyingi sezonga o'tdi!**\n" \
                 f"üöÄ **Birinchi video tez orada yuboriladi.**"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        success_count = 0
        for admin_id in ADMINS:
            try:
                await dp.bot.send_message(admin_id, message, parse_mode="Markdown")
                success_count += 1
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        logger.info(f"üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ {old_season_id}‚Üí{new_season_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∞–¥–º–∏–Ω–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ –æ–± –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞: {e}")

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø ---
async def send_group_video_new(chat_id: int, project: str, season_id: int = None, start_video: int = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    try:
        # –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ whitelist
        if not db.is_group_whitelisted(chat_id):
            logger.warning(f"Guruh {chat_id} whitelist da emas, video yuborilmaydi")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        season_db, video_db = db.get_group_video_start(chat_id, project)
        logger.info(f"üéØ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, –ø—Ä–æ–µ–∫—Ç {project}: season_db={season_db}, video_db={video_db}")
        
        season_id = season_id if season_id is not None else season_db
        start_video = start_video if start_video is not None else video_db
        
        logger.info(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: season_id={season_id}, start_video={start_video}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å season_id
        if not season_id:
            logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, –ø—Ä–æ–µ–∫—Ç {project}")
            return False
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ season_id - —Å—Ç—Ä–æ–∫–∞ "centris" –∏–ª–∏ "golden"
        if season_id == "centris" and project == "centris":
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω Centris
            centris_seasons = db.get_seasons_by_project("centris")
            if centris_seasons:
                season_id = centris_seasons[0][0]
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: 'centris' -> {season_id}")
            else:
                logger.error(f"–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                return False
        elif season_id == "golden" and project in ["golden_lake", "golden"]:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω Golden Lake
            golden_seasons = db.get_seasons_by_project("golden")
            if golden_seasons:
                season_id = golden_seasons[0][0]
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: 'golden' -> {season_id}")
            else:
                logger.error(f"–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Golden Lake –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                return False
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ season_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            season_id = int(season_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π season_id '{season_id}' –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, –ø—Ä–æ–µ–∫—Ç {project}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã.")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞
        if project == "centris":
            all_seasons = db.get_seasons_by_project("centris")
        elif project == "golden_lake" or project == "golden":
            all_seasons = db.get_seasons_by_project("golden")
        else:
            all_seasons = []

        if not all_seasons:
            logger.info(f"–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
            return False

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
        current_season_index = -1
        for i, (s_id, s_name) in enumerate(all_seasons):
            if s_id == season_id:
                current_season_index = i
                break

        if current_season_index == -1:
            logger.info(f"–°–µ–∑–æ–Ω {season_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ")
            current_season_index = 0
            season_id = all_seasons[0][0]
            start_video = 0

        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        project_for_db = "golden_lake" if project == "golden" else project
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¢–û–õ–¨–ö–û –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–∑–æ–Ω—É ---
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "season_id:position"
        viewed_videos_detailed = db.get_group_viewed_videos_detailed_by_project(chat_id, project_for_db)
        
        logger.info(f"üéØ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –≤–∏–¥–µ–æ –ø—Ä–æ–µ–∫—Ç–∞ {project}: {len(viewed_videos_detailed)}")
        logger.info(f"üéØ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: {viewed_videos_detailed}")
        logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –¢–û–õ–¨–ö–û –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {season_id}")
        logger.info(f"üéØ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_video}")
        
        # –†–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ–∑–æ–Ω–æ–º
        current_season_videos = db.get_videos_by_season(season_id)
        logger.info(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∑–æ–Ω {season_id}: {len(current_season_videos)} –≤–∏–¥–µ–æ")
        
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–∑–æ–Ω–µ (–Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ)
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–æ–∑–∏—Ü–∏–∏ start_video: {start_video}")
        logger.info(f"üéØ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ —Å–µ–∑–æ–Ω–∞: {[(position, title[:30]) for url, title, position in current_season_videos[:5]]}...")
        
        for video_idx, (url, title, position) in enumerate(current_season_videos):
            video_key = f"{season_id}:{position}"
            logger.info(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ: position={position}, start_video={start_video}, video_key={video_key}")
            
            # –í–ê–ñ–ù–û: –ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞—á–∏–Ω–∞—è —Å start_video (–∏–ª–∏ –±–æ–ª—å—à–µ)
            if position >= start_video and video_key not in viewed_videos_detailed:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {video_key} (—Å–µ–∑–æ–Ω {season_id}, –ø–æ–∑–∏—Ü–∏—è {position})")
                logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {title}")
                
                message_id = int(url.split("/")[-1])
                await bot.copy_message(
                    chat_id=chat_id,
                    from_chat_id=-1002550852551,
                    message_id=message_id,
                    protect_content=True
                )
                logger.info(f"‚úÖ –í–∏–¥–µ–æ {position} —Å–µ–∑–æ–Ω–∞ {season_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {chat_id} (–ø—Ä–æ–µ–∫—Ç {project})")
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                db.mark_group_video_as_viewed_detailed_by_project(chat_id, season_id, position, project_for_db)
                logger.info(f"‚úÖ –í–∏–¥–µ–æ {video_key} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, –ø—Ä–æ–µ–∫—Ç {project}")
                
                # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º start_video –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
                next_position = position + 1
                # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                project_for_db_update = "golden" if project == "golden_lake" else project
                db.set_group_video_start(chat_id, project_for_db_update, season_id, next_position)
                logger.info(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω start_video –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {position} ‚Üí {next_position}")
                
                return True
            else:
                logger.info(f"üéØ –í–∏–¥–µ–æ {video_key} —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã - —Å–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
        logger.info(f"üîÑ –í—Å–µ –≤–∏–¥–µ–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {season_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω
        project_for_db = "golden" if project == "golden_lake" else project
        success = db.auto_switch_to_next_season(chat_id, project_for_db, season_id)
        
        if success:
            logger.info(f"üéâ –ì—Ä—É–ø–ø–∞ {chat_id}: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ {project}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            await notify_superadmins_season_auto_switched(chat_id, season_id, project)
            
            # –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                new_settings = db.get_group_video_settings(chat_id)
                if new_settings:
                    if project_for_db == "centris" and new_settings[0]:  # centris_enabled
                        new_season_id = new_settings[1]  # centris_season_id
                        if new_season_id:
                            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {new_season_id} –ø—Ä–æ–µ–∫—Ç–∞ {project}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
                            from loader import bot
                            new_season_videos = db.get_videos_by_season(new_season_id)
                            if new_season_videos:
                                first_video = new_season_videos[0]  # –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
                                url, title, position = first_video
                                
                                message_id = int(url.split("/")[-1])
                                await bot.copy_message(
                                    chat_id=chat_id,
                                    from_chat_id=-1002550852551,
                                    message_id=message_id,
                                    protect_content=True
                                )
                                
                                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                                db.mark_group_video_as_viewed_detailed_by_project(chat_id, new_season_id, position, project_for_db)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º start_video –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
                                db.set_group_video_start(chat_id, project_for_db, new_season_id, position + 1)
                                
                                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {new_season_id}: {title}")
                                return True
                            
                    elif project_for_db == "golden" and new_settings[3]:  # golden_enabled
                        new_season_id = new_settings[4]  # golden_season_id
                        if new_season_id:
                            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {new_season_id} –ø—Ä–æ–µ–∫—Ç–∞ {project}")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
                            from loader import bot
                            new_season_videos = db.get_videos_by_season(new_season_id)
                            if new_season_videos:
                                first_video = new_season_videos[0]  # –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
                                url, title, position = first_video
                                
                                message_id = int(url.split("/")[-1])
                                await bot.copy_message(
                                    chat_id=chat_id,
                                    from_chat_id=-1002550852551,
                                    message_id=message_id,
                                    protect_content=True
                                )
                                
                                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                                db.mark_group_video_as_viewed_detailed_by_project(chat_id, new_season_id, position, project_for_db)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º start_video –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
                                db.set_group_video_start(chat_id, project_for_db, new_season_id, position + 1)
                                
                                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ {new_season_id}: {title}")
                                return True
                                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞: {e}")
                
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            await notify_superadmins_season_completed(chat_id, season_id, project)
            
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_group_video_new: {e}")
        return False

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---
async def test_video_sequence_fix(chat_id: int, project: str):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ (3, 8, 9 –∏ –±–æ–ª—å—à–µ)
    """
    logger.info(f"üß™ –¢–ï–°–¢: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}, –ø—Ä–æ–µ–∫—Ç {project}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
    settings = db.get_group_video_settings(chat_id)
    if not settings:
        logger.error(f"üß™ –¢–ï–°–¢: –ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    project_for_db = "golden_lake" if project == "golden" else project
    viewed_positions = db.get_group_viewed_videos_by_project(chat_id, project_for_db)
    logger.info(f"üß™ –¢–ï–°–¢: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {project_for_db}: {viewed_positions}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞
    if project == "centris":
        all_seasons = db.get_seasons_by_project("centris")
    elif project == "golden" or project == "golden_lake":
        all_seasons = db.get_seasons_by_project("golden")
    else:
        logger.error(f"üß™ –¢–ï–°–¢: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç {project}")
        return False
    
    logger.info(f"üß™ –¢–ï–°–¢: –ù–∞–π–¥–µ–Ω–æ —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è {project}: {len(all_seasons)} (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 3, 8, 9+)")
    for i, (season_id, season_name) in enumerate(all_seasons):
        logger.info(f"üß™ –¢–ï–°–¢: –°–µ–∑–æ–Ω #{i+1} (ID: {season_id}): {season_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    season_db, video_db = db.get_group_video_start(chat_id, project)
    logger.info(f"üß™ –¢–ï–°–¢: –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–µ–∑–æ–Ω: {season_db}, —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {video_db}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏
    if len(all_seasons) > 1:
        logger.info(f"üß™ –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö {len(all_seasons)} —Å–µ–∑–æ–Ω–æ–≤")
        logger.info(f"üß™ –¢–ï–°–¢: –ü–æ—Ä—è–¥–æ–∫: –°–µ–∑–æ–Ω 1 ‚Üí –°–µ–∑–æ–Ω 2 ‚Üí ... ‚Üí –°–µ–∑–æ–Ω {len(all_seasons)} ‚Üí –°–µ–∑–æ–Ω 1 (—Ü–∏–∫–ª)")
    else:
        logger.info(f"üß™ –¢–ï–°–¢: –¢–æ–ª—å–∫–æ 1 —Å–µ–∑–æ–Ω - –±—É–¥–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    
    return True

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–æ–≤ ---
def get_seasons_statistics():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ–∑–æ–Ω–æ–≤ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    """
    try:
        centris_seasons = db.get_seasons_by_project("centris")
        golden_seasons = db.get_seasons_by_project("golden")
        
        stats = {
            "centris": {
                "count": len(centris_seasons),
                "seasons": centris_seasons
            },
            "golden": {
                "count": len(golden_seasons), 
                "seasons": golden_seasons
            }
        }
        
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: Centris Towers - {stats['centris']['count']} —Å–µ–∑–æ–Ω–æ–≤")
        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: Golden Lake - {stats['golden']['count']} —Å–µ–∑–æ–Ω–æ–≤")
        
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: {e}")
        return None

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞) ---
async def send_group_video_by_settings(chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç group_video_settings:
    - –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    - –ï—Å–ª–∏ centris_enabled/golden_enabled ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ
    - –ï—Å–ª–∏ –æ–±–∞ True ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–∞ –ø–æ—Ç–æ–∫–∞
    """
    # –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ whitelist
    if not db.is_group_whitelisted(chat_id):
        logger.warning(f"Guruh {chat_id} whitelist da emas, r–∞—Å—Å—ã–ª–∫–∞ o'tkazib yuboriladi")
        return
        
    settings = db.get_group_video_settings(chat_id)
    if not settings or (not settings[0] and not settings[4]):
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ")
        return False
    centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, send_times = settings
    sent = False
    if centris_enabled and centris_season_id:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ Centris
        res = await send_group_video_new(chat_id, "centris", centris_season_id, centris_start_video)
        sent = sent or res
    if golden_enabled and golden_season_id:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ Golden Lake
        res = await send_group_video_new(chat_id, "golden_lake", golden_season_id, golden_start_video)
        sent = sent or res
    return sent

# --- –£–°–¢–ê–†–ï–í–®–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø ---
# def schedule_group_jobs():
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø (–ª–æ–≥–∏–∫–∞ Centris/Golden)")
        jobs = scheduler.get_jobs()
        for job in jobs:
            if job.id.startswith("group_"):
                scheduler.remove_job(job.id)
        groups = db.get_all_groups_with_settings()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        for chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name in groups:
            if centris_enabled and not golden_enabled:
                # –¢–æ–ª—å–∫–æ Centris Towers - 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 07:00, 11:00, 20:00
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=7,
                        minute=0,
                    args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrismorning_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=11,
                        minute=0,
                    args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrismid_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=20,
                        minute=0,
                    args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrisevening_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
            elif golden_enabled and not centris_enabled:
                # –¢–æ–ª—å–∫–æ Golden Lake - 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 07:00, 11:00, 20:00
                scheduler.add_job(
                    send_group_video_new,
                    trigger='cron',
                    hour=7,
                    minute=0,
                    args=[chat_id, 'golden_lake', golden_season_id],
                    id=f"group_goldenmorning_{chat_id}",
                    replace_existing=True,
                    timezone="Asia/Tashkent"
                )
                scheduler.add_job(
                    send_group_video_new,
                    trigger='cron',
                    hour=11,
                    minute=0,
                    args=[chat_id, 'golden_lake', golden_season_id],
                    id=f"group_goldenmid_{chat_id}",
                    replace_existing=True,
                    timezone="Asia/Tashkent"
                )
                scheduler.add_job(
                    send_group_video_new,
                    trigger='cron',
                    hour=20,
                    minute=0,
                    args=[chat_id, 'golden_lake', golden_season_id],
                    id=f"group_goldenevening_{chat_id}",
                    replace_existing=True,
                    timezone="Asia/Tashkent"
                )
            elif centris_enabled and golden_enabled:
                # –û–±–∞: Centris 07:00, 11:00, 20:00, Golden 11:00
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=7,
                        minute=0,
                    args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrismorning_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=11,
                        minute=0,
                    args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrismid_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
                    scheduler.add_job(
                    send_group_video_new,
                        trigger='cron',
                        hour=20,
                        minute=0,
                        args=[chat_id, 'centris', centris_season_id],
                        id=f"group_centrisevening_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
                    scheduler.add_job(
                        send_group_video_new,
                        trigger='cron',
                        hour=11,
                        minute=0,
                        args=[chat_id, 'golden_lake', golden_season_id],
                        id=f"group_golden_{chat_id}",
                        replace_existing=True,
                        timezone="Asia/Tashkent"
                    )
        logger.info("–ó–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º Centris/Golden")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø: {e}")

def get_next_video_index(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ"""
    viewed_videos = db.get_viewed_videos(user_id)
    current_index = db.get_video_index(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    if not viewed_videos and current_index == 0:
        start_index = db.get_start_video_index()
        if start_index < len(VIDEO_LIST):
            return start_index

    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    for i in range(current_index, len(VIDEO_LIST)):
        if i not in viewed_videos:
            return i

    # –ï—Å–ª–∏ –≤—Å–µ –≤–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º -1
    return -1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async def send_video_to_user(user_id: int, video_index: int) -> bool:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        if video_index >= len(VIDEO_LIST) or video_index < 0:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –≤–∏–¥–µ–æ")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.forward_message(
            chat_id=user_id,
            from_chat_id=-1002550852551,  # ID –∫–∞–Ω–∞–ª–∞
            message_id=int(VIDEO_LIST[video_index].split('/')[-1])
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        db.mark_video_as_viewed(user_id, video_index)
        logger.info(f"–í–∏–¥–µ–æ {video_index} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        try:
            await bot.send_message(user_id, f"Xatolik yuz berdi: {e}")
        except Exception:
            pass
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_scheduled_video(user_id: int) -> None:
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
        next_index = get_next_video_index(user_id)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –°–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {next_index}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –≤–∏–¥–µ–æ
        if next_index == -1:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –≤–∏–¥–µ–æ")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        success = await send_video_to_user(user_id, next_index)

        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ {next_index} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        db.update_video_index(user_id, next_index + 1)
        logger.info(f"–ò–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {next_index + 1}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_time_selection: {e}")
        try:
            await bot.send_message(user_id, f"Xatolik yuz berdi: {e}")
        except Exception:
            pass


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_time_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    times = ["09:00", "12:00", "15:00", "18:00", "21:00"]
    for t in times:
        keyboard.add(KeyboardButton(t))
    return keyboard

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def handle_set_time(message: types.Message) -> None:
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if not db.get_subscription_status(user_id):
            await message.answer("Siz obuna bo'lmagansiz. Obuna bo'lish uchun /start buyrug'ini bosing.")
            return

        await message.answer(
            "Iltimos, video olish uchun qulay vaqtni tanlang:",
            reply_markup=get_time_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_set_time: {e}")
        await message.answer("Kechirasiz, xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def handle_time_selection(message: types.Message) -> None:
    try:
        user_id = message.from_user.id
        selected_time = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            time.strptime(selected_time, "%H:%M")
        except ValueError:
            await message.answer("Noto'g'ri vaqt formati. Iltimos, qaytadan tanlang.", reply_markup=get_time_keyboard())
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        db.update_preferred_time(user_id, selected_time)
        await message.answer(f"Video olish vaqti {selected_time} ga o'rnatildi!", reply_markup=types.ReplyKeyboardRemove())

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        schedule_jobs_for_users()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_time_selection: {e}")
        try:
            await bot.send_message(user_id, f"Xatolik yuz berdi: {e}")
        except Exception:
            pass
        await message.answer("Kechirasiz, xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.")

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
def schedule_jobs_for_users():
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = db.get_all_subscribers_with_type()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã)")
        
        if not recipients:
            logger.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ!)
        current_jobs = scheduler.get_jobs()
        for job in current_jobs:
            if job.id.startswith("video_morning_") or job.id.startswith("video_evening_"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
                recipient_id = int(job.id.split("_")[-1])
                if not any(r[0] == recipient_id for r in recipients):
                    scheduler.remove_job(job.id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–¥–∞—á–∞: {job.id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        for recipient_id, is_group in recipients:
            scheduler.add_job(
                scheduled_send_08,
                trigger='cron',
                hour=8,
                minute=0,
                args=[recipient_id],
                id=f"video_morning_{recipient_id}",
                replace_existing=True
            )
            scheduler.add_job(
                scheduled_send_20,
                trigger='cron',
                hour=20,
                minute=0,
                args=[recipient_id],
                id=f"video_evening_{recipient_id}",
                replace_existing=True
            )
        logger.info("–ó–∞–¥–∞—á–∏ –Ω–∞ 08:00 –∏ 20:00 –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω—ã")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        groups_settings = db.get_all_groups_with_settings()
        logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è {len(groups_settings)} –≥—Ä—É–ø–ø —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        for group in groups_settings:
            chat_id = group[0]
            schedule_single_group_jobs(chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
async def update_scheduler_on_time_change(user_id: int, new_time: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.set_preferred_time(user_id, new_time)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        schedule_jobs_for_users()

        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º {new_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    dp.register_message_handler(
        lambda message: update_scheduler_on_time_change(message.from_user.id, message.text),
        lambda message: message.text and message.text.count(':') == 1 and all(x.isdigit() for x in message.text.split(':'))
    )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
async def update_scheduled_jobs():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    while True:
        try:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            schedule_jobs_for_users()
            logger.info("–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        try:
            await asyncio.sleep(1800)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        except asyncio.CancelledError:
            logger.info("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def init_scheduler():
    try:
        logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ")
            scheduler.shutdown()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        schedule_jobs_for_users()
        schedule_access_checks()  # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
        if not scheduler.running:
            raise Exception("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ start()")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(update_scheduled_jobs())
        logger.info("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á
        jobs = scheduler.get_jobs()
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {len(jobs)}")
        if len(jobs) == 0:
            logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise

async def handle_video_command(message: types.Message) -> None:
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if not db.get_subscription_status(user_id):
            await message.answer("Siz obuna bo'lmagansiz. Obuna bo'lish uchun /start buyrug'ini bosing.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
        next_index = get_next_video_index(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∏–¥–µ–æ. –°–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {next_index}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –≤–∏–¥–µ–æ
        if next_index == -1:
            await message.answer("Siz barcha videolarni ko'rdingiz!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        success = await send_video_to_user(user_id, next_index)

        if not success:
            await message.answer("Kechirasiz, video yuborishda xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_video_command: {e}")
        await message.answer("Kechirasiz, xatolik yuz berdi. Iltimos, keyinroq qayta urinib ko'ring.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_message_handler(handle_set_time, commands=['settime'])
    dp.register_message_handler(handle_time_selection, lambda message: message.text in ["09:00", "12:00", "15:00", "18:00", "21:00"])

async def send_next_unwatched_video(user_id, video_list, viewed_key):
    viewed = db.get_viewed_videos(user_id)
    for idx, _ in enumerate(video_list):
        if idx not in viewed:
            try:
                await bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=-1002550852551,
                    message_id=int(video_list[idx].split("/")[-1]),
                    protect_content=True
                )
                db.mark_video_as_viewed(user_id, idx)
                return True
            except MigrateToChat as e:
                new_chat_id = e.migrate_to_chat_id
                db.update_group_chat_id(user_id, new_chat_id)
                await bot.copy_message(
                    chat_id=new_chat_id,
                    from_chat_id=-1002550852551,
                    message_id=int(video_list[idx].split("/")[-1]),
                    protect_content=True
                )
                db.mark_video_as_viewed(new_chat_id, idx)
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {idx} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return False
    return False  # –í—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã

async def scheduled_send_08(user_id):
    await send_next_unwatched_video(user_id, VIDEO_LIST_1, 'v1')

async def scheduled_send_20(user_id):
    sent = await send_next_unwatched_video(user_id, VIDEO_LIST_1, 'v1')
    if not sent:
        sent2 = await send_next_unwatched_video(user_id, VIDEO_LIST_2, 'v2')
        if not sent2:
            await send_next_unwatched_video(user_id, VIDEO_LIST_3, 'v3')

    # --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã –∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ ---
def update_group_video_settings_and_reset(chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_start_video):
    db.set_group_video_settings(chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, None, golden_start_video)
    db.reset_group_viewed_videos(chat_id)

def schedule_group_jobs_v2():
    logger.warning("‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø schedule_group_jobs_v2() - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ schedule_single_group_jobs()")
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø (–æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏)")
    jobs = scheduler.get_jobs()
    for job in jobs:
        if job.id.startswith("group_"):
            scheduler.remove_job(job.id)
    groups = db.get_all_groups_with_settings()
    for group in groups:
        chat_id = group[0]
        safe_chat_id = abs(chat_id)  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á
        centris_enabled = bool(group[1])
        centris_season_id = group[2]  # centris_season_id
        centris_start_video = group[3]  # centris_start_video
        golden_enabled = bool(group[4])
        golden_season_id = group[5]  # golden_season_id
        golden_start_video = group[6]  # golden_start_video
        viewed_videos = group[7]
        is_subscribed = group[8]
        group_name = group[9]  # group_name
        send_times_json = group[10] if len(group) > 10 else None  # send_times
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            if send_times_json:
                send_times = json.loads(send_times_json)
            else:
                send_times = ["07:00", "11:00", "20:00"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except:
            send_times = ["07:00", "11:00", "20:00"]  # Fallback
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {send_times}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        both_enabled = centris_enabled and golden_enabled
        
        # –†–µ–∂–∏–º 1: –¢–æ–ª—å–∫–æ Centris Towers - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        if centris_enabled and centris_season_id and not golden_enabled:
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, 'centris', centris_season_id, centris_start_video],
                        f'group_{safe_chat_id}_centris_{i}',
                        "Asia/Tashkent"
                    )
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –¢–æ–ª—å–∫–æ Centris - {send_times}")
        
        # –†–µ–∂–∏–º 2: –¢–æ–ª—å–∫–æ Golden Lake - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        elif golden_enabled and golden_season_id and not centris_enabled:
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, 'golden_lake', golden_season_id, golden_start_video],
                        f'group_{safe_chat_id}_golden_{i}',
                        "Asia/Tashkent"
                    )
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –¢–æ–ª—å–∫–æ Golden Lake - {send_times}")
        
        # –†–µ–∂–∏–º 3: –û–±–∞ –ø—Ä–æ–µ–∫—Ç–∞ - –ß–ï–†–ï–î–û–í–ê–ù–ò–ï –ü–û –í–†–ï–ú–ï–ù–ò
        elif both_enabled and centris_season_id and golden_season_id:
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –†–µ–∂–∏–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –ß–µ—Ä–µ–¥—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏: Centris -> Golden -> Centris -> Golden...
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                    if i % 2 == 0:  # –ß–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (0, 2, 4...) - Centris
                        project = 'centris'
                        season_id = centris_season_id
                        start_video = centris_start_video
                        project_name = "Centris"
                    else:  # –ù–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (1, 3, 5...) - Golden Lake
                        project = 'golden_lake'
                        season_id = golden_season_id
                        start_video = golden_start_video
                        project_name = "Golden Lake"
                    
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, project, season_id, start_video],
                        f'group_{safe_chat_id}_{project}_{i}',
                        "Asia/Tashkent"
                    )
                    
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: {send_time} -> {project_name}")
                    
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ - –≤—Ä–µ–º–µ–Ω–∞: {send_times}")
    
    logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(scheduler.get_jobs())}")


def schedule_single_group_jobs(chat_id: int):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    try:
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á (—É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å)
        safe_chat_id = abs(chat_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        jobs = scheduler.get_jobs()
        for job in jobs:
            if job.id.startswith(f"group_{safe_chat_id}_"):
                scheduler.remove_job(job.id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        group_settings = db.get_group_video_settings(chat_id)
        if not group_settings:
            logger.warning(f"–ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º tuple –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç send_times)
        if len(group_settings) >= 7:
            centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, send_times_json = group_settings
        else:
            centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = group_settings
            send_times_json = None
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–∞–º
        centris_enabled = bool(centris_enabled)
        centris_start_video = centris_start_video or 0
        golden_enabled = bool(golden_enabled)
        golden_start_video = golden_start_video or 0
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ season_id - —Å—Ç—Ä–æ–∫–∞ "centris" –∏–ª–∏ "golden"
        if centris_season_id == "centris":
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            if centris_seasons:
                centris_season_id = centris_seasons[0][0]  # –ü–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω centris_season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: 'centris' -> {centris_season_id}")
            else:
                centris_season_id = None
                logger.warning(f"–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        if golden_season_id == "golden":
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω Golden Lake
            golden_seasons = db.get_seasons_by_project("golden")
            if golden_seasons:
                golden_season_id = golden_seasons[0][0]  # –ü–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω golden_season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: 'golden' -> {golden_season_id}")
            else:
                golden_season_id = None
                logger.warning(f"–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Golden Lake –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ int –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            if centris_season_id:
                centris_season_id = int(centris_season_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π centris_season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {centris_season_id}")
            centris_season_id = None
            
        try:
            if golden_season_id:
                golden_season_id = int(golden_season_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π golden_season_id –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {golden_season_id}")
            golden_season_id = None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            if send_times_json:
                send_times = json.loads(send_times_json)
            else:
                send_times = ["07:00", "11:00", "20:00"]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except:
            send_times = ["07:00", "11:00", "20:00"]  # Fallback
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {send_times}")
        
        both_enabled = centris_enabled and golden_enabled
        
        # –†–µ–∂–∏–º 1: –¢–æ–ª—å–∫–æ Centris Towers - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        if centris_enabled and centris_season_id and not golden_enabled:
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, 'centris', centris_season_id, centris_start_video],
                        f'group_{safe_chat_id}_centris_{i}',
                        "Asia/Tashkent"
                    )
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –¢–æ–ª—å–∫–æ Centris - {send_times}")
        
        # –†–µ–∂–∏–º 2: –¢–æ–ª—å–∫–æ Golden Lake - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è
        elif golden_enabled and golden_season_id and not centris_enabled:
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, 'golden_lake', golden_season_id, golden_start_video],
                        f'group_{safe_chat_id}_golden_{i}',
                        "Asia/Tashkent"
                    )
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –¢–æ–ª—å–∫–æ Golden Lake - {send_times}")
        
        # –†–µ–∂–∏–º 3: –û–±–∞ –ø—Ä–æ–µ–∫—Ç–∞ - –ß–ï–†–ï–î–û–í–ê–ù–ò–ï –ü–û –í–†–ï–ú–ï–ù–ò
        elif both_enabled and centris_season_id and golden_season_id:
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –†–µ–∂–∏–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –ß–µ—Ä–µ–¥—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏: Centris -> Golden -> Centris -> Golden...
            for i, send_time in enumerate(send_times):
                try:
                    hour, minute = map(int, send_time.split(':'))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                    if i % 2 == 0:  # –ß–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (0, 2, 4...) - Centris
                        project = 'centris'
                        season_id = centris_season_id
                        start_video = centris_start_video
                        project_name = "Centris"
                    else:  # –ù–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (1, 3, 5...) - Golden Lake
                        project = 'golden_lake'
                        season_id = golden_season_id
                        start_video = golden_start_video
                        project_name = "Golden Lake"
                    
                    schedule_job_with_immediate_check(
                        scheduler,
                        send_group_video_new,
                        hour, minute,
                        [chat_id, project, season_id, start_video],
                        f'group_{safe_chat_id}_{project}_{i}',
                        "Asia/Tashkent"
                    )
                    
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: {send_time} -> {project_name}")
                    
                except ValueError:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {send_time} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                    continue
            
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ - –≤—Ä–µ–º–µ–Ω–∞: {send_times}")
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –∑–∞–¥–∞—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False

async def auto_revoke_expired_access():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
        
        # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        revoked_count = db.auto_revoke_expired_access()
        
        if revoked_count > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø —É {revoked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
            from data.config import SUPER_ADMIN_ID, ADMINS
            super_admins = [SUPER_ADMIN_ID] + ADMINS
            
            for admin_id in super_admins:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞**\n\n"
                        f"üö´ **–û—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø —É:** {revoked_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")

def schedule_access_checks():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        scheduler.add_job(
            auto_revoke_expired_access,
            'interval',
            hours=6,
            id='access_check',
            timezone="Asia/Tashkent"
        )
        logger.info("–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")