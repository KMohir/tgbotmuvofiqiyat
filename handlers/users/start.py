from datetime import datetime, timedelta
import logging

try:

    from aiogram import types
    from aiogram.dispatcher import FSMContext
    from aiogram.dispatcher.filters.builtin import CommandStart
    from aiogram.types import ParseMode, Message, ReplyKeyboardRemove
    from db import db
    from keyboards.default.reply import key, get_lang_for_button, main_menu_keyboard
    from loader import dp, bot
    from states.state import RegistrationStates
    from translation import _
    import time
    from aiogram.dispatcher.storage import DELTA
    from data.config import SUPER_ADMIN_ID, ADMINS
    from aiogram.dispatcher.handler import CancelHandler

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = logging.getLogger(__name__)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_last_message = {}

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
    def is_spam(user_id):
        current_time = time.time()
        if user_id in user_last_message:
            last_message_time = user_last_message[user_id]
            if current_time - last_message_time < 1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - 1 —Å–µ–∫—É–Ω–¥–∞
                return True
        user_last_message[user_id] = current_time
        return False

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ
    def get_video_caption() -> str:
        caption = (
            "‚úÖ1/15\n\n"
            "–ú–∞–≤–∑—É: Centris Towers'–¥–∞–≥–∏ –ª–æ–±–±–∏\n\n"
            "–ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤ \"Centris Towers\" –ª–æ–π–∏“≥–∞—Å–∏ –∞—Å–æ—Å—á–∏—Å–∏\n\n"
            "Centris Towers - –∏–Ω–Ω–æ–≤–∞—Ü–∏—è –≤–∞ –∑–∞–º–æ–Ω–∞–≤–∏–π —É—Å–ª—É–± –≥—É–ª–ª–∞–±-—è—à–Ω–∞–π–¥–∏–≥–∞–Ω —è–Ω–≥–∏ –∞–≤–ª–æ–¥ –±–∏–∑–Ω–µ—Å –º–∞—Ä–∫–∞–∑–∏\n\n"
            "üìû –ê–ª–æ“õ–∞ —É—á—É–Ω: <a href=\"tel:+998501554444\">+998501554444</a>\n\n"
            "<a href=\"https://t.me/centris1\">–ú–µ–Ω–µ–∂–µ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à</a>\n\n"
            "(<a href=\"https://yandex.ru/maps/org/110775045050\">üìç–ú–∞–Ω–∑–∏–ª: –¢–æ—à–∫–µ–Ω—Ç —à–∞“≥—Ä–∏, –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä –∫—û—á–∞—Å–∏ 2</a>)\n"
            "üöÄ<a href=\"https://t.me/centris_towers\">–¢–µ–ª–µ–≥—Ä–∞–º</a> ‚Ä¢ "
            "üì∑<a href=\"https://www.instagram.com/centristowers_uz/\">–ò–Ω—Å—Ç–∞–≥—Ä–∞–º</a> ‚Ä¢ "
            "‚è∏<a href=\"https://www.youtube.com/@CentrisTowers\">You Tube</a>"
        )
        return caption

    # --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ª–∏—á–∫–∏ ---
    @dp.message_handler(lambda m: not m.text or not m.text.startswith('/'), chat_type=types.ChatType.PRIVATE)
    async def private_protect_filter(message: types.Message):
        user_id = int(message.from_user.id)
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if db.is_superadmin(user_id):
            return
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ pass
        pass

    # --- –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query –≤ –ª–∏—á–∫–µ ---
    # @dp.callback_query_handler(lambda c: c.message.chat.type == types.ChatType.PRIVATE)
    # async def private_protect_callback_filter(callback_query: types.CallbackQuery):
    #     user_id = int(callback_query.from_user.id)
    #     logging.info(f"PRIVATE CALLBACK FILTER: user_id={user_id}")
    #     if user_id == int(SUPER_ADMIN_ID):
    #         logging.info(f"PRIVATE CALLBACK ALLOWED: SUPER_ADMIN user_id={user_id}")
    #         return
    #     if user_id in [int(admin_id) for admin_id in ADMINS]:
    #         logging.info(f"PRIVATE CALLBACK ALLOWED: ADMIN user_id={user_id}")
    #         return
    #     if db.is_admin(user_id):
    #         logging.info(f"PRIVATE CALLBACK ALLOWED: DB ADMIN user_id={user_id}")
    #         return
    #     logging.warning(f"PRIVATE CALLBACK BLOCKED: user_id={user_id}")
    #     raise CancelHandler()

    @dp.message_handler(lambda m: m.text and m.text.startswith('/') and not db.is_superadmin(m.from_user.id), chat_type=types.ChatType.PRIVATE)
    async def block_private_commands_for_non_superadmin(message: types.Message):
        await message.reply("–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫–µ.")
        raise CancelHandler()

    # --- –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–ø—Ä–µ—Ç –≥—Ä—É–ø–ø—ã ---

    # --- –§–∏–ª—å—Ç—Ä –¥–ª—è –≥—Ä—É–ø–ø ---
    @dp.message_handler(chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
    async def group_protect_filter(message: types.Message):
        chat_id = message.chat.id
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∑–∞–±–∞–Ω–µ–Ω–∞ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        # if db.is_group_banned(chat_id):
        #     await message.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        #     raise CancelHandler()
        # –í —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        pass

    # --- –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query –≤ –≥—Ä—É–ø–ø–∞—Ö ---
    # @dp.callback_query_handler(lambda c: c.message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP])
    # async def group_protect_callback_filter(callback_query: types.CallbackQuery):
    #     user_id = int(callback_query.from_user.id)
    #     chat_id = callback_query.message.chat.id
    #     logging.info(f"GROUP CALLBACK FILTER: chat_id={chat_id}, user_id={user_id}")
    #     if user_id == int(SUPER_ADMIN_ID):
    #         logging.info(f"GROUP CALLBACK ADMIN ALLOWED: SUPER_ADMIN user_id={user_id}")
    #         return
    #     if user_id in [int(admin_id) for admin_id in ADMINS]:
    #         logging.info(f"GROUP CALLBACK ADMIN ALLOWED: ADMIN user_id={user_id}")
    #         return
    #     if db.is_admin(user_id):
    #         logging.info(f"GROUP CALLBACK ADMIN ALLOWED: DB ADMIN user_id={user_id}")
    #         return
    #     if db.is_group_banned(chat_id):
    #         logging.warning(f"GROUP CALLBACK BLOCKED: chat_id={chat_id}")
    #         raise CancelHandler()
    #     logging.info(f"GROUP CALLBACK ALLOWED: chat_id={chat_id}")

    # --- –£–¥–∞–ª—ë–Ω —Ç–µ—Å—Ç–æ–≤—ã–π echo-—Ö–µ–Ω–¥–ª–µ—Ä, —Ç–µ–ø–µ—Ä—å –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---

    @dp.message_handler(CommandStart())
    async def bot_start(message: types.Message, state: FSMContext):
        print('bot_start –≤—ã–∑–≤–∞–Ω')
        try:
            if is_spam(message.from_user.id):
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–±—Ä–æ—Å–∞ FSM
            if message.from_user.id == SUPER_ADMIN_ID or db.is_admin(message.from_user.id):
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ FSM: chat_id={message.chat.id}, user_id={message.from_user.id}")
                await state.finish()
                logger.error(f"FSM —Å–±—Ä–æ—à–µ–Ω: chat_id={message.chat.id}, user_id={message.from_user.id}")
                # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
            # if message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            #     if db.is_group_banned(message.chat.id):
            #         return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
            #     if not db.user_exists(message.chat.id):
            #         db.add_user(message.chat.id, message.chat.title or "–ì—Ä—É–ø–ø–∞", None, is_group=True, group_id=message.chat.id)
            #     await message.answer("Bot guruhda faollashtirildi! Barcha ishtirokchilar ro‚Äòyxatdan o‚Äòtmasdan funksiyalardan foydalanishlari mumkin.", reply_markup=main_menu_keyboard)
            #     return

            # –í –ª–∏—á–∫–µ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
            user_id = message.from_user.id
            if user_id != SUPER_ADMIN_ID and user_id not in ADMINS and not db.is_admin(user_id):
                return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫–µ

            # –í –ª–∏—á–∫–µ ‚Äî –ø—Ä–µ–∂–Ω—è—è –ª–æ–≥–∏–∫–∞
            if not db.user_exists(message.from_user.id):
                await bot.send_message(
                    message.from_user.id,
                    'Assalomu aleykum, Centris Towers yordamchi botiga hush kelibsiz!'
                )
                await message.answer("Ismingizni kiriting")
                await RegistrationStates.name.set()
            else:
                try:
                    await bot.copy_message(
                        chat_id=message.chat.id,
                        from_chat_id=-1002550852551,
                        message_id=135,
                        caption='',
                        parse_mode="HTML",
                        reply_markup=get_lang_for_button(message),
                        protect_content=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
                    await message.answer("Video yuborishda xato yuz berdi. Iltimos, keyinroq urinib ko'ring.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            await message.answer("Xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring.")

    @dp.message_handler(state=RegistrationStates.name)
    async def register_name_handler(message: types.Message, state: FSMContext):
        try:
            if is_spam(message.from_user.id):
                return

            name = message.text
            async with state.proxy() as data:
                data['name'] = name

            await message.answer("Telefon raqamingizni kiriting", reply_markup=key())
            await RegistrationStates.phone.set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await message.answer("Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")
            await state.finish()

    @dp.message_handler(state=RegistrationStates.phone, content_types=types.ContentType.TEXT)
    async def process_phone_text(message: Message, state: FSMContext):
        try:
            if is_spam(message.from_user.id):
                return

            contact = message.text
            if contact.startswith('+998') and len(contact) == 13:
                await save_user_data(message, state, contact)
            else:
                await message.answer(
                    "Telefon raqam noto'g'ri kiritildi, iltimos telefon raqamni +998XXXXXXXXX formatda kiriting yoki 'Kontakni yuborish' tugmasiga bosing.",
                    reply_markup=key()
                )
                await RegistrationStates.phone.set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.from_user.id}: {e}")
            await message.answer("Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")
            await state.finish()

    @dp.message_handler(state=RegistrationStates.phone, content_types=types.ContentType.CONTACT)
    async def process_phone_contact(message: Message, state: FSMContext):
        try:
            if is_spam(message.from_user.id):
                return

            contact = message.contact.phone_number
            await save_user_data(message, state, contact)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
            await message.answer("Ro'yxatdan muvaffaqiyatli o'tdingiz!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await message.answer("Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")
            await state.finish()

    async def save_user_data(message: Message, state: FSMContext, contact: str):
        try:
            async with state.proxy() as data:
                name = data.get('name')
                if message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
                    db.add_user(message.from_user.id, name, contact, group_id=message.chat.id)
                else:
                    db.add_user(message.from_user.id, name, contact)
                db.update(message.from_user.id, name, contact)    # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                caption = get_video_caption()
                try:

                    await bot.copy_message(
                        chat_id=message.chat.id,
                        from_chat_id=-1002550852551,
                        message_id=135,
                        caption='',
                        parse_mode="HTML",
                        reply_markup=get_lang_for_button(message),
                        protect_content=True
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {message.from_user.id}: {e}")
                    await message.answer("Video yuborishda xato yuz berdi. Iltimos, keyinroq urinib ko'ring.")

                try:
                    print(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
                    await message.answer("Video yuborishda xato yuz berdi. Iltimos, keyinroq urinib ko'ring.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await message.answer("Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")
        finally:
            await state.finish()

except Exception as exx:
    from datetime import datetime

    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    formatted_date_time = now.strftime("%Y-%m-%d %H:%M:%S")
    print('start', formatted_date_time, f"error {exx}")