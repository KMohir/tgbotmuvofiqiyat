import asyncio
import json
import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from handlers import groups
from db import db
from loader import dp, bot
import logging
from datetime import datetime, timedelta
from utils.safe_admin_notify import safe_send_error_notification

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from handlers.users.group_video_states import GroupVideoStates, DeleteBotMessagesStates
from handlers.users.video_scheduler import schedule_single_group_jobs, schedule_group_jobs_v2, notify_superadmins_season_completed

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def handle_error_with_notification(error, context, message=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    Args:
        error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_msg = f"–û—à–∏–±–∫–∞ –≤ {context}: {str(error)}"
        logger.error(error_msg, exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await safe_send_error_notification(
                bot=bot,
                error_message=error_msg,
                error_details=str(error)[:500]
            )
        except Exception as notify_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {notify_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if message:
            try:
                await message.answer("‚ùå **Xatolik yuz berdi!**")
            except Exception as reply_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {reply_error}")
                
    except Exception as handler_error:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {handler_error}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
async def send_and_save_message(bot, chat_id: int, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        sent_message = await bot.send_message(chat_id, text, **kwargs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
        if chat_id < 0:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID –æ–∑–Ω–∞—á–∞—é—Ç –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã
            db.save_bot_message(chat_id, sent_message.message_id, 'text')
            
        return sent_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
        raise


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
async def copy_and_save_message(bot, chat_id: int, from_chat_id: int, message_id: int, **kwargs):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        sent_message = await bot.copy_message(chat_id, from_chat_id, message_id, **kwargs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
        if chat_id < 0:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID –æ–∑–Ω–∞—á–∞—é—Ç –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã
            db.save_bot_message(chat_id, sent_message.message_id, 'copy')
            
        return sent_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
        raise


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_text(callback_query: types.CallbackQuery, text: str, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫—É 'Message is not modified'"""
    try:
        await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        if "Message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {e}")
            await callback_query.answer()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from data.config import ADMINS

# –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPER_ADMIN_IDS = [5657091547, 7983512278, 5310261745]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(commands=['grant_access'])
async def grant_access_command(message: types.Message):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /grant_access <user_id> <hours>
    args = message.text.split()
    if len(args) < 3:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/grant_access <user_id> <soat>`\n"
            "**Misollar:**\n"
            "‚Ä¢ `/grant_access 123456789 24` - 24 soat\n"
            "‚Ä¢ `/grant_access 123456789 168` - 7 kun\n"
            "‚Ä¢ `/grant_access 123456789 720` - 30 kun",
            parse_mode="Markdown"
        )
        return
    
    try:
        target_user_id = int(args[1])
        hours = int(args[2])
        
        if hours <= 0:
            await message.answer("‚ùå **Soat soni musbat bo'lishi kerak!**")
            return
            
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        success = db.grant_access(target_user_id, hours)
        
        if success:
            await message.answer(
                f"‚úÖ **Ruxsat berildi!**\n\n"
                f"üë§ **Foydalanuvchi:** `{target_user_id}`\n"
                f"‚è∞ **Muddat:** {hours} soat\n"
                f"üìÖ **Tugash vaqti:** {(datetime.now() + timedelta(hours=hours)).strftime('%d.%m.%Y %H:%M')}",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå **Xatolik yuz berdi!** Ruxsat berishda muammo bo'ldi.")
            
    except ValueError:
        await message.answer("‚ùå **Noto'g'ri format!** User ID va soat soni raqam bo'lishi kerak.")
    except Exception as e:
        await handle_error_with_notification(e, "grant_access_command", message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(commands=['revoke_access'])
async def revoke_access_command(message: types.Message):
    """–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /revoke_access <user_id>
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/revoke_access <user_id>`\n"
            "**Misollar:**\n"
            "‚Ä¢ `/revoke_access 123456789`",
            parse_mode="Markdown"
        )
        return
    
    try:
        target_user_id = int(args[1])
        
        # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        success = db.revoke_access(target_user_id)
        
        if success:
            await message.answer(
                f"‚úÖ **Ruxsat olib qo'yildi!**\n\n"
                f"üë§ **Foydalanuvchi:** `{target_user_id}`\n"
                f"üö´ **Holat:** Ruxsat yo'q",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå **Xatolik yuz berdi!** Ruxsat olib qo'yishda muammo bo'ldi.")
            
    except ValueError:
        await message.answer("‚ùå **Noto'g'ri format!** User ID raqam bo'lishi kerak.")
    except Exception as e:
        await handle_error_with_notification(e, "revoke_access_command", message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(commands=['check_access'])
async def check_access_command(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /check_access <user_id>
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/check_access <user_id>`\n"
            "**Misollar:**\n"
            "‚Ä¢ `/check_access 123456789`",
            parse_mode="Markdown"
        )
        return
    
    try:
        target_user_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        is_valid = db.is_access_valid(target_user_id)
        
        if is_valid:
            await message.answer(
                f"‚úÖ **Ruxsat mavjud!**\n\n"
                f"üë§ **Foydalanuvchi:** `{target_user_id}`\n"
                f"üü¢ **Holat:** Faol",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ùå **Ruxsat yo'q!**\n\n"
                f"üë§ **Foydalanuvchi:** `{target_user_id}`\n"
                f"üî¥ **Holat:** Ruxsat yo'q yoki muddati tugagan",
                parse_mode="Markdown"
            )
            
    except ValueError:
        await message.answer("‚ùå **Noto'g'ri format!** User ID raqam bo'lishi kerak.")
    except Exception as e:
        await handle_error_with_notification(e, "check_access_command", message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(commands=['auto_revoke'])
async def auto_revoke_command(message: types.Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        revoked_count = db.auto_revoke_expired_access()
        
        await message.answer(
            f"‚úÖ **Avtomatik ruxsat olib qo'yildi!**\n\n"
            f"üö´ **Olib qo'yilgan:** {revoked_count} ta foydalanuvchi\n"
            f"‚è∞ **Vaqt:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_revoke_command: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(commands=['access_stats'])
async def access_stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    try:
        from datetime import datetime
        cursor = db.conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("""
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN is_banned = 0 THEN 1 END) as active_users,
                COUNT(CASE WHEN is_banned = 1 THEN 1 END) as banned_users,
                COUNT(CASE WHEN access_expires_at IS NOT NULL AND access_expires_at > %s THEN 1 END) as users_with_time_limit,
                COUNT(CASE WHEN access_expires_at IS NOT NULL AND access_expires_at <= %s THEN 1 END) as expired_users
            FROM users 
            WHERE is_group = 0
        """, (datetime.now(), datetime.now()))
        
        stats = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º
        expired_users = db.get_expired_users()
        
        cursor.close()
        
        if stats:
            total_users, active_users, banned_users, users_with_time_limit, expired_users_count = stats
            
            response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞:**\n\n"
            response += f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
            response += f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {active_users}\n"
            response += f"üî¥ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:** {banned_users}\n"
            response += f"‚è∞ **–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏:** {users_with_time_limit}\n"
            response += f"‚è≥ **–° –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º:** {expired_users_count}\n\n"
            
            if expired_users:
                response += f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º:**\n"
                for user_id, name, expires_at in expired_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
                    try:
                        expires_str = expires_at.strftime("%d.%m.%Y %H:%M") if expires_at else "Noma'lum"
                    except:
                        expires_str = "Noma'lum"
                    response += f"‚Ä¢ `{user_id}` - {name} (–¥–æ {expires_str})\n"
                
                if len(expired_users) > 5:
                    response += f"... –∏ –µ—â–µ {len(expired_users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            else:
                response += "‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º –Ω–µ—Ç**\n"
            
            response += f"\n‚è∞ **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("‚ùå **Ma'lumotlar topilmadi!**")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ access_stats_command: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–æ–º
@dp.message_handler(commands=['access_help'])
async def access_help_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    help_text = """
üîê **–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:**

**–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ `/grant_access <user_id> <—á–∞—Å—ã>` - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ N —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/grant_access 123456789 24` - –¥–æ—Å—Ç—É–ø –Ω–∞ 24 —á–∞—Å–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/grant_access 123456789 168` - –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π

**–û—Ç–∑—ã–≤ –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ `/revoke_access <user_id>` - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/revoke_access 123456789`

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ `/check_access <user_id>` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `/check_access 123456789`

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ `/auto_revoke` - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –≤—Å–µ—Ö —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
‚Ä¢ `/access_stats` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ 24 —á–∞—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –î–æ—Å—Ç—É–ø –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚Ä¢ –ì—Ä—É–ø–ø—ã –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    
    await message.answer(help_text, parse_mode="Markdown")

logger.info(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –≤ group_video_commands.py, dp ID: {id(dp)}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
GROUPS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "Message is too long")

def create_paginated_groups_keyboard(groups, page=0, prefix="group", cancel_callback="group_cancel"):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    
    Args:
        groups: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (group_id, group_name)
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "remove_group", "select_group")
        cancel_callback: callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    
    Returns:
        tuple: (keyboard, total_pages, current_page)
    """
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    if not groups:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚ùå Guruhlar yo'q", callback_data="no_groups"))
        return kb, 0, 0
    
    total_pages = (len(groups) + GROUPS_PER_PAGE - 1) // GROUPS_PER_PAGE
    current_page = min(page, total_pages - 1) if total_pages > 0 else 0
    
    start_idx = current_page * GROUPS_PER_PAGE
    end_idx = min(start_idx + GROUPS_PER_PAGE, len(groups))
    page_groups = groups[start_idx:end_idx]
    
    kb = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø
    for group_data in page_groups:
        if len(group_data) >= 3:
            group_id, group_name, created_at = group_data
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                if created_at:
                    date_str = created_at.strftime("%d.%m %H:%M")
                else:
                    date_str = ""
            except:
                date_str = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
            display_name = f"üè¢ {group_name}"
            if date_str:
                display_name += f" ({date_str})"
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            group_id, group_name = group_data
            display_name = f"üè¢ {group_name}"
        
        kb.add(InlineKeyboardButton(
            display_name,
            callback_data=f"{prefix}_{group_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton(
                "‚¨ÖÔ∏è Oldingi", 
                callback_data=f"page_{prefix}_{current_page - 1}"
            ))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        nav_buttons.append(InlineKeyboardButton(
            f"üìÑ {current_page + 1}/{total_pages}",
            callback_data="page_info"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if current_page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                "‚û°Ô∏è Keyingi", 
                callback_data=f"page_{prefix}_{current_page + 1}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        if nav_buttons:
            kb.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kb.add(InlineKeyboardButton("‚ùå Bekor qilish", callback_data=cancel_callback))
    
    return kb, total_pages, current_page

def create_paginated_groups_text(groups, page=0, title="Guruhlar"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    
    Args:
        groups: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (group_id, group_name, created_at)
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        str: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if not groups:
        return f"‚ùå **{title} topilmadi!**\n\nMa'lumotlar bazasida guruhlar yo'q."
    
    total_pages = (len(groups) + GROUPS_PER_PAGE - 1) // GROUPS_PER_PAGE
    current_page = min(page, total_pages - 1) if total_pages > 0 else 0
    
    start_idx = current_page * GROUPS_PER_PAGE
    end_idx = min(start_idx + GROUPS_PER_PAGE, len(groups))
    page_groups = groups[start_idx:end_idx]
    
    response = f"üìã **{title}:**\n\n"
    
    for group_data in page_groups:
        if len(group_data) >= 3:
            group_id, group_name, created_at = group_data
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                if created_at:
                    date_str = created_at.strftime("%d.%m.%Y %H:%M")
                else:
                    date_str = "Noma'lum"
            except:
                date_str = "Noma'lum"
            response += f"üè¢ **{group_name}**\nüÜî `{group_id}`\nüìÖ {date_str}\n\n"
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            group_id, group_name = group_data
            response += f"üè¢ **{group_name}**\nüÜî `{group_id}`\n\n"
    
    if total_pages > 1:
        response += f"üìÑ **Sahifa:** {current_page + 1}/{total_pages}\n\n"
    
    return response

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['set_group_video'])
async def set_group_video_command(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ set_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    chat_type = message.chat.type
    chat_id = message.chat.id
    
    logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}, ID —á–∞—Ç–∞: {chat_id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    if chat_type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        logger.info("‚úÖ –≠—Ç–æ –≥—Ä—É–ø–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é")
        # –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
        await message.answer(
            "üìπ **GURUH UCHUN VIDEO TARQATISH SOZLAMALARI**\n\n"
            "üè¢ **Loyihani tanlang:**",
            reply_markup=get_project_keyboard()
        )
    else:
        logger.info("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ –º–µ–Ω—é")
        # –ö–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        await message.answer(
            "üìπ **VIDEO TARQATISH SOZLAMALARI**\n\n"
            "üè¢ **Loyihani tanlang:**",
            reply_markup=get_project_keyboard()
        )
    
    await state.set_state(GroupVideoStates.waiting_for_project.state)
    await state.update_data(chat_id=chat_id)
    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, chat_id: {chat_id}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø—ã
@dp.message_handler(commands=['show_group_video_settings'])
async def show_group_video_settings(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ show_group_video_settings –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        centris_start = db.get_group_video_start(chat_id, 'centris')
        golden_start = db.get_group_video_start(chat_id, 'golden')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö
        centris_season_name = "N/A"
        golden_season_name = "N/A"
        
        if settings[1]:  # centris_season
            centris_season_info = db.get_season_by_id(settings[1])
            if centris_season_info:
                centris_season_name = centris_season_info[1]  # season_name
        
        if settings[5]:  # golden_season
            golden_season_info = db.get_season_by_id(settings[5])
            if golden_season_info:
                golden_season_name = golden_season_info[1]  # season_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
        
        # Centris Towers
        response += "üè¢ **Centris Towers:**\n"
        if settings[0]:  # centris_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {centris_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {centris_start[1] if centris_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # Golden Lake
        response += "üèòÔ∏è **Golden Lake:**\n"
        if settings[4]:  # golden_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {golden_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {golden_start[1] if golden_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = db.get_subscription_status(chat_id)
        response += f"üì° **Obuna holati:** {'‚úÖ Faol' if is_subscribed else '‚ùå Faol emas'}\n"
        
        # Whitelist —Å—Ç–∞—Ç—É—Å
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"üîí **Whitelist:** {'‚úÖ Ruxsat berilgan' if is_whitelisted else '‚ùå Ruxsat berilmagan'}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ Yangilash", callback_data="refresh_settings"),
            InlineKeyboardButton("‚öôÔ∏è O'zgartirish", callback_data="edit_settings")
        )
        
        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith("time_"), state=GroupVideoStates.waiting_for_send_times)
async def process_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        action = callback_query.data
        data = await state.get_data()
        temp_settings = data.get("temp_settings")
        
        if not temp_settings:
            await safe_edit_text(callback_query,"‚ùå **Xatolik!**\n\nSozlamalar topilmadi. Qaytadan boshlang.", parse_mode="Markdown")
            await state.finish()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_times = temp_settings.get("send_times", ["07:00", "11:00", "20:00"])
        
        if action == "time_preset_default":
            temp_settings["send_times"] = ["07:00", "20:00"]
            await callback_query.answer("üåÖ Standart vaqt tanlandi: 07:00, 20:00")
            
        elif action == "time_preset_early":
            temp_settings["send_times"] = ["07:00", "19:00"]
            await callback_query.answer("üåÖ Erta vaqt tanlandi: 07:00, 19:00")
            
        elif action == "time_preset_late":
            temp_settings["send_times"] = ["09:00", "21:00"]
            await callback_query.answer("üåÖ Kech vaqt tanlandi: 09:00, 21:00")
            
        elif action == "time_preset_mid":
            temp_settings["send_times"] = ["10:00", "18:00"]
            await callback_query.answer("üåÖ O'rta vaqt tanlandi: 10:00, 18:00")
            
        elif action == "time_three_times":
            temp_settings["send_times"] = ["07:00", "11:00", "20:00"]
            await callback_query.answer("üìÖ Kuniga 3 marta: 07:00, 11:00, 20:00")
            
        elif action == "time_custom":
            await safe_edit_text(callback_query,
                "‚è∞ **Maxsus vaqtlarni kiriting:**\n\n"
                "Vaqtlarni HH:MM formatida kiriting, vergul bilan ajrating.\n"
                "Masalan: 09:00, 15:00, 21:00\n\n"
                "üìù **Eslatma:** Maksimal 5 ta vaqt kiritish mumkin."
            , parse_mode="Markdown")
            await state.set_state(GroupVideoStates.waiting_for_send_times.state)
            await callback_query.answer()
            return
            
        elif action == "time_confirm":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            saved_settings = await save_group_settings(temp_settings)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            group_name = "Noma'lum guruh"
            chat_id = temp_settings.get("chat_id")
            try:
                group_info = await callback_query.bot.get_chat(chat_id)
                group_name = group_info.title or group_info.first_name or f"Guruh {chat_id}"
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤
            centris_season_name = "Noma'lum"
            golden_season_name = "Noma'lum"
            try:
                if saved_settings["centris_enabled"] and saved_settings["centris_season_id"]:
                    centris_season = db.get_season_by_id(saved_settings["centris_season_id"])
                    if centris_season:
                        centris_season_name = centris_season[2]  # season_name
                if saved_settings["golden_enabled"] and saved_settings["golden_season_id"]:
                    golden_season = db.get_season_by_id(saved_settings["golden_season_id"])
                    if golden_season:
                        golden_season_name = golden_season[2]  # season_name
            except:
                pass
            
            send_times = temp_settings.get("send_times", ["07:00", "11:00", "20:00"])
            send_times_str = ", ".join(send_times)
            
            await safe_edit_text(callback_query,
                f"‚úÖ **Sozlamalar saqlandi!**\n\n"
                f"üè¢ **Guruh:** {group_name}\n"
                f"üÜî **ID:** {chat_id}\n\n"
                f"üé¨ Video tarqatish faollashtirildi.\n\n"
                f"üìã **Sozlamalar:**\n"
                f"‚Ä¢ Centris: {'‚úÖ Yoqilgan' if saved_settings['centris_enabled'] else '‚ùå O''chirilgan'}\n"
                f"  üì∫ Sezon: {centris_season_name if saved_settings['centris_enabled'] else 'N/A'}\n"
                f"  üé• Video: {saved_settings['centris_start_video'] + 1 if saved_settings['centris_enabled'] else 'N/A'}\n"
                f"‚Ä¢ Golden: {'‚úÖ Yoqilgan' if saved_settings['golden_enabled'] else '‚ùå O''chirilgan'}\n"
                f"  üì∫ Sezon: {golden_season_name if saved_settings['golden_enabled'] else 'N/A'}\n"
                f"  üé• Video: {saved_settings['golden_start_video'] + 1 if saved_settings['golden_enabled'] else 'N/A'}\n\n"
                f"‚è∞ **Yuborish vaqtlari:** {send_times_str}"
            , parse_mode="Markdown")
            await state.finish()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
        current_times_str = ", ".join(temp_settings.get("send_times", ["07:00", "11:00", "20:00"]))
        await safe_edit_text(callback_query,
            f"‚è∞ **Yuborish vaqtini tanlang:**\n\n"
            f"Video qachon yuborilishini tanlang. Bir nechta vaqt tanlashingiz mumkin.\n\n"
            f"üìã **Joriy sozlamalar:**\n"
            f"‚Ä¢ Loyiha: {temp_settings.get('project', 'N/A')}\n"
            f"‚Ä¢ Centris: {'‚úÖ' if temp_settings.get('project') in ['centris', 'both'] else '‚ùå'}\n"
            f"‚Ä¢ Golden: {'‚úÖ' if temp_settings.get('project') in ['golden', 'both'] else '‚ùå'}\n\n"
            f"‚è∞ **Tanlangan vaqt:** {current_times_str}",
            reply_markup=get_time_selection_keyboard()
        )
        await state.update_data(temp_settings=temp_settings)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(state=GroupVideoStates.waiting_for_send_times)
async def process_custom_time_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        data = await state.get_data()
        temp_settings = data.get("temp_settings")
        
        if not temp_settings:
            await message.answer("‚ùå **Xatolik!**\n\nSozlamalar topilmadi. Qaytadan boshlang.", parse_mode="Markdown")
            await state.finish()
            return
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        time_text = message.text.strip()
        time_parts = [t.strip() for t in time_text.split(',')]
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        valid_times = []
        for time_part in time_parts:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HH:MM
                if len(time_part) == 5 and time_part[2] == ':':
                    hour, minute = map(int, time_part.split(':'))
                    if 0 <= hour <= 23 and 0 <= minute <= 59:
                        valid_times.append(time_part)
                    else:
                        raise ValueError("Invalid time range")
                else:
                    raise ValueError("Invalid time format")
            except ValueError:
                await message.answer(
                    f"‚ùå **Noto'g'ri vaqt formati:** {time_part}\n\n"
                    "Vaqtni HH:MM formatida kiriting (masalan: 09:30)\n"
                    "Barcha vaqtlarni vergul bilan ajrating.",
                    parse_mode="Markdown"
                )
                return
        
        if len(valid_times) == 0:
            await message.answer("‚ùå **Hech qanday to'g'ri vaqt topilmadi!**", parse_mode="Markdown")
            return
            
        if len(valid_times) > 5:
            await message.answer("‚ùå **Maksimal 5 ta vaqt kiritish mumkin!**", parse_mode="Markdown")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–∞
        temp_settings["send_times"] = valid_times
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        times_str = ", ".join(valid_times)
        await message.answer(
            f"‚úÖ **Maxsus vaqtlar tanlandi!**\n\n"
            f"‚è∞ **Vaqtlar:** {times_str}\n\n"
            f"Sozlamalarni saqlash uchun \"‚úÖ Tayyor\" tugmasini bosing.",
            reply_markup=get_time_selection_keyboard()
        )
        await state.update_data(temp_settings=temp_settings)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå Xatolik yuz berdi!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['start_group_video'])
async def start_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ start_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤ whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.answer(
                "üîí **GURUH WHITELIST DA EMAS!**\n\n"
                "Video yuborish uchun guruh whitelist ga qo'shilishi kerak."
            , parse_mode="Markdown")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
        from handlers.users.video_scheduler import send_group_video_new
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        sent = False
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                result = await send_group_video_new(chat_id, 'centris', centris_season_id)
                sent = sent or result
        
        if golden_enabled:
            golden_season_id = settings[5]
            if golden_season_id:
                result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id)
                sent = sent or result
        
        if sent:
            await message.answer("‚úÖ **Video yuborildi!**\n\nüé¨ Keyingi video avtomatik ravishda yuboriladi.", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Hech qanday yangi video topilmadi!**\n\nBarcha video allaqachon yuborilgan.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['stop_group_video'])
async def stop_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ stop_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
        db.set_group_video_settings(chat_id, False, None, 0, False, None, 0)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        from handlers.users.video_scheduler import scheduler
        jobs_to_remove = []
        for job in scheduler.get_jobs():
            if job.id.startswith(f"group_") and str(chat_id) in job.id:
                jobs_to_remove.append(job.id)
        
        for job_id in jobs_to_remove:
            scheduler.remove_job(job_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        await message.answer("‚èπÔ∏è **Avtomatik video yuborish to'xtatildi!**\n\nVideo yuborishni qayta yoqish uchun /set_group_video buyrug'ini ishlating.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≥—Ä—É–ø–ø
@dp.message_handler(commands=['help_group_video'])
async def help_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≥—Ä—É–ø–ø
    """
    help_text = """
üìπ **GURUH VIDEO BUYRUQLARI**

üè¢ **/set_group_video** - Video tarqatish sozlamalari
   ‚Ä¢ Centris Towers va Golden Lake loyihalari uchun
   ‚Ä¢ Seson va boshlash videosi tanlash
   ‚Ä¢ Avtomatik video yuborish yoqish

üé¨ **/start_group_video** - Video yuborishni boshlash
   ‚Ä¢ Hozircha video yuborish
   ‚Ä¢ Avtomatik yuborish faollashtiriladi

‚èπÔ∏è **/stop_group_video** - Video yuborishni to'xtatish
   ‚Ä¢ Avtomatik video yuborish o'chiriladi
   ‚Ä¢ Barcha rejalangan vazifalar to'xtatiladi

üìä **/show_group_video_settings** - Hozirgi sozlamalar
   ‚Ä¢ Faol loyihalar
   ‚Ä¢ Seson va video ma'lumotlari
   ‚Ä¢ Obuna va whitelist holati

üìã **/admin_show_all_groups_settings** - Barcha guruhlar sozlamalari (Admin)
   ‚Ä¢ Barcha guruhlar sozlamalari
   ‚Ä¢ Centris va Golden loyihalari
   ‚Ä¢ Video va jadval ma'lumotlari

üîí **/add_group_to_whitelist** - Guruhni whitelist ga qo'shish
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Video yuborish ruxsati

‚ùå **/remove_group_from_whitelist** - Guruhni whitelist dan olib tashlash
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Video yuborish ruxsatini bekor qilish

üß™ **/test_group_video** - Video yuborishni test qilish
   ‚Ä¢ Hozircha video yuborish
   ‚Ä¢ Test natijalarini ko'rish

üîÑ **/reset_group_video** - Guruh sozlamalarini qayta o'rnatish
   ‚Ä¢ Barcha sozlamalar o'chiriladi
   ‚Ä¢ Video yuborish to'xtatiladi

üìã **/list_group_videos** - Guruh video ro'yxati
   ‚Ä¢ Barcha video va holati
   ‚Ä¢ Statistika va progress

‚è≠Ô∏è **/next_group_video** - Keyingi video yuborish
   ‚Ä¢ Keyingi ko'rilmagan video
   ‚Ä¢ Avtomatik yuborish davom etadi

‚è≠Ô∏è **/skip_group_video** - Video o'tkazib yuborish
   ‚Ä¢ Hozirgi video o'tkazib yuboriladi
   ‚Ä¢ Keyingi video yuboriladi

üìä **/status_group_video** - Video holati va progress
   ‚Ä¢ Progress va statistika
   ‚Ä¢ Avtomatik yuborish vaqti

üí™ **/force_group_video** - Video majburiy yuborish
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Whitelist ni e'tiborsiz qoldirish

üîÑ **/schedule_group_video** - Vazifalarni qayta rejalashtirish
   ‚Ä¢ Avtomatik yuborish vaqti
   ‚Ä¢ Yangi rejalar

üêõ **/debug_group_video** - Debug ma'lumotlari
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Barcha tizim ma'lumotlari

üìã **/all_group_commands** - Barcha buyruqlar ro'yxati
   ‚Ä¢ To'liq buyruqlar ro'yxati
   ‚Ä¢ Kategoriyalar bo'yicha

üè• **/ping_group_video** - Sistema holatini tekshirish
   ‚Ä¢ Barcha tizim komponentlari
   ‚Ä¢ Xatoliklar va holat

üìã **/version_group_video** - Sistema versiyasi
   ‚Ä¢ Texnik ma'lumotlar
   ‚Ä¢ Komponentlar va funksiyalar

üìä **/stats_group_video** - Sistema statistikasi
   ‚Ä¢ Barcha ma'lumotlar
   ‚Ä¢ Hisoblar va ko'rsatkichlar

üßπ **/cleanup_group_video** - Sistema tozalash
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Barcha ma'lumotlarni tozalash

üíæ **/backup_group_video** - Reserva nusxasi
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Barcha ma'lumotlarni saqlash

üîÑ **/restore_group_video** - Reservadan tiklash
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Ma'lumotlarni tiklash

üìã **/logs_group_video** - Sistema loglari
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Xatoliklar va holat

üìä **/monitor_group_video** - Sistema monitoringi
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Resurslar va holat

üö® **/emergency_group_video** - Extren tizrortatlar
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Sistema to'liq to'xtatish

üîÑ **/reboot_group_video** - Sistema qayta ishga tushirish
   ‚Ä¢ Faqat super admin uchun
   ‚Ä¢ Sistema qayta ishga tushirish

‚ÑπÔ∏è **/info_group_video** - Sistema ma'lumotlari
   ‚Ä¢ To'liq tizim ma'lumotlari
   ‚Ä¢ Arxitektura va funksiyalar

üÜò **/support_group_video** - Qo'llab-quvvatlash
   ‚Ä¢ Aloqa ma'lumotlari
   ‚Ä¢ Muammolarni hal qilish

‚ÑπÔ∏è **/about_group_video** - Loyiha haqida
   ‚Ä¢ Loyiha ma'lumotlari
   ‚Ä¢ Tarix va kelajak

üôè **/credits_group_video** - Rahmat va tanzimlar
   ‚Ä¢ Texnologiyalar va jamiyat
   ‚Ä¢ Ishlab chiqaruvchilar

üí∞ **/donate_group_video** - Saxovat va qo'llab-quvvatlash
   ‚Ä¢ Saxovat usullari
   ‚Ä¢ Imtiyozlar va maqsadlar

üìù **/changelog_group_video** - O'zgarishlar tarixi
   ‚Ä¢ Versiyalar va yangilanishlar
   ‚Ä¢ Yaxshilanishlar va tuzatishlar

üìÑ **/license_group_video** - Litsenziya ma'lumotlari
   ‚Ä¢ Litsenziya shartlari
   ‚Ä¢ Foydalanish huquqlari

üîí **/privacy_group_video** - Maxfiylik siyosati
   ‚Ä¢ Ma'lumotlar boshqaruvi
   ‚Ä¢ Maxfiylik va xavfsizlik

üìã **/terms_group_video** - Foydalanish shartlari
   ‚Ä¢ Foydalanish qoidalari
   ‚Ä¢ Javobgarlik va cheklar

üí° **Foydalanish:**
1. Guruhda yoki shaxsiy xabarda /set_group_video buyrug'ini ishlating
2. Loyihani tanlang (Centris, Golden yoki ikkalasi)
3. Seson va boshlash videosini tanlang
4. Guruhni tanlang:
   ‚Ä¢ üè¢ **Hozirgi guruh** - hozirgi guruhga qo'llash
   ‚Ä¢ üìù **ID guruhni kiriting** - guruh ID sini qo'lda kiriting
   ‚Ä¢ üìã **Ro'yxatdan tanlang** - whitelist dagi barcha guruhlardan tanlang
5. Video avtomatik ravishda yuboriladi

‚è∞ **Avtomatik yuborish vaqti:**
‚Ä¢ Centris Towers: 07:00 va 20:00
‚Ä¢ Golden Lake: 11:00
‚Ä¢ Vaqt: Toshkent (UTC+5)
"""
    
    await message.answer(help_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ whitelist
@dp.message_handler(commands=['add_group_to_whitelist'])
async def add_group_to_whitelist_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ whitelist
    """
    logger.info(f"üöÄ add_group_to_whitelist –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ whitelist
        if db.add_group_to_whitelist(chat_id):
            await message.answer("‚úÖ **Guruh whitelist ga qo'shildi!**\n\nüîì Endi video yuborish mumkin.", parse_mode="Markdown")
        else:
            await message.answer("‚ùå **Xatolik yuz berdi!**\n\nGuruh whitelist ga qo'shilmadi.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –≤ whitelist: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ whitelist
@dp.message_handler(commands=['remove_group_from_whitelist'])
async def remove_group_from_whitelist_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ whitelist
    """
    logger.info(f"üöÄ remove_group_from_whitelist –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ whitelist
        if db.remove_group_from_whitelist(chat_id):
            await message.answer("‚ùå **Guruh whitelist dan olib tashlandi!**\n\nüîí Endi video yuborish mumkin emas.", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Guruh whitelist da emas edi!**", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏–∑ whitelist: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['test_group_video'])
async def test_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ test_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤ whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.answer(
                "üîí **GURUH WHITELIST DA EMAS!**\n\n"
                "Video yuborish uchun guruh whitelist ga qo'shilishi kerak."
            , parse_mode="Markdown")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
        from handlers.users.video_scheduler import send_group_video_new
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        test_results = []
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                result = await send_group_video_new(chat_id, 'centris', centris_season_id)
                test_results.append(f"Centris Towers: {'‚úÖ Yuborildi' if result else '‚ùå Yuborilmadi'}")
        
        if golden_enabled:
            golden_season_id = settings[5]
            if golden_season_id:
                result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id)
                test_results.append(f"Golden Lake: {'‚úÖ Yuborildi' if result else '‚ùå Yuborilmadi'}")
        
        if test_results:
            response = "üß™ **TEST NATIJALARI:**\n\n" + "\n".join(test_results)
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Hech qanday faol loyiha topilmadi!**", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ –≥—Ä—É–ø–ø—ã
@dp.message_handler(commands=['reset_group_video'])
async def reset_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ –≥—Ä—É–ø–ø—ã
    """
    logger.info(f"üöÄ reset_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        db.set_group_video_settings(chat_id, False, None, 0, False, None, 0)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        db.reset_group_viewed_videos(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        from handlers.users.video_scheduler import scheduler
        jobs_to_remove = []
        for job in scheduler.get_jobs():
            if job.id.startswith(f"group_") and str(chat_id) in job.id:
                jobs_to_remove.append(job.id)
        
        for job_id in jobs_to_remove:
            scheduler.remove_job(job_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        await message.answer("üîÑ **Guruh video sozlamalari qayta o'rnatildi!**\n\nVideo yuborishni qayta yoqish uchun /set_group_video buyrug'ini ishlating.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['list_group_videos'])
async def list_group_videos_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ list_group_videos –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
        response = "üìπ **GURUH VIDEO RO'YXATI:**\n\n"
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                season_name = db.get_season_name(centris_season_id)
                videos = db.get_videos_by_season(centris_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                response += f"üè¢ **Centris Towers - {season_name}:**\n"
                for url, title, position in videos:
                    status = "‚úÖ" if position in viewed_videos else "‚è≥"
                    response += f"   {status} {position+1}. {title}\n"
                response += "\n"
        
        if golden_enabled:
            golden_season_id = settings[5]
            if golden_season_id:
                season_name = db.get_season_name(golden_season_id)
                videos = db.get_videos_by_season(golden_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                response += f"üèòÔ∏è **Golden Lake - {season_name}:**\n"
                for url, title, position in videos:
                    status = "‚úÖ" if position in viewed_videos else "‚è≥"
                    response += f"   {status} {position+1}. {title}\n"
                response += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_videos = 0
        viewed_count = 0
        
        if centris_enabled and settings[1]:
            videos = db.get_videos_by_season(settings[1])
            total_videos += len(videos)
            viewed_videos = db.get_group_viewed_videos(chat_id)
            viewed_count += sum(1 for v in videos if v[2] in viewed_videos)
        
        if golden_enabled and settings[5]:
            videos = db.get_videos_by_season(settings[5])
            total_videos += len(videos)
            viewed_videos = db.get_group_viewed_videos(chat_id)
            viewed_count += sum(1 for v in videos if v[2] in viewed_videos)
        
        response += f"üìä **STATISTIKA:**\n"
        response += f"   ‚Ä¢ Jami video: {total_videos}\n"
        response += f"   ‚Ä¢ Ko'rilgan: {viewed_count}\n"
        response += f"   ‚Ä¢ Qoldi: {total_videos - viewed_count}\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['next_group_video'])
async def next_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ next_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤ whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.answer(
                "üîí **GURUH WHITELIST DA EMAS!**\n\n"
                "Video yuborish uchun guruh whitelist ga qo'shilishi kerak."
            , parse_mode="Markdown")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
        from handlers.users.video_scheduler import send_group_video_new
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        sent = False
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                result = await send_group_video_new(chat_id, 'centris', centris_season_id)
                sent = sent or result
        
        if golden_enabled and not sent:
            golden_season_id = settings[5]
            if golden_season_id:
                result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id)
                sent = sent or result
        
        if sent:
            await message.answer("‚úÖ **Keyingi video yuborildi!**\n\nüé¨ Avtomatik yuborish davom etadi.", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Hech qanday yangi video topilmadi!**\n\nBarcha video allaqachon yuborilgan.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['skip_group_video'])
async def skip_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ skip_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –≤ whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.answer(
                "üîí **GURUH WHITELIST DA EMAS!**\n\n"
                "Video yuborish uchun guruh whitelist ga qo'shilishi kerak."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ (–æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ)
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        skipped = False
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
                videos = db.get_videos_by_season(centris_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                for url, title, position in videos:
                    if position not in viewed_videos:
                        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                        db.mark_group_video_as_viewed(chat_id, position)
                        skipped = True
                        break
        
        if golden_enabled and not skipped:
            golden_season_id = settings[5]
            if golden_season_id:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
                videos = db.get_videos_by_season(golden_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                for url, title, position in videos:
                    if position not in viewed_videos:
                        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
                        db.mark_group_video_as_viewed(chat_id, position)
                        skipped = True
                        break
        
        if skipped:
            await message.answer("‚è≠Ô∏è **Video o'tkazib yuborildi!**\n\nüé¨ Keyingi video avtomatik ravishda yuboriladi.", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Hech qanday video o'tkazib yuborilmadi!**\n\nBarcha video allaqachon ko'rilgan.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['status_group_video'])
async def status_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ status_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        response = "üìä **GURUH VIDEO HOLATI:**\n\n"
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        # –°—Ç–∞—Ç—É—Å Centris
        if centris_enabled:
            centris_season_id = settings[1]
            centris_start_video = settings[2]
            if centris_season_id:
                season_name = db.get_season_name(centris_season_id)
                videos = db.get_videos_by_season(centris_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                centris_viewed = sum(1 for v in videos if v[2] in viewed_videos)
                centris_total = len(videos)
                centris_progress = (centris_viewed / centris_total * 100) if centris_total > 0 else 0
                
                response += f"üè¢ **Centris Towers - {season_name}:**\n"
                response += f"   ‚Ä¢ Progress: {centris_viewed}/{centris_total} ({centris_progress:.1f}%)\n"
                response += f"   ‚Ä¢ Boshlash: {centris_start_video + 1}. video\n"
                response += f"   ‚Ä¢ Status: ‚úÖ Faol\n\n"
        
        # –°—Ç–∞—Ç—É—Å Golden
        if golden_enabled:
            golden_season_id = settings[5]
            golden_start_video = settings[6]
            if golden_season_id:
                season_name = db.get_season_name(golden_season_id)
                videos = db.get_videos_by_season(golden_season_id)
                viewed_videos = db.get_group_viewed_videos(chat_id)
                
                golden_viewed = sum(1 for v in videos if v[2] in viewed_videos)
                golden_total = len(videos)
                golden_progress = (golden_viewed / golden_total * 100) if golden_total > 0 else 0
                
                response += f"üèòÔ∏è **Golden Lake - {season_name}:**\n"
                response += f"   ‚Ä¢ Progress: {golden_viewed}/{golden_total} ({golden_progress:.1f}%)\n"
                response += f"   ‚Ä¢ Boshlash: {golden_start_video + 1}. video\n"
                response += f"   ‚Ä¢ Status: ‚úÖ Faol\n\n"
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if not centris_enabled and not golden_enabled:
            response += "‚ùå **Hech qanday loyiha faol emas!**\n\n"
        
        # Whitelist —Å—Ç–∞—Ç—É—Å
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"üîí **Whitelist:** {'‚úÖ Ruxsat berilgan' if is_whitelisted else '‚ùå Ruxsat berilmagan'}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = db.get_subscription_status(chat_id)
        response += f"üì° **Obuna:** {'‚úÖ Faol' if is_subscribed else '‚ùå Faol emas'}\n"
        
        # –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
        if centris_enabled or golden_enabled:
            response += "\nüé¨ **Keyingi video:**\n"
            if centris_enabled:
                response += "   ‚Ä¢ Centris: Avtomatik 07:00 va 20:00\n"
            if golden_enabled:
                response += "   ‚Ä¢ Golden: Avtomatik 11:00\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['force_group_video'])
async def force_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ force_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º whitelist)
        from handlers.users.video_scheduler import send_group_video_new
        
        centris_enabled = settings[0]
        golden_enabled = settings[4]
        
        sent = False
        
        if centris_enabled:
            centris_season_id = settings[1]
            if centris_season_id:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ whitelist
                original_whitelist = db.is_group_whitelisted(chat_id)
                if not original_whitelist:
                    db.add_group_to_whitelist(chat_id, "Force video", user_id)
                
                result = await send_group_video_new(chat_id, 'centris', centris_season_id)
                sent = sent or result
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å whitelist
                if not original_whitelist:
                    db.remove_group_from_whitelist(chat_id)
        
        if golden_enabled:
            golden_season_id = settings[5]
            if golden_season_id:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ whitelist
                original_whitelist = db.is_group_whitelisted(chat_id)
                if not original_whitelist:
                    db.add_group_to_whitelist(chat_id, "Force video", user_id)
                
                result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id)
                sent = sent or result
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å whitelist
                if not original_whitelist:
                    db.remove_group_from_whitelist(chat_id)
        
        if sent:
            await message.answer("‚úÖ **Video majburiy yuborildi!**\n\nüé¨ Video yuborish muvaffaqiyatli.", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è **Hech qanday yangi video topilmadi!**\n\nBarcha video allaqachon yuborilgan.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞: —Å–≤–æ–¥–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
@dp.message_handler(commands=['all_groups_progress'])
async def all_groups_progress_command(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –í–°–ï–ú –≥—Ä—É–ø–ø–∞–º: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    """
    logger.info(f"üöÄ all_groups_progress –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    try:
        user_id = message.from_user.id

        # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå Sizda bu buyruqni bajarish uchun ruxsat yo'q!\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return

        groups = db.get_all_groups_with_settings() or []
        if not groups:
            await message.answer("üì≠ Hech qanday guruh topilmadi.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –±–ª–æ–∫–∏, —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏
        chunks = []
        current = []
        current_len = 0

        for row in groups:
            # –û–∂–∏–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –∏–∑ get_all_groups_with_settings
            chat_id = row[0]
            centris_enabled = row[1]
            centris_season_id = row[2]
            centris_start_video = row[3]
            golden_enabled = row[4]
            golden_season_id = row[5]
            golden_start_video = row[6]
            group_name = row[9] if len(row) > 9 else str(chat_id)

            # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            centris_viewed = []
            golden_viewed = []
            try:
                centris_viewed = db.get_group_viewed_videos_by_project(chat_id, 'centris')
            except Exception:
                pass
            try:
                golden_viewed = db.get_group_viewed_videos_by_project(chat_id, 'golden')
            except Exception:
                pass

            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤
            centris_season_name = db.get_season_name(centris_season_id) if centris_enabled and centris_season_id else None
            golden_season_name = db.get_season_name(golden_season_id) if golden_enabled and golden_season_id else None

            block_lines = []
            block_lines.append(f"üÜî {chat_id} ‚Äî {group_name}")

            if centris_enabled and centris_season_id is not None:
                block_lines.append("üè¢ Centris:")
                if centris_season_name:
                    block_lines.append(f"   ‚Ä¢ Mavsum: {centris_season_name} (id={centris_season_id})")
                block_lines.append(f"   ‚Ä¢ Oxirgi indeks: {centris_start_video}")
                # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
                if centris_viewed:
                    preview = ", ".join(map(str, centris_viewed[:20]))
                    suffix = " ‚Ä¶" if len(centris_viewed) > 20 else ""
                    block_lines.append(f"   ‚Ä¢ Ko'rilgan (pozitsiyalar): [{preview}]{suffix}")
                else:
                    block_lines.append("   ‚Ä¢ Ko'rilgan: []")

            if golden_enabled and golden_season_id is not None:
                block_lines.append("üèòÔ∏è Golden:")
                if golden_season_name:
                    block_lines.append(f"   ‚Ä¢ Mavsum: {golden_season_name} (id={golden_season_id})")
                block_lines.append(f"   ‚Ä¢ Oxirgi indeks: {golden_start_video}")
                if golden_viewed:
                    preview = ", ".join(map(str, golden_viewed[:20]))
                    suffix = " ‚Ä¶" if len(golden_viewed) > 20 else ""
                    block_lines.append(f"   ‚Ä¢ Ko'rilgan (pozitsiyalar): [{preview}]{suffix}")
                else:
                    block_lines.append("   ‚Ä¢ Ko'rilgan: []")

            block = "\n".join(block_lines) + "\n\n"

            if current_len + len(block) > 3500:
                chunks.append("".join(current))
                current = [block]
                current_len = len(block)
            else:
                current.append(block)
                current_len += len(block)

        if current:
            chunks.append("".join(current))

        header = "üìä BARCHA GURUHLAR PROGRESSI:\n\n"
        if chunks:
            # –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            await message.answer(header + chunks[0])
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            for chunk in chunks[1:]:
                await message.answer(chunk)
        else:
            await message.answer(header + "(bo'sh)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['schedule_group_video'])
async def schedule_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ schedule_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            , parse_mode="Markdown")
            return
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        from handlers.users.video_scheduler import schedule_group_jobs
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        from handlers.users.video_scheduler import scheduler
        jobs_to_remove = []
        for job in scheduler.get_jobs():
            if job.id.startswith(f"group_") and str(chat_id) in job.id:
                jobs_to_remove.append(job.id)
        
        for job_id in jobs_to_remove:
            scheduler.remove_job(job_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {job_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        schedule_single_group_jobs(chat_id)
        
        await message.answer("üîÑ **Guruh video vazifalari qayta rejalashtirildi!**\n\n‚è∞ Avtomatik yuborish vaqti yangilandi.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['debug_group_video'])
async def debug_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ debug_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        response = "üêõ **DEBUG MA'LUMOTLARI:**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
        response += f"üè∑Ô∏è **GURUH MA'LUMOTLARI:**\n"
        response += f"   ‚Ä¢ ID: {chat_id}\n"
        response += f"   ‚Ä¢ Nomi: {message.chat.title}\n"
        response += f"   ‚Ä¢ Turi: {message.chat.type}\n"
        response += f"   ‚Ä¢ Username: {message.chat.username or 'Yo''q'}\n\n"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
        settings = db.get_group_video_settings(chat_id)
        if settings:
            response += f"üìπ **VIDEO SOZLAMALARI:**\n"
            response += f"   ‚Ä¢ Centris: {'‚úÖ' if settings[0] else '‚ùå'} (season: {settings[1]}, start: {settings[2]})\n"
            response += f"   ‚Ä¢ Golden: {'‚úÖ' if settings[4] else '‚ùå'} (season: {settings[5]}, start: {settings[6]})\n\n"
        else:
            response += f"üìπ **VIDEO SOZLAMALARI:** ‚ùå Topilmadi\n\n"
        
        # Whitelist —Å—Ç–∞—Ç—É—Å
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"üîí **WHITELIST:** {'‚úÖ' if is_whitelisted else '‚ùå'}\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = db.get_subscription_status(chat_id)
        response += f"üì° **OBUNA:** {'‚úÖ' if is_subscribed else '‚ùå'}\n"
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        viewed_videos = db.get_group_viewed_videos(chat_id)
        response += f"üëÅÔ∏è **KO'RILGAN VIDEO:** {len(viewed_videos)} ta\n"
        if viewed_videos:
            response += f"   ‚Ä¢ Pozitsiyalar: {sorted(viewed_videos)[:10]}{'...' if len(viewed_videos) > 10 else ''}\n"
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        from handlers.users.video_scheduler import scheduler
        group_jobs = [job for job in scheduler.get_jobs() if job.id.startswith(f"group_") and str(chat_id) in job.id]
        response += f"‚è∞ **REJALANGAN VAZIFALAR:** {len(group_jobs)} ta\n"
        for job in group_jobs:
            response += f"   ‚Ä¢ {job.id}: {job.next_run_time}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–∞—Ö
        if settings and settings[1]:  # Centris
            centris_videos = db.get_videos_by_season(settings[1])
            response += f"\nüè¢ **CENTRIS VIDEOLAR:** {len(centris_videos)} ta\n"
        
        if settings and settings[5]:  # Golden
            golden_videos = db.get_videos_by_season(settings[5])
            response += f"üèòÔ∏è **GOLDEN VIDEOLAR:** {len(golden_videos)} ta\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≥—Ä—É–ø–ø
@dp.message_handler(commands=['all_group_commands'])
async def all_group_commands_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ all_group_commands –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        response = "üìã **BARCHA GURUH BUYRUQLARI:**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        response += "üè¢ **ASOSIY BUYRUQLAR:**\n"
        response += "   ‚Ä¢ /set_group_video - Video tarqatish sozlamalari\n"
        response += "   ‚Ä¢ /show_group_video_settings - Hozirgi sozlamalar\n"
        response += "   ‚Ä¢ /admin_show_all_groups_settings - Barcha guruhlar sozlamalari (Admin)\n"
        response += "   ‚Ä¢ /help_group_video - Batafsil yordam\n\n"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        response += "üé¨ **VIDEO BOSHQARISH:**\n"
        response += "   ‚Ä¢ /start_group_video - Video yuborishni boshlash\n"
        response += "   ‚Ä¢ /stop_group_video - Video yuborishni to'xtatish\n"
        response += "   ‚Ä¢ /next_group_video - Keyingi video yuborish\n"
        response += "   ‚Ä¢ /skip_group_video - Video o'tkazib yuborish\n"
        response += "   ‚Ä¢ /test_group_video - Video yuborishni test qilish\n"
        response += "   ‚Ä¢ /send_all_planned_videos - Barcha rejalashtirilgan videolar\n"
        response += "   ‚Ä¢ /send_specific_video - Maxsus video yuborish\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response += "üìä **MA'LUMOTLAR:**\n"
        response += "   ‚Ä¢ /list_group_videos - Video ro'yxati\n"
        response += "   ‚Ä¢ /status_group_video - Video holati va progress\n\n"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        response += "‚öôÔ∏è **BOSHQARISH:**\n"
        response += "   ‚Ä¢ /reset_group_video - Sozlamalarni qayta o'rnatish\n"
        response += "   ‚Ä¢ /schedule_group_video - Vazifalarni qayta rejalashtirish\n\n"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        response += "üîí **XAVFSIZLIK:**\n"
        response += "   ‚Ä¢ /add_group_to_whitelist - Whitelist ga qo'shish\n"
        response += "   ‚Ä¢ /remove_group_from_whitelist - Whitelist dan olib tashlash\n\n"
        
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        if user_id in SUPER_ADMIN_IDS:
            response += "üí™ **SUPER ADMIN BUYRUQLARI:**\n"
            response += "   ‚Ä¢ /remove_group - Guruhni o'chirish (ID bilan yoki tanlash)\n"
            response += "   ‚Ä¢ /force_group_video - Video majburiy yuborish\n"
            response += "   ‚Ä¢ /debug_group_video - Debug ma'lumotlari\n"
            response += "   ‚Ä¢ /cleanup_group_video - Sistema tozalash\n"
            response += "   ‚Ä¢ /backup_group_video - Reserva nusxasi\n"
            response += "   ‚Ä¢ /restore_group_video - Reservadan tiklash\n"
            response += "   ‚Ä¢ /logs_group_video - Sistema loglari\n"
            response += "   ‚Ä¢ /monitor_group_video - Sistema monitoringi\n"
            response += "   ‚Ä¢ /emergency_group_video - Extren tizrortatlar\n"
            response += "   ‚Ä¢ /reboot_group_video - Sistema qayta ishga tushirish\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        response += "üñ•Ô∏è **SISTEMA BUYRUQLARI:**\n"
        response += "   ‚Ä¢ /ping_group_video - Sistema holatini tekshirish\n"
        response += "   ‚Ä¢ /version_group_video - Sistema versiyasi\n"
        response += "   ‚Ä¢ /stats_group_video - Sistema statistikasi\n"
        response += "   ‚Ä¢ /info_group_video - Sistema ma'lumotlari\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        response += "‚ÑπÔ∏è **MA'LUMOT BUYRUQLARI:**\n"
        response += "   ‚Ä¢ /about_group_video - Loyiha haqida\n"
        response += "   ‚Ä¢ /credits_group_video - Rahmatlar\n"
        response += "   ‚Ä¢ /donate_group_video - Saxovat\n"
        response += "   ‚Ä¢ /changelog_group_video - Yangilanishlar\n"
        response += "   ‚Ä¢ /support_group_video - Qo'llab-quvvatlash\n\n"
        
        # –ü—Ä–∞–≤–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        response += "üìÑ **HUQUQIY BUYRUQLAR:**\n"
        response += "   ‚Ä¢ /license_group_video - Litsenziya\n"
        response += "   ‚Ä¢ /privacy_group_video - Maxfiylik siyosati\n"
        response += "   ‚Ä¢ /terms_group_video - Foydalanish shartlari\n\n"
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        response += "üí° **FOYDALANISH:**\n"
        response += "1. Guruhda yoki shaxsiy xabarda /set_group_video buyrug'ini ishlating\n"
        response += "2. Loyihani tanlang (Centris, Golden yoki ikkalasi)\n"
        response += "3. Seson va boshlash videosini tanlang\n"
        response += "4. Guruhni tanlang:\n"
        response += "   ‚Ä¢ üè¢ Hozirgi guruh - hozirgi guruhga qo'llash\n"
        response += "   ‚Ä¢ üìù ID guruhni kiriting - guruh ID sini qo'lda kiriting\n"
        response += "   ‚Ä¢ üìã Ro'yxatdan tanlang - whitelist dagi barcha guruhlardan tanlang\n"
        response += "5. Video avtomatik ravishda yuboriladi\n\n"
        
        # –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        response += "‚è∞ **AVTOMATIK YUBORISH VAQTI:**\n"
        response += "‚Ä¢ Centris Towers: 07:00 va 20:00\n"
        response += "‚Ä¢ Golden Lake: 11:00\n"
        response += "‚Ä¢ Vaqt: Toshkent (UTC+5)\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response += "‚ÑπÔ∏è **QO'SHIMCHA MA'LUMOT:**\n"
        response += "‚Ä¢ Barcha buyruqlar faqat guruhlarda ishlaydi\n"
        response += "‚Ä¢ Faqat adminlar foydalana oladi\n"
        response += "‚Ä¢ Video yuborish uchun guruh whitelist da bo'lishi kerak"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['ping_group_video'])
async def ping_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ ping_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        response = "üè• **SISTEMA HOLATI:**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
            test_result = db.get_all_groups_with_settings()
            response += "üóÑÔ∏è **BAZA MA'LUMOTLARI:** ‚úÖ Faol\n"
            response += f"   ‚Ä¢ Guruhlar soni: {len(test_result)}\n"
        except Exception as e:
            response += "üóÑÔ∏è **BAZA MA'LUMOTLARI:** ‚ùå Xatolik\n"
            response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            from handlers.users.video_scheduler import scheduler
            jobs = scheduler.get_jobs()
            response += f"‚è∞ **REJALANGAN VAZIFALAR:** ‚úÖ {len(jobs)} ta\n"
        except Exception as e:
            response += "‚è∞ **REJALANGAN VAZIFALAR:** ‚ùå Xatolik\n"
            response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∑–æ–Ω–æ–≤
        try:
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            response += f"üì∫ **SEZONLAR:** ‚úÖ Faol\n"
            response += f"   ‚Ä¢ Centris: {len(centris_seasons)} ta\n"
            response += f"   ‚Ä¢ Golden: {len(golden_seasons)} ta\n"
        except Exception as e:
            response += "üì∫ **SEZONLAR:** ‚ùå Xatolik\n"
            response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ
        try:
            total_videos = 0
            if centris_seasons:
                for season_id, _ in centris_seasons:
                    videos = db.get_videos_by_season(season_id)
                    total_videos += len(videos)
            if golden_seasons:
                for season_id, _ in golden_seasons:
                    videos = db.get_videos_by_season(season_id)
                    total_videos += len(videos)
            response += f"üé¨ **VIDEOLAR:** ‚úÖ {total_videos} ta\n"
        except Exception as e:
            response += "üé¨ **VIDEOLAR:** ‚ùå Xatolik\n"
            response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø
        try:
            groups_with_settings = db.get_all_groups_with_settings()
            active_groups = [g for g in groups_with_settings if g[0] or g[4]]  # centris_enabled or golden_enabled
            response += f"üë• **FAOL GURUHLAR:** ‚úÖ {len(active_groups)} ta\n"
        except Exception as e:
            response += "üë• **FAOL GURUHLAR:** ‚ùå Xatolik\n"
            response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        response += "\nüéØ **UMUMIY HOLAT:** ‚úÖ Sistema ishlayapti\n"
        response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + "\n"
        response += "üåç **VAQT ZONA:** Toshkent (UTC+5)"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['version_group_video'])
async def version_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ version_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
        response = "üìã **SISTEMA VERSIYASI:**\n\n"
        
        # –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
        response += "üèóÔ∏è **ASOSIY MA'LUMOTLAR:**\n"
        response += "   ‚Ä¢ Sistema: Centris Towers & Golden Lake Bot\n"
        response += "   ‚Ä¢ Versiya: 2.0.0\n"
        response += "   ‚Ä¢ Turi: Video tarqatish tizimi\n"
        response += "   ‚Ä¢ Platforma: Telegram Bot API\n\n"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        response += "üîß **TIZIM KOMPONENTLARI:**\n"
        response += "   ‚Ä¢ Framework: aiogram 2.x\n"
        response += "   ‚Ä¢ Ma'lumotlar bazasi: PostgreSQL\n"
        response += "   ‚Ä¢ Rejalashtiruvchi: APScheduler\n"
        response += "   ‚Ä¢ Xavfsizlik: Whitelist + Admin\n\n"
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        response += "‚ú® **ASOSIY FUNKSIYALAR:**\n"
        response += "   ‚Ä¢ Avtomatik video yuborish\n"
        response += "   ‚Ä¢ Centris Towers va Golden Lake\n"
        response += "   ‚Ä¢ Seson va video boshqarish\n"
        response += "   ‚Ä¢ Guruh sozlamalari\n"
        response += "   ‚Ä¢ Xavfsizlik va whitelist\n\n"
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        response += "‚è∞ **ISH VAQTI:**\n"
        response += "   ‚Ä¢ Centris: 07:00 va 20:00\n"
        response += "   ‚Ä¢ Golden: 11:00\n"
        response += "   ‚Ä¢ Vaqt zona: Toshkent (UTC+5)\n\n"
        
        # –ö–æ–º–∞–Ω–¥—ã
        response += "üìù **MAVJUD BUYRUQLAR:**\n"
        response += "   ‚Ä¢ Asosiy: 3 ta\n"
        response += "   ‚Ä¢ Video boshqarish: 6 ta\n"
        response += "   ‚Ä¢ Ma'lumotlar: 2 ta\n"
        response += "   ‚Ä¢ Boshqarish: 2 ta\n"
        response += "   ‚Ä¢ Xavfsizlik: 2 ta\n"
        response += "   ‚Ä¢ Maxsus: 4 ta\n"
        response += "   ‚Ä¢ **Jami: 19 ta buyruq**\n\n"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response += "‚öôÔ∏è **TEXNIK MA'LUMOTLAR:**\n"
        response += "   ‚Ä¢ Python: 3.8+\n"
        response += "   ‚Ä¢ PostgreSQL: 12+\n"
        response += "   ‚Ä¢ Redis: Ixtiyoriy\n"
        response += "   ‚Ä¢ Logging: bot.log\n\n"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        response += "üë®‚Äçüíª **ISHLAB CHIQARUVCHI:**\n"
        response += "   ‚Ä¢ Telegram: @mohirbek\n"
        response += "   ‚Ä¢ Loyiha: Centris Towers & Golden Lake\n"
        response += "   ‚Ä¢ Yangilanish: 2025-yil\n\n"
        
        # –°—Ç–∞—Ç—É—Å
        response += "üéØ **HOLAT:** ‚úÖ Faol va ishlayapti\n"
        response += "üìÖ **YANGILANGAN:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
        response += "üîÆ **KELAJAK:** Yangi funksiyalar va yaxshilanishlar"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–µ—Ä—Å–∏–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['stats_group_video'])
async def stats_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ stats_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = "üìä **SISTEMA STATISTIKASI:**\n\n"
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø
            groups_with_settings = db.get_all_groups_with_settings()
            total_groups = len(groups_with_settings)
            active_groups = [g for g in groups_with_settings if g[0] or g[4]]  # centris_enabled or golden_enabled
            centris_groups = [g for g in groups_with_settings if g[0]]  # centris_enabled
            golden_groups = [g for g in groups_with_settings if g[4]]  # golden_enabled
            both_groups = [g for g in groups_with_settings if g[0] and g[4]]  # both enabled
            
            response += "üë• **GURUHLAR STATISTIKASI:**\n"
            response += f"   ‚Ä¢ Jami guruhlar: {total_groups}\n"
            response += f"   ‚Ä¢ Faol guruhlar: {len(active_groups)}\n"
            response += f"   ‚Ä¢ Centris guruhlari: {len(centris_groups)}\n"
            response += f"   ‚Ä¢ Golden guruhlari: {len(golden_groups)}\n"
            response += f"   ‚Ä¢ Ikkala loyiha: {len(both_groups)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            response += "üì∫ **SEZONLAR STATISTIKASI:**\n"
            response += f"   ‚Ä¢ Centris sezonlari: {len(centris_seasons)}\n"
            response += f"   ‚Ä¢ Golden sezonlari: {len(golden_seasons)}\n"
            response += f"   ‚Ä¢ Jami sezonlar: {len(centris_seasons) + len(golden_seasons)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ
            total_videos = 0
            centris_videos = 0
            golden_videos = 0
            
            if centris_seasons:
                for season_id, _ in centris_seasons:
                    videos = db.get_videos_by_season(season_id)
                    centris_videos += len(videos)
                    total_videos += len(videos)
            
            if golden_seasons:
                for season_id, _ in golden_seasons:
                    videos = db.get_videos_by_season(season_id)
                    golden_videos += len(videos)
                    total_videos += len(videos)
            
            response += "üé¨ **VIDEO STATISTIKASI:**\n"
            response += f"   ‚Ä¢ Centris videolari: {centris_videos}\n"
            response += f"   ‚Ä¢ Golden videolari: {golden_videos}\n"
            response += f"   ‚Ä¢ Jami videolar: {total_videos}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            from handlers.users.video_scheduler import scheduler
            jobs = scheduler.get_jobs()
            group_jobs = [job for job in jobs if job.id.startswith("group_")]
            centris_jobs = [job for job in group_jobs if "centris" in job.id]
            golden_jobs = [job for job in group_jobs if "golden" in job.id]
            
            response += "‚è∞ **REJALANGAN VAZIFALAR:**\n"
            response += f"   ‚Ä¢ Jami vazifalar: {len(jobs)}\n"
            response += f"   ‚Ä¢ Guruh vazifalari: {len(group_jobs)}\n"
            response += f"   ‚Ä¢ Centris vazifalari: {len(centris_jobs)}\n"
            response += f"   ‚Ä¢ Golden vazifalari: {len(golden_jobs)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            total_viewed = 0
            for group in groups_with_settings:
                chat_id = group[0]
                viewed_videos = db.get_group_viewed_videos(chat_id)
                total_viewed += len(viewed_videos)
            
            response += "üëÅÔ∏è **KO'RISH STATISTIKASI:**\n"
            response += f"   ‚Ä¢ Jami ko'rilgan: {total_viewed}\n"
            response += f"   ‚Ä¢ O'rtacha guruhda: {total_viewed // max(total_groups, 1)}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response += "üéØ **UMUMIY STATISTIKA:**\n"
            response += f"   ‚Ä¢ Faollik darajasi: {len(active_groups) / max(total_groups, 1) * 100:.1f}%\n"
            response += f"   ‚Ä¢ Video zichligi: {total_videos / max(len(centris_seasons) + len(golden_seasons), 1):.1f} video/season\n"
            response += f"   ‚Ä¢ Guruh samaradorligi: {total_viewed / max(total_videos, 1) * 100:.1f}%"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Statistika to'liq yig'ilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['cleanup_group_video'])
async def cleanup_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ cleanup_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
        response = "üßπ **SISTEMA TOZALASH:**\n\n"
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            from handlers.users.video_scheduler import scheduler
            old_jobs = len(scheduler.get_jobs())
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø
            jobs_to_remove = []
            for job in scheduler.get_jobs():
                if job.id.startswith("group_"):
                    jobs_to_remove.append(job.id)
            
            for job_id in jobs_to_remove:
                scheduler.remove_job(job_id)
            
            new_jobs = len(scheduler.get_jobs())
            response += f"‚è∞ **REJALANGAN VAZIFALAR:**\n"
            response += f"   ‚Ä¢ Eski: {old_jobs} ta\n"
            response += f"   ‚Ä¢ Yangi: {new_jobs} ta\n"
            response += f"   ‚Ä¢ O'chirilgan: {old_jobs - new_jobs} ta\n\n"
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            groups_with_settings = db.get_all_groups_with_settings()
            total_cleaned = 0
            
            for group in groups_with_settings:
                chat_id = group[0]
                viewed_videos = db.get_group_viewed_videos(chat_id)
                if viewed_videos:
                    db.reset_group_viewed_videos(chat_id)
                    total_cleaned += len(viewed_videos)
            
            response += f"üëÅÔ∏è **KO'RILGAN VIDEO:**\n"
            response += f"   ‚Ä¢ Tozalangan: {total_cleaned} ta\n"
            response += f"   ‚Ä¢ Guruhlar: {len(groups_with_settings)} ta\n\n"
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            schedule_single_group_jobs(chat_id)
            
            response += "üîÑ **QAYTA REJALASHTIRISH:** ‚úÖ Bajarildi\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            final_jobs = len(scheduler.get_jobs())
            response += f"üìä **YAKUNIY HOLAT:**\n"
            response += f"   ‚Ä¢ Faol vazifalar: {final_jobs} ta\n"
            response += f"   ‚Ä¢ Faol guruhlar: {len([g for g in groups_with_settings if g[0] or g[4]])} ta\n"
            response += f"   ‚Ä¢ Sistema holati: ‚úÖ Toza va faol"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Tozalash to'liq bajarilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['backup_group_video'])
async def backup_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ backup_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        response = "üíæ **RESERVA NUSXASI:**\n\n"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø
            groups_with_settings = db.get_all_groups_with_settings()
            backup_data = {
                'timestamp': datetime.now().isoformat(),
                'total_groups': len(groups_with_settings),
                'groups': []
            }
            
            for group in groups_with_settings:
                chat_id = group[0]
                group_info = {
                    'chat_id': chat_id,
                    'centris_enabled': group[1],
                    'centris_season_id': group[2],
                    'centris_start_video': group[3],
                    'golden_enabled': group[4],
                    'golden_season_id': group[5],
                    'golden_start_video': group[6],
                    'viewed_videos': db.get_group_viewed_videos(chat_id),
                    'is_subscribed': db.get_subscription_status(chat_id),
                    'is_whitelisted': db.is_group_whitelisted(chat_id)
                }
                backup_data['groups'].append(group_info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ñ–∞–π–ª
            import json
            backup_filename = f"group_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(backup_filename, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            response += f"üìÅ **FAYL:** {backup_filename}\n"
            response += f"üìÖ **VAQT:** {backup_data['timestamp']}\n"
            response += f"üë• **GURUHLAR:** {backup_data['total_groups']} ta\n\n"
            
            # –î–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            centris_groups = [g for g in backup_data['groups'] if g['centris_enabled']]
            golden_groups = [g for g in backup_data['groups'] if g['golden_enabled']]
            both_groups = [g for g in backup_data['groups'] if g['centris_enabled'] and g['golden_enabled']]
            
            response += "üìä **MA'LUMOTLAR:**\n"
            response += f"   ‚Ä¢ Centris guruhlari: {len(centris_groups)}\n"
            response += f"   ‚Ä¢ Golden guruhlari: {len(golden_groups)}\n"
            response += f"   ‚Ä¢ Ikkala loyiha: {len(both_groups)}\n"
            response += f"   ‚Ä¢ Faol guruhlar: {len([g for g in backup_data['groups'] if g['centris_enabled'] or g['golden_enabled']])}\n\n"
            
            # –°—Ç–∞—Ç—É—Å
            response += "‚úÖ **RESERVA NUSXASI:** Muvaffaqiyatli yaratildi\n"
            response += f"üìÅ **JOYLASHUV:** {backup_filename}\n"
            response += "üí° **ESLATMA:** Faylni xavfsiz joyda saqlang"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Reserva nusxasi yaratilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@dp.message_handler(commands=['restore_group_video'])
async def restore_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    """
    logger.info(f"üöÄ restore_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "üìÅ **RESTORE BUYRUQI:**\n\n"
                "üí° **Foydalanish:**\n"
                "/restore_group_video <fayl_nomi>\n\n"
                "üìã **Mavjud fayllar:**\n"
                "Fayllarni ko'rish uchun /backup_group_video buyrug'ini ishlating"
            , parse_mode="Markdown")
            return
        
        filename = args[1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        response = "üîÑ **RESTORE JARAYONI:**\n\n"
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            import json
            import os
            
            if not os.path.exists(filename):
                await message.answer(f"‚ùå **Fayl topilmadi:** {filename}\n\nIltimos, to'g'ri fayl nomini kiriting.", parse_mode="Markdown")
                return
            
            with open(filename, 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
            
            response += f"üìÅ **FAYL:** {filename}\n"
            response += f"üìÖ **VAQT:** {backup_data.get('timestamp', 'N/A')}\n"
            response += f"üë• **GURUHLAR:** {backup_data.get('total_groups', 0)} ta\n\n"
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            restored_groups = 0
            for group_info in backup_data.get('groups', []):
                try:
                    chat_id = group_info['chat_id']
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
                    db.set_group_video_settings(
                        chat_id,
                        group_info['centris_enabled'],
                        group_info['centris_season_id'],
                        group_info['centris_start_video'],
                        group_info['golden_enabled'],
                        group_info['golden_season_id'],
                        group_info['golden_start_video']
                    )
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                    if group_info.get('viewed_videos'):
                        viewed_videos = group_info['viewed_videos']
                        cursor = db.conn.cursor()
                        cursor.execute(
                            "UPDATE group_video_settings SET viewed_videos = %s WHERE chat_id = %s",
                            (json.dumps(viewed_videos), str(chat_id))
                        )
                        db.conn.commit()
                        cursor.close()
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    if group_info.get('is_subscribed'):
                        db.set_subscription_status(chat_id, group_info['is_subscribed'])
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º whitelist —Å—Ç–∞—Ç—É—Å
                    if group_info.get('is_whitelisted'):
                        if not db.is_group_whitelisted(chat_id):
                            db.add_group_to_whitelist(chat_id, "Restored from backup", user_id)
                    
                    restored_groups += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                    continue
            
            response += f"‚úÖ **RESTORE NATIJASI:**\n"
            response += f"   ‚Ä¢ Muvaffaqiyatli: {restored_groups} ta\n"
            response += f"   ‚Ä¢ Xatoliklar: {len(backup_data.get('groups', [])) - restored_groups} ta\n\n"
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            schedule_single_group_jobs(chat_id)
            
            response += "üîÑ **QAYTA REJALASHTIRISH:** ‚úÖ Bajarildi\n\n"
            response += "üéØ **HOLAT:** Sistema tiklandi va ishlayapti"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Restore jarayoni to'liq bajarilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['logs_group_video'])
async def logs_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ logs_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ª–æ–≥–∞—Ö
        response = "üìã **SISTEMA LOGLARI:**\n\n"
        
        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞
            log_filename = 'bot.log'
            
            if not os.path.exists(log_filename):
                await message.answer("‚ùå **Log fayli topilmadi:** bot.log\n\nIltimos, log faylini tekshiring.", parse_mode="Markdown")
                return
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            with open(log_filename, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            last_lines = lines[-20:] if len(lines) > 20 else lines
            
            response += f"üìÅ **FAYL:** {log_filename}\n"
            response += f"üìä **JAMI SATRLAR:** {len(lines)}\n"
            response += f"üìñ **OXIRGI:** {len(last_lines)} ta\n\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
            error_count = sum(1 for line in last_lines if 'ERROR' in line)
            warning_count = sum(1 for line in last_lines if 'WARNING' in line)
            info_count = sum(1 for line in last_lines if 'INFO' in line)
            
            response += "üìä **LOGLAR HOLATI:**\n"
            response += f"   ‚Ä¢ Xatoliklar: {error_count} ta\n"
            response += f"   ‚Ä¢ Ogohlantirishlar: {warning_count} ta\n"
            response += f"   ‚Ä¢ Ma'lumotlar: {info_count} ta\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            response += "üìù **OXIRGI LOGLAR:**\n"
            for line in last_lines:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
                if len(line) > 100:
                    line = line[:97] + "..."
                response += f"   {line.strip()}\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            if error_count == 0:
                response += "\nüéØ **HOLAT:** ‚úÖ Sistema yaxshi ishlayapti"
            elif error_count <= 2:
                response += "\nüéØ **HOLAT:** ‚ö†Ô∏è Kichik muammolar bor"
            else:
                response += "\nüéØ **HOLAT:** ‚ùå Ko'p xatoliklar bor"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Loglar to'liq o'qilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['monitor_group_video'])
async def monitor_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üöÄ monitor_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        response = "üìä **SISTEMA MONITORINGI:**\n\n"
        
        try:
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            import psutil
            import time
            
            # CPU –∏ –ø–∞–º—è—Ç—å
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            response += "üíª **SISTEMA RESURSLARI:**\n"
            response += f"   ‚Ä¢ CPU: {cpu_percent}%\n"
            response += f"   ‚Ä¢ RAM: {memory.percent}% ({memory.used // (1024**3)}GB / {memory.total // (1024**3)}GB)\n"
            response += f"   ‚Ä¢ Disk: {disk.percent}% ({disk.used // (1024**3)}GB / {disk.total // (1024**3)}GB)\n\n"
            
            # –ü—Ä–æ—Ü–µ—Å—Å—ã Python
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    if 'python' in proc.info['name'].lower():
                        python_processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            response += "üêç **PYTHON PROTSESLAR:**\n"
            response += f"   ‚Ä¢ Jami: {len(python_processes)} ta\n"
            if python_processes:
                total_cpu = sum(p['cpu_percent'] for p in python_processes)
                total_memory = sum(p['memory_percent'] for p in python_processes)
                response += f"   ‚Ä¢ CPU: {total_cpu:.1f}%\n"
                response += f"   ‚Ä¢ RAM: {total_memory:.1f}%\n"
            response += "\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
                start_time = time.time()
                test_result = db.get_all_groups_with_settings()
                db_response_time = (time.time() - start_time) * 1000
                
                response += "üóÑÔ∏è **BAZA MA'LUMOTLARI:**\n"
                response += f"   ‚Ä¢ Holat: ‚úÖ Faol\n"
                response += f"   ‚Ä¢ Javob vaqti: {db_response_time:.1f}ms\n"
                response += f"   ‚Ä¢ Guruhlar: {len(test_result)} ta\n"
            except Exception as e:
                response += "üóÑÔ∏è **BAZA MA'LUMOTLARI:**\n"
                response += f"   ‚Ä¢ Holat: ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
            response += "\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            try:
                from handlers.users.video_scheduler import scheduler
                jobs = scheduler.get_jobs()
                group_jobs = [job for job in jobs if job.id.startswith("group_")]
                
                response += "‚è∞ **REJALANGAN VAZIFALAR:**\n"
                response += f"   ‚Ä¢ Jami: {len(jobs)} ta\n"
                response += f"   ‚Ä¢ Guruh: {len(group_jobs)} ta\n"
                response += f"   ‚Ä¢ Holat: ‚úÖ Faol\n"
            except Exception as e:
                response += "‚è∞ **REJALANGAN VAZIFALAR:**\n"
                response += f"   ‚Ä¢ Holat: ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
            response += "\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
            try:
                log_filename = 'bot.log'
                if os.path.exists(log_filename):
                    with open(log_filename, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    recent_lines = lines[-100:] if len(lines) > 100 else lines
                    error_count = sum(1 for line in recent_lines if 'ERROR' in line)
                    warning_count = sum(1 for line in recent_lines if 'WARNING' in line)
                    
                    response += "üìã **LOGLAR HOLATI:**\n"
                    response += f"   ‚Ä¢ Jami satrlar: {len(lines)}\n"
                    response += f"   ‚Ä¢ Oxirgi 100 satrda:\n"
                    response += f"     - Xatoliklar: {error_count} ta\n"
                    response += f"     - Ogohlantirishlar: {warning_count} ta\n"
                    
                    # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if error_count == 0:
                        response += f"   ‚Ä¢ Holat: ‚úÖ Yaxshi\n"
                    elif error_count <= 2:
                        response += f"   ‚Ä¢ Holat: ‚ö†Ô∏è O'rtacha\n"
                    else:
                        response += f"   ‚Ä¢ Holat: ‚ùå Yomon\n"
                else:
                    response += "üìã **LOGLAR HOLATI:**\n"
                    response += f"   ‚Ä¢ Holat: ‚ùå Fayl topilmadi\n"
            except Exception as e:
                response += "üìã **LOGLAR HOLATI:**\n"
                response += f"   ‚Ä¢ Holat: ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n"
            response += "\n"
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            response += "üéØ **UMUMIY HOLAT:**\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            system_score = 100
            
            # –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –æ—à–∏–±–∫–∏
            if error_count > 5:
                system_score -= 30
            elif error_count > 2:
                system_score -= 15
            
            # –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É
            if cpu_percent > 80:
                system_score -= 20
            elif cpu_percent > 60:
                system_score -= 10
            
            # –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫—É –ø–∞–º—è—Ç–∏
            if memory.percent > 90:
                system_score -= 20
            elif memory.percent > 80:
                system_score -= 10
            
            if system_score >= 90:
                status = "‚úÖ Yaxshi"
            elif system_score >= 70:
                status = "‚ö†Ô∏è O'rtacha"
            else:
                status = "‚ùå Yomon"
            
            response += f"   ‚Ä¢ Ball: {system_score}/100\n"
            response += f"   ‚Ä¢ Holat: {status}\n"
            response += f"   ‚Ä¢ Vaqt: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Monitoring to'liq bajarilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
@dp.message_handler(commands=['scheduler_debug'])
async def scheduler_debug_command(message: types.Message):
    """–û—Ç–ª–∞–¥–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤–∏–¥–µ–æ"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    try:
        from handlers.users.video_scheduler import scheduler
        
        response = "üîß **SCHEDULER DEBUG**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        response += f"üìä **STATUS:**\n"
        response += f"   ‚Ä¢ Running: {'‚úÖ' if scheduler.running else '‚ùå'}\n"
        response += f"   ‚Ä¢ Jobs count: {len(scheduler.get_jobs())}\n\n"
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        jobs = scheduler.get_jobs()
        if jobs:
            response += f"üìã **PLANNED JOBS ({len(jobs)}):**\n"
            for job in jobs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                next_run = job.next_run_time.strftime('%H:%M %d.%m') if job.next_run_time else "Never"
                response += f"   ‚Ä¢ `{job.id}`: {next_run}\n"
            
            if len(jobs) > 10:
                response += f"   ‚Ä¢ ... –∏ –µ—â–µ {len(jobs) - 10} –∑–∞–¥–∞—á\n"
        else:
            response += "‚ùå **–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!**\n"
        
        response += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        groups = db.get_all_groups_with_settings()
        response += f"üë• **ACTIVE GROUPS:** {len(groups)}\n"
        
        for i, group in enumerate(groups[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –≥—Ä—É–ø–ø
            chat_id = group[0]
            response += f"   ‚Ä¢ Group {chat_id}\n"
        
        if len(groups) > 5:
            response += f"   ‚Ä¢ ... –∏ –µ—â–µ {len(groups) - 5} –≥—Ä—É–ø–ø\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await handle_error_with_notification(e, "scheduler_debug_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
@dp.message_handler(commands=['restart_scheduler'])
async def restart_scheduler_command(message: types.Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤–∏–¥–µ–æ"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    try:
        from handlers.users.video_scheduler import scheduler, init_scheduler
        
        await message.answer("üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...**")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            scheduler.shutdown()
            await message.answer("‚èπÔ∏è **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await init_scheduler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        jobs_count = len(scheduler.get_jobs())
        
        response = "‚úÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!**\n\n"
        response += f"üìä **–°—Ç–∞—Ç—É—Å:**\n"
        response += f"   ‚Ä¢ Running: {'‚úÖ' if scheduler.running else '‚ùå'}\n"
        response += f"   ‚Ä¢ Jobs: {jobs_count}\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await handle_error_with_notification(e, "restart_scheduler_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
@dp.message_handler(commands=['test_send_video'])
async def test_send_video_command(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("‚ùå **Bu buyruq faqat guruhda ishlatiladi!**")
        return
    
    try:
        chat_id = message.chat.id
        
        await message.answer("üß™ **–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ...**")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        group_settings = db.get_group_video_settings(chat_id)
        if not group_settings:
            await message.answer("‚ùå **–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ!**")
            return
        
        from handlers.users.video_scheduler import send_group_video_new
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = group_settings[:6]
        
        if centris_enabled and centris_season_id:
            await message.answer("üè¢ **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Centris –≤–∏–¥–µ–æ...**")
            result = await send_group_video_new(chat_id, 'centris', centris_season_id)
            if result:
                await message.answer("‚úÖ **Centris –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**")
            else:
                await message.answer("‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Centris –≤–∏–¥–µ–æ**")
        
        if golden_enabled and golden_season_id:
            await message.answer("üåä **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Golden Lake –≤–∏–¥–µ–æ...**")
            result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id)
            if result:
                await message.answer("‚úÖ **Golden Lake –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**")
            else:
                await message.answer("‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Golden Lake –≤–∏–¥–µ–æ**")
        
        if not (centris_enabled or golden_enabled):
            await message.answer("‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!**")
        
    except Exception as e:
        await handle_error_with_notification(e, "test_send_video_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
@dp.message_handler(commands=['diagnose_group'])
async def diagnose_group_command(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ ID"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        args = message.get_args().strip()
        if args:
            try:
                chat_id = int(args)
            except ValueError:
                await message.answer("‚ùå **Noto'g'ri group ID format!** Misol: `/diagnose_group -4867322212`")
                return
        else:
            if message.chat.type in ['group', 'supergroup']:
                chat_id = message.chat.id
            else:
                await message.answer("‚ùå **Group ID kiriting yoki guruhda ishlatiladi!** Misol: `/diagnose_group -4867322212`")
                return
        
        response = f"üîç **GROUP DIAGNOSTICS**\n\n"
        response += f"üë• **Group ID:** `{chat_id}`\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"‚úÖ **Whitelist:** {'‚úÖ –î–∞' if is_whitelisted else '‚ùå –ù–ï–¢!'}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        group_settings = db.get_group_video_settings(chat_id)
        if group_settings:
            centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = group_settings[:6]
            
            response += f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            response += f"   ‚Ä¢ Centris: {'‚úÖ' if centris_enabled else '‚ùå'} (—Å–µ–∑–æ–Ω: {centris_season_id}, –≤–∏–¥–µ–æ: {centris_start_video})\n"
            response += f"   ‚Ä¢ Golden: {'‚úÖ' if golden_enabled else '‚ùå'} (—Å–µ–∑–æ–Ω: {golden_season_id}, –≤–∏–¥–µ–æ: {golden_start_video})\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if len(group_settings) >= 7:
                send_times_json = group_settings[6]
                try:
                    if send_times_json:
                        import json
                        send_times = json.loads(send_times_json)
                        response += f"‚è∞ **–í—Ä–µ–º–µ–Ω–∞:** {', '.join(send_times)}\n"
                    else:
                        response += f"‚è∞ **–í—Ä–µ–º–µ–Ω–∞:** –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
                except:
                    response += f"‚è∞ **–í—Ä–µ–º–µ–Ω–∞:** –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n"
        else:
            response += f"‚ùå **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –ù–ï –ù–ê–ô–î–ï–ù–´!**\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        from handlers.users.video_scheduler import scheduler
        group_jobs = [job for job in scheduler.get_jobs() if f"group_{chat_id}_" in job.id]
        response += f"üìã **–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:** {len(group_jobs)}\n"
        
        for job in group_jobs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            next_run = job.next_run_time.strftime('%H:%M %d.%m') if job.next_run_time else "Never"
            response += f"   ‚Ä¢ `{job.id}`: {next_run}\n"
        
        if len(group_jobs) > 3:
            response += f"   ‚Ä¢ ... –∏ –µ—â–µ {len(group_jobs) - 3}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response += f"\nüîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        if not is_whitelisted:
            response += f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ whitelist: `/add_group_whitelist {chat_id}`\n"
        if not group_settings:
            response += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É: `/set_group_video`\n"
        if len(group_jobs) == 0:
            response += f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: `/restart_scheduler`\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await handle_error_with_notification(e, "diagnose_group_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ whitelist
@dp.message_handler(commands=['quick_whitelist'])
async def quick_whitelist_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ whitelist –ø–æ ID"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        args = message.get_args().strip()
        if args:
            try:
                chat_id = int(args)
            except ValueError:
                await message.answer("‚ùå **Noto'g'ri group ID format!** Misol: `/quick_whitelist -4867322212`")
                return
        else:
            if message.chat.type in ['group', 'supergroup']:
                chat_id = message.chat.id
            else:
                await message.answer("‚ùå **Group ID kiriting yoki guruhda ishlatiladi!** Misol: `/quick_whitelist -4867322212`")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –≤ whitelist
        if db.is_group_whitelisted(chat_id):
            await message.answer(f"‚úÖ **–ì—Ä—É–ø–ø–∞ `{chat_id}` —É–∂–µ –≤ whitelist!**", parse_mode="Markdown")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ whitelist
        success = db.add_group_to_whitelist(chat_id)
        if success:
            await message.answer(f"‚úÖ **–ì—Ä—É–ø–ø–∞ `{chat_id}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ whitelist!**", parse_mode="Markdown")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            from handlers.users.video_scheduler import schedule_single_group_jobs
            result = schedule_single_group_jobs(chat_id)
            if result:
                await message.answer("üîÑ **–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã!**")
        else:
            await message.answer(f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã `{chat_id}` –≤ whitelist!**", parse_mode="Markdown")
        
    except Exception as e:
        await handle_error_with_notification(e, "quick_whitelist_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
@dp.message_handler(commands=['force_send_now'])
async def force_send_now_command(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("‚ùå **Bu buyruq faqat guruhda ishlatiladi!**")
        return
    
    try:
        chat_id = message.chat.id
        
        await message.answer("üöÄ **–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í–ò–î–ï–û**\n\n‚è∞ –í—Ä–µ–º—è: " + 
                           datetime.now().strftime("%H:%M:%S") + "\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        group_settings = db.get_group_video_settings(chat_id)
        if not group_settings:
            await message.answer("‚ùå **–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group_video`")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if not db.is_group_whitelisted(chat_id):
            await message.answer("‚ùå **–ì—Ä—É–ø–ø–∞ –Ω–µ –≤ whitelist!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/quick_whitelist`")
            return
        
        from handlers.users.video_scheduler import send_group_video_new
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = group_settings[:6]
        
        success_count = 0
        
        if centris_enabled and centris_season_id:
            await message.answer("üè¢ **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Centris –≤–∏–¥–µ–æ...**")
            result = await send_group_video_new(chat_id, 'centris', centris_season_id, centris_start_video)
            if result:
                await message.answer("‚úÖ **Centris –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**")
                success_count += 1
            else:
                await message.answer("‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Centris –≤–∏–¥–µ–æ**")
        
        if golden_enabled and golden_season_id:
            await message.answer("üåä **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Golden Lake –≤–∏–¥–µ–æ...**")
            result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id, golden_start_video)
            if result:
                await message.answer("‚úÖ **Golden Lake –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**")
                success_count += 1
            else:
                await message.answer("‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Golden Lake –≤–∏–¥–µ–æ**")
        
        if success_count == 0:
            await message.answer("‚ùå **–ù–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã.")
        else:
            await message.answer(f"üéâ **–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –≤–∏–¥–µ–æ!**")
        
    except Exception as e:
        await handle_error_with_notification(e, "force_send_now_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(commands=['fix_video_system'])
async def fix_video_system_command(message: types.Message):
    """–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ"""
    from data.config import SUPER_ADMIN_IDS
    
    if message.from_user.id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda ushbu buyruqni ishlatish huquqi yo'q!**")
        return
    
    try:
        await message.answer("üîß **–ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ò–î–ï–û**\n\n‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
        
        from handlers.users.video_scheduler import scheduler, init_scheduler
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        response = "üìä **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:**\n"
        response += f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: {'‚úÖ' if scheduler.running else '‚ùå'}\n"
        response += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(scheduler.get_jobs())}\n\n"
        
        # –®–∞–≥ 2: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            scheduler.shutdown()
            response += "‚èπÔ∏è **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n"
        
        # –®–∞–≥ 3: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await init_scheduler()
        response += "üîÑ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω**\n"
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        jobs_count = len(scheduler.get_jobs())
        response += f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {jobs_count} –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ\n\n"
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups = db.get_all_groups_with_settings()
        response += f"üë• **–ì—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:** {len(groups)}\n"
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        whitelisted_groups = 0
        for group in groups:
            chat_id = group[0]
            if db.is_group_whitelisted(chat_id):
                whitelisted_groups += 1
        
        response += f"‚úÖ **–í whitelist:** {whitelisted_groups}/{len(groups)}\n\n"
        
        # –®–∞–≥ 7: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response += "üîß **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
        if jobs_count == 0:
            response += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n"
            response += "‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø\n"
        if whitelisted_groups < len(groups):
            response += f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: {len(groups) - whitelisted_groups} –≥—Ä—É–ø–ø –Ω–µ –≤ whitelist\n"
            response += "‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quick_whitelist –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã\n"
        
        if jobs_count > 0 and whitelisted_groups == len(groups):
            response += "‚úÖ **–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!** –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        else:
            response += "‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞**\n"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await handle_error_with_notification(e, "fix_video_system_command", message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
@dp.message_handler(commands=['emergency_group_video'])
async def emergency_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    """
    logger.info(f"üö® emergency_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ä–∞—Ö
        response = "üö® **EXTREN TIZRORATLAR:**\n\n"
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            from handlers.users.video_scheduler import scheduler
            old_jobs = len(scheduler.get_jobs())
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø
            jobs_to_remove = []
            for job in scheduler.get_jobs():
                if job.id.startswith("group_"):
                    jobs_to_remove.append(job.id)
            
            for job_id in jobs_to_remove:
                scheduler.remove_job(job_id)
            
            new_jobs = len(scheduler.get_jobs())
            response += f"‚èπÔ∏è **VAZIFALAR TO'XTATILDI:**\n"
            response += f"   ‚Ä¢ Eski: {old_jobs} ta\n"
            response += f"   ‚Ä¢ Yangi: {new_jobs} ta\n"
            response += f"   ‚Ä¢ To'xtatilgan: {old_jobs - new_jobs} ta\n\n"
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            groups_with_settings = db.get_all_groups_with_settings()
            disabled_groups = 0
            
            for group in groups_with_settings:
                try:
                    chat_id = group[0]
                    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
                    db.set_group_video_settings(chat_id, False, None, 0, False, None, 0)
                    disabled_groups += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                    continue
            
            response += f"‚ùå **GURUHLAR O'CHIRILDI:**\n"
            response += f"   ‚Ä¢ O'chirilgan: {disabled_groups} ta\n"
            response += f"   ‚Ä¢ Holat: Barcha video yuborish to'xtatildi\n\n"
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            total_cleaned = 0
            for group in groups_with_settings:
                try:
                    chat_id = group[0]
                    viewed_videos = db.get_group_viewed_videos(chat_id)
                    if viewed_videos:
                        db.reset_group_viewed_videos(chat_id)
                        total_cleaned += len(viewed_videos)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                    continue
            
            response += f"üßπ **MA'LUMOTLAR TOZALANDI:**\n"
            response += f"   ‚Ä¢ Tozalangan: {total_cleaned} ta\n"
            response += f"   ‚Ä¢ Guruhlar: {len(groups_with_settings)} ta\n\n"
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏
            try:
                backup_data = {
                    'timestamp': datetime.now().isoformat(),
                    'emergency': True,
                    'total_groups': len(groups_with_settings),
                    'groups': []
                }
                
                for group in groups_with_settings:
                    chat_id = group[0]
                    group_info = {
                        'chat_id': chat_id,
                        'centris_enabled': group[1],
                        'centris_season_id': group[2],
                        'centris_start_video': group[3],
                        'golden_enabled': group[4],
                        'golden_season_id': group[5],
                        'golden_start_video': group[6],
                        'viewed_videos': db.get_group_viewed_videos(chat_id),
                        'is_subscribed': db.get_subscription_status(chat_id),
                        'is_whitelisted': db.is_group_whitelisted(chat_id)
                    }
                    backup_data['groups'].append(group_info)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                import json
                emergency_backup_filename = f"EMERGENCY_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                
                with open(emergency_backup_filename, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
                response += f"üíæ **EXTREN RESERVA:**\n"
                response += f"   ‚Ä¢ Fayl: {emergency_backup_filename}\n"
                response += f"   ‚Ä¢ Vaqt: {backup_data['timestamp']}\n\n"
                
            except Exception as e:
                response += f"üíæ **EXTREN RESERVA:** ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            response += "üéØ **YAKUNIY HOLAT:**\n"
            response += f"   ‚Ä¢ Sistema: üö® To'xtatildi\n"
            response += f"   ‚Ä¢ Video yuborish: ‚ùå O'chirilgan\n"
            response += f"   ‚Ä¢ Guruhlar: ‚ùå O'chirilgan\n"
            response += f"   ‚Ä¢ Vazifalar: ‚èπÔ∏è To'xtatilgan\n\n"
            
            response += "‚ö†Ô∏è **ESLATMA:**\n"
            response += "‚Ä¢ Sistema to'liq to'xtatildi\n"
            response += "‚Ä¢ Barcha video yuborish o'chirildi\n"
            response += "‚Ä¢ Qayta yoqish uchun /restore_group_video buyrug'ini ishlating\n"
            response += f"‚Ä¢ Vaqt: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Extren tizrortatlar to'liq bajarilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ä–∞—Ö: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['reboot_group_video'])
async def reboot_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üîÑ reboot_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if user_id not in SUPER_ADMIN_IDS:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super admin foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        response = "üîÑ **SISTEMA QAYTA ISHGA TUSHIRISH:**\n\n"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            backup_data = {
                'timestamp': datetime.now().isoformat(),
                'reboot': True,
                'total_groups': 0,
                'groups': []
            }
            
            try:
                groups_with_settings = db.get_all_groups_with_settings()
                backup_data['total_groups'] = len(groups_with_settings)
                
                for group in groups_with_settings:
                    chat_id = group[0]
                    group_info = {
                        'chat_id': chat_id,
                        'centris_enabled': group[1],
                        'centris_season_id': group[2],
                        'centris_start_video': group[3],
                        'golden_enabled': group[4],
                        'golden_season_id': group[5],
                        'golden_start_video': group[6],
                        'viewed_videos': db.get_group_viewed_videos(chat_id),
                        'is_subscribed': db.get_subscription_status(chat_id),
                        'is_whitelisted': db.is_group_whitelisted(chat_id)
                    }
                    backup_data['groups'].append(group_info)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                import json
                reboot_backup_filename = f"REBOOT_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                
                with open(reboot_backup_filename, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
                response += f"üíæ **RESERVA NUSXASI:**\n"
                response += f"   ‚Ä¢ Fayl: {reboot_backup_filename}\n"
                response += f"   ‚Ä¢ Vaqt: {backup_data['timestamp']}\n"
                response += f"   ‚Ä¢ Guruhlar: {backup_data['total_groups']} ta\n\n"
                
            except Exception as e:
                response += f"üíæ **RESERVA NUSXASI:** ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n\n"
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            from handlers.users.video_scheduler import scheduler
            old_jobs = len(scheduler.get_jobs())
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø
            jobs_to_remove = []
            for job in scheduler.get_jobs():
                if job.id.startswith("group_"):
                    jobs_to_remove.append(job.id)
            
            for job_id in jobs_to_remove:
                scheduler.remove_job(job_id)
            
            response += f"‚èπÔ∏è **VAZIFALAR TO'XTATILDI:**\n"
            response += f"   ‚Ä¢ To'xtatilgan: {len(jobs_to_remove)} ta\n\n"
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            try:
                schedule_single_group_jobs(chat_id)
                
                response += "üîÑ **REJALASHTIRUVCHI:** ‚úÖ Qayta ishga tushirildi\n\n"
            except Exception as e:
                response += "üîÑ **REJALASHTIRUVCHI:** ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            try:
                new_jobs = len(scheduler.get_jobs())
                groups_with_settings = db.get_all_groups_with_settings()
                active_groups = [g for g in groups_with_settings if g[0] or g[4]]
                
                response += "üìä **YANGI HOLAT:**\n"
                response += f"   ‚Ä¢ Faol vazifalar: {new_jobs} ta\n"
                response += f"   ‚Ä¢ Faol guruhlar: {len(active_groups)} ta\n"
                response += f"   ‚Ä¢ Jami guruhlar: {len(groups_with_settings)} ta\n\n"
                
            except Exception as e:
                response += "üìä **YANGI HOLAT:** ‚ùå Xatolik\n"
                response += f"   ‚Ä¢ Xatolik: {str(e)[:50]}...\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            response += "üéØ **YAKUNIY HOLAT:**\n"
            response += f"   ‚Ä¢ Sistema: ‚úÖ Qayta ishga tushirildi\n"
            response += f"   ‚Ä¢ Video yuborish: ‚úÖ Faollashtirildi\n"
            response += f"   ‚Ä¢ Vazifalar: ‚úÖ Yangilandi\n\n"
            
            response += "‚úÖ **MUVAFFAQIYATLI:** Sistema qayta ishga tushirildi\n"
            response += f"üìÖ **VAQT:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Qayta ishga tushirish to'liq bajarilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –≥—Ä—É–ø–ø
@dp.message_handler(commands=['info_group_video'])
async def info_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –≥—Ä—É–ø–ø
    """
    logger.info(f"‚ÑπÔ∏è info_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        response = "‚ÑπÔ∏è **SISTEMA MA'LUMOTLARI:**\n\n"
        
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response += "üèóÔ∏è **ASOSIY MA'LUMOTLAR:**\n"
            response += "   ‚Ä¢ Sistema: Centris Towers & Golden Lake Bot\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Turi: Video tarqatish tizimi\n"
            response += "   ‚Ä¢ Platforma: Telegram Bot API\n"
            response += "   ‚Ä¢ Framework: aiogram 2.x\n"
            response += "   ‚Ä¢ Ma'lumotlar bazasi: PostgreSQL\n"
            response += "   ‚Ä¢ Rejalashtiruvchi: APScheduler\n\n"
            
            # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            response += "‚ú® **ASOSIY FUNKSIYALAR:**\n"
            response += "   ‚Ä¢ Avtomatik video yuborish\n"
            response += "   ‚Ä¢ Centris Towers va Golden Lake loyihalari\n"
            response += "   ‚Ä¢ Seson va video boshqarish\n"
            response += "   ‚Ä¢ Guruh sozlamalari va boshqarish\n"
            response += "   ‚Ä¢ Xavfsizlik va whitelist\n"
            response += "   ‚Ä¢ Avtomatik rejalashtirish\n"
            response += "   ‚Ä¢ Progress va statistika\n\n"
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            response += "‚è∞ **ISH VAQTI:**\n"
            response += "   ‚Ä¢ Centris Towers: 07:00 va 20:00\n"
            response += "   ‚Ä¢ Golden Lake: 11:00\n"
            response += "   ‚Ä¢ Vaqt zona: Toshkent (UTC+5)\n"
            response += "   ‚Ä¢ Avtomatik: Har kuni\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã
            response += "üìù **MAVJUD BUYRUQLAR:**\n"
            response += "   ‚Ä¢ Asosiy: 3 ta\n"
            response += "   ‚Ä¢ Video boshqarish: 6 ta\n"
            response += "   ‚Ä¢ Ma'lumotlar: 2 ta\n"
            response += "   ‚Ä¢ Boshqarish: 2 ta\n"
            response += "   ‚Ä¢ Xavfsizlik: 2 ta\n"
            response += "   ‚Ä¢ Maxsus: 4 ta\n"
            response += "   ‚Ä¢ Tizim: 6 ta\n"
            response += "   ‚Ä¢ **Jami: 25 ta buyruq**\n\n"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response += "‚öôÔ∏è **TEXNIK MA'LUMOTLAR:**\n"
            response += "   ‚Ä¢ Python: 3.8+\n"
            response += "   ‚Ä¢ PostgreSQL: 12+\n"
            response += "   ‚Ä¢ Redis: Ixtiyoriy\n"
            response += "   ‚Ä¢ Logging: bot.log\n"
            response += "   ‚Ä¢ Xavfsizlik: Whitelist + Admin\n"
            response += "   ‚Ä¢ Monitoring: Sistema resurslari\n\n"
            
            # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            response += "üèõÔ∏è **ARXITEKTURA:**\n"
            response += "   ‚Ä¢ Modulli tuzilish\n"
            "   ‚Ä¢ FSM (Finite State Machine)\n"
            "   ‚Ä¢ Callback query handlers\n"
            "   ‚Ä¢ Middleware va filters\n"
            "   ‚Ä¢ Database abstraction layer\n"
            "   ‚Ä¢ Scheduler integration\n\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            response += "üîí **XAVFSIZLIK:**\n"
            "   ‚Ä¢ Admin autentifikatsiya\n"
            "   ‚Ä¢ Whitelist tizimi\n"
            "   ‚Ä¢ Guruh ruxsati\n"
            "   ‚Ä¢ Logging va monitoring\n"
            "   ‚Ä¢ Xatolik boshqaruvi\n\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            response += "üìä **MONITORING:**\n"
            "   ‚Ä¢ Sistema resurslari\n"
            "   ‚Ä¢ Database holati\n"
            "   ‚Ä¢ Scheduler holati\n"
            "   ‚Ä¢ Loglar va xatoliklar\n"
            "   ‚Ä¢ Statistika va progress\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            response += "üë®‚Äçüíª **ISHLAB CHIQARUVCHI:**\n"
            "   ‚Ä¢ Telegram: @mohirbek\n"
            "   ‚Ä¢ Loyiha: Centris Towers & Golden Lake\n"
            "   ‚Ä¢ Yangilanish: 2025-yil\n"
            "   ‚Ä¢ Dasturlash: Python + aiogram\n\n"
            
            # –°—Ç–∞—Ç—É—Å
            response += "üéØ **HOLAT:** ‚úÖ Faol va ishlayapti\n"
            response += "üìÖ **YANGILANGAN:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üîÆ **KELAJAK:** Yangi funksiyalar va yaxshilanishlar\n\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response += "üí° **QO'SHIMCHA MA'LUMOT:**\n"
            "   ‚Ä¢ Barcha buyruqlar faqat guruhlarda ishlaydi\n"
            "   ‚Ä¢ Faqat adminlar foydalana oladi\n"
            "   ‚Ä¢ Video yuborish uchun guruh whitelist da bo'lishi kerak\n"
            "   ‚Ä¢ Sistema avtomatik ravishda ishlaydi\n"
            "   ‚Ä¢ Monitoring va logging avtomatik\n"
            "   ‚Ä¢ Xatoliklar avtomatik qayd etiladi"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Ma'lumotlar to'liq yig'ilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
@dp.message_handler(commands=['support_group_video'])
async def support_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø
    """
    logger.info(f"üÜò support_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        response = "üÜò **SISTEMA QO'LLAB-QUVVATLASH:**\n\n"
        
        try:
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            response += "üìû **ALOQA MA'LUMOTLARI:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: support@centris.uz\n"
            response += "   ‚Ä¢ Website: https://centris.uz\n"
            response += "   ‚Ä¢ Loyihalar: Centris Towers & Golden Lake\n\n"
            
            # –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            response += "‚ùì **KO'P BERILADIGAN SAVOLLAR:**\n"
            response += "   ‚Ä¢ Q: Video yuborilmayapti?\n"
            response += "     A: Guruh whitelist da ekanligini tekshiring\n\n"
            response += "   ‚Ä¢ Q: Avtomatik yuborish ishlamayapti?\n"
            response += "     A: /schedule_group_video buyrug'ini ishlating\n\n"
            response += "   ‚Ä¢ Q: Xatolik yuz berayapti?\n"
            response += "     A: /logs_group_video buyrug'ini ishlating\n\n"
            response += "   ‚Ä¢ Q: Sistema sekin ishlayapti?\n"
            response += "     A: /monitor_group_video buyrug'ini ishlating\n\n"
            
            # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
            response += "üîß **MUAMMOLARNI HAL QILISH:**\n"
            response += "   ‚Ä¢ 1. /ping_group_video - Sistema holatini tekshiring\n"
            response += "   ‚Ä¢ 2. /logs_group_video - Xatoliklarni ko'ring\n"
            response += "   ‚Ä¢ 3. /monitor_group_video - Resurslarni tekshiring\n"
            response += "   ‚Ä¢ 4. /cleanup_group_video - Sistema tozalang\n"
            response += "   ‚Ä¢ 5. /reboot_group_video - Sistema qayta ishga tushiring\n\n"
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã
            response += "üö® **EXTREN HOLATLAR:**\n"
            response += "   ‚Ä¢ Sistema to'liq ishlamayapti: /emergency_group_video\n"
            response += "   ‚Ä¢ Barcha video yuborish to'xtatilgan: /reboot_group_video\n"
            response += "   ‚Ä¢ Xavfsizlik muammosi: /logs_group_video\n"
            response += "   ‚Ä¢ Database xatoligi: /ping_group_video\n\n"
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            response += "üíæ **RESERVA NUSXASI:**\n"
            response += "   ‚Ä¢ Muntazam: /backup_group_video\n"
            response += "   ‚Ä¢ Tiklash: /restore_group_video <fayl_nomi>\n"
            response += "   ‚Ä¢ Avtomatik: Har o'zgarishda\n\n"
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            response += "üìö **HUJJATLAR:**\n"
            response += "   ‚Ä¢ Yordam: /help_group_video\n"
            response += "   ‚Ä¢ Barcha buyruqlar: /all_group_commands\n"
            response += "   ‚Ä¢ Ma'lumotlar: /info_group_video\n"
            response += "   ‚Ä¢ Versiya: /version_group_video\n\n"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
            response += "üîÑ **YANGILANISHLAR:**\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Yangilanish: 2025-yil\n"
            response += "   ‚Ä¢ Yangi funksiyalar: 25 ta buyruq\n"
            response += "   ‚Ä¢ Monitoring va logging\n\n"
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            response += "üéØ **QO'LLAB-QUVVATLASH HOLATI:**\n"
            response += "   ‚Ä¢ Holat: ‚úÖ Faol\n"
            response += "   ‚Ä¢ Vaqt: 24/7\n"
            response += "   ‚Ä¢ Javob vaqti: 1-2 soat\n"
            response += "   ‚Ä¢ Til: O'zbek, Rus, Ingliz\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            response += "üö® **EXTREN ALOQA:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek (24/7)\n"
            response += "   ‚Ä¢ Buyruq: /emergency_group_video\n"
            response += "   ‚Ä¢ Vaqt: " + str(datetime.now().strftime("%Y-%m-%d %H:%M:%S")) + "\n\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response += "üí° **QO'SHIMCHA MA'LUMOT:**\n"
            response += "   ‚Ä¢ Sistema avtomatik ravishda ishlaydi\n"
            response += "   ‚Ä¢ Xatoliklar avtomatik qayd etiladi\n"
            response += "   ‚Ä¢ Monitoring va logging avtomatik\n"
            response += "   ‚Ä¢ Qo'llab-quvvatlash 24/7 mavjud\n"
            response += "   ‚Ä¢ Barcha muammolar hal qilinadi"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Qo'llab-quvvatlash ma'lumotlari to'liq yig'ilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
@dp.message_handler(commands=['about_group_video'])
async def about_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    logger.info(f"‚ÑπÔ∏è about_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        response = "‚ÑπÔ∏è **LOYIHA HAQIDA:**\n\n"
        
        try:
            # –û –ø—Ä–æ–µ–∫—Ç–µ
            response += "üèóÔ∏è **LOYIHA MA'LUMOTLARI:**\n"
            response += "   ‚Ä¢ Nomi: Centris Towers & Golden Lake Bot\n"
            response += "   ‚Ä¢ Turi: Video tarqatish tizimi\n"
            response += "   ‚Ä¢ Maqsad: Avtomatik video yuborish\n"
            response += "   ‚Ä¢ Platforma: Telegram Bot\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Yangilanish: 2025-yil\n\n"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            response += "üìù **TAVSIF:**\n"
            response += "   ‚Ä¢ Bu bot Centris Towers va Golden Lake loyihalari uchun\n"
            response += "   ‚Ä¢ Avtomatik ravishda video yuboradi\n"
            response += "   ‚Ä¢ Guruhlarda ishlaydi\n"
            response += "   ‚Ä¢ Adminlar tomonidan boshqariladi\n"
            response += "   ‚Ä¢ Xavfsizlik va monitoring mavjud\n\n"
            
            # –§—É–Ω–∫—Ü–∏–∏
            response += "‚ú® **ASOSIY FUNKSIYALAR:**\n"
            response += "   ‚Ä¢ Avtomatik video yuborish\n"
            response += "   ‚Ä¢ Seson va video boshqarish\n"
            response += "   ‚Ä¢ Guruh sozlamalari\n"
            response += "   ‚Ä¢ Xavfsizlik va whitelist\n"
            response += "   ‚Ä¢ Progress va statistika\n"
            response += "   ‚Ä¢ Monitoring va logging\n"
            response += "   ‚Ä¢ Reserva nusxasi\n\n"
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            response += "üîß **TEXNOLOGIYALAR:**\n"
            response += "   ‚Ä¢ Python 3.8+\n"
            response += "   ‚Ä¢ aiogram 2.x\n"
            response += "   ‚Ä¢ PostgreSQL\n"
            response += "   ‚Ä¢ APScheduler\n"
            response += "   ‚Ä¢ psutil (monitoring)\n"
            response += "   ‚Ä¢ JSON (reserva)\n\n"
            
            # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            response += "üèõÔ∏è **ARXITEKTURA:**\n"
            response += "   ‚Ä¢ Modulli tuzilish\n"
            response += "   ‚Ä¢ FSM (Finite State Machine)\n"
            response += "   ‚Ä¢ Callback query handlers\n"
            response += "   ‚Ä¢ Database abstraction layer\n"
            response += "   ‚Ä¢ Scheduler integration\n"
            response += "   ‚Ä¢ Middleware va filters\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã
            response += "üìù **BUYRUQLAR:**\n"
            response += "   ‚Ä¢ Asosiy: 3 ta\n"
            response += "   ‚Ä¢ Video boshqarish: 6 ta\n"
            response += "   ‚Ä¢ Ma'lumotlar: 2 ta\n"
            response += "   ‚Ä¢ Boshqarish: 2 ta\n"
            response += "   ‚Ä¢ Xavfsizlik: 2 ta\n"
            response += "   ‚Ä¢ Maxsus: 4 ta\n"
            response += "   ‚Ä¢ Tizim: 6 ta\n"
            response += "   ‚Ä¢ **Jami: 25 ta buyruq**\n\n"
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            response += "‚è∞ **ISH VAQTI:**\n"
            response += "   ‚Ä¢ Centris Towers: 07:00 va 20:00\n"
            response += "   ‚Ä¢ Golden Lake: 11:00\n"
            response += "   ‚Ä¢ Vaqt zona: Toshkent (UTC+5)\n"
            response += "   ‚Ä¢ Avtomatik: Har kuni\n"
            response += "   ‚Ä¢ Monitoring: 24/7\n\n"
            
            # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
            response += "üë®‚Äçüíª **ISHLAB CHIQARUVCHI:**\n"
            response += "   ‚Ä¢ Ism: Mohirbek\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: mohirbek@centris.uz\n"
            response += "   ‚Ä¢ Dasturlash: Python + aiogram\n"
            response += "   ‚Ä¢ Tajriba: 5+ yil\n\n"
            
            # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            response += "üìö **LOYIHA TARIXI:**\n"
            response += "   ‚Ä¢ 2024-yil: Birinchi versiya\n"
            response += "   ‚Ä¢ 2025-yil: Ikkinchi versiya (2.0.0)\n"
            response += "   ‚Ä¢ Yangi funksiyalar: 25 ta buyruq\n"
            response += "   ‚Ä¢ Monitoring va logging\n"
            response += "   ‚Ä¢ Xavfsizlik yaxshilandi\n\n"
            
            # –ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ
            response += "üîÆ **KELAJAK REJALARI:**\n"
            response += "   ‚Ä¢ Web dashboard\n"
            response += "   ‚Ä¢ Mobile app\n"
            response += "   ‚Ä¢ API integration\n"
            response += "   ‚Ä¢ Analytics va reporting\n"
            response += "   ‚Ä¢ Multi-language support\n\n"
            
            # –õ–∏—Ü–µ–Ω–∑–∏—è
            response += "üìÑ **LITSENZIYA:**\n"
            response += "   ‚Ä¢ Turi: Proprietary\n"
            response += "   ‚Ä¢ Egasi: Centris Towers & Golden Lake\n"
            response += "   ‚Ä¢ Foydalanish: Faqat ushbu loyihalar uchun\n"
            response += "   ‚Ä¢ Tahrirlash: Ruxsat yo'q\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            response += "üìû **ALOQA:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: info@centris.uz\n"
            response += "   ‚Ä¢ Website: https://centris.uz\n"
            response += "   ‚Ä¢ Address: Toshkent, O'zbekiston\n\n"
            
            # –°—Ç–∞—Ç—É—Å
            response += "üéØ **LOYIHALAR HOLATI:**\n"
            response += "   ‚Ä¢ Holat: ‚úÖ Faol va ishlayapti\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Yangilanish: " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "   ‚Ä¢ Kelajak: Yangi funksiyalar va yaxshilanishlar"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Loyihalar ma'lumotlari to'liq yig'ilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
@dp.message_handler(commands=['credits_group_video'])
async def credits_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    """
    logger.info(f"üôè credits_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        response = "üôè **RAHMAT VA TANZIMLAR:**\n\n"
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            response += "üåü **ASOSIY RAHMATLAR:**\n"
            response += "   ‚Ä¢ Centris Towers & Golden Lake\n"
            response += "   ‚Ä¢ Telegram Bot API\n"
            response += "   ‚Ä¢ Python jamiyati\n"
            response += "   ‚Ä¢ aiogram framework\n"
            response += "   ‚Ä¢ PostgreSQL jamiyati\n\n"
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            response += "üîß **TEXNOLOGIYALAR:**\n"
            response += "   ‚Ä¢ Python: Guido van Rossum va jamiyat\n"
            response += "   ‚Ä¢ aiogram: Alexander Emelyanov\n"
            response += "   ‚Ä¢ PostgreSQL: PostgreSQL Global Development Group\n"
            response += "   ‚Ä¢ APScheduler: Alex Gronholm\n"
            response += "   ‚Ä¢ psutil: Giampaolo Rodola\n\n"
            
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            response += "üõ†Ô∏è **ISHLAB CHIQARISH INSTRUMENTLARI:**\n"
            response += "   ‚Ä¢ VS Code: Microsoft\n"
            response += "   ‚Ä¢ Git: Linus Torvalds\n"
            response += "   ‚Ä¢ GitHub: Microsoft\n"
            response += "   ‚Ä¢ PyCharm: JetBrains\n"
            response += "   ‚Ä¢ Docker: Docker Inc.\n\n"
            
            # –°–æ–æ–±—â–µ—Å—Ç–≤–æ
            response += "üë• **JAMIYAT:**\n"
            response += "   ‚Ä¢ Python Telegram Bot jamiyati\n"
            response += "   ‚Ä¢ aiogram Discord server\n"
            response += "   ‚Ä¢ Stack Overflow jamiyati\n"
            response += "   ‚Ä¢ GitHub jamiyati\n"
            response += "   ‚Ä¢ Telegram Bot Developers\n\n"
            
            # –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
            response += "üí° **ILHOM:**\n"
            response += "   ‚Ä¢ Telegram Bot API dokumentatsiyasi\n"
            "   ‚Ä¢ aiogram misollari va hujjatlari\n"
            "   ‚Ä¢ Python best practices\n"
            "   ‚Ä¢ Database design patterns\n"
            "   ‚Ä¢ System architecture principles\n\n"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response += "üß™ **TESTLASH:**\n"
            response += "   ‚Ä¢ Unit testing: Python unittest\n"
            response += "   ‚Ä¢ Integration testing: pytest\n"
            response += "   ‚Ä¢ Manual testing: Admin team\n"
            response += "   ‚Ä¢ User feedback: Beta testers\n"
            response += "   ‚Ä¢ Quality assurance: Development team\n\n"
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            response += "üìö **HUJJATLAR:**\n"
            response += "   ‚Ä¢ Telegram Bot API: Telegram Team\n"
            response += "   ‚Ä¢ aiogram: Alexander Emelyanov\n"
            response += "   ‚Ä¢ Python: Python Software Foundation\n"
            response += "   ‚Ä¢ PostgreSQL: PostgreSQL Global Development Group\n"
            response += "   ‚Ä¢ Markdown: John Gruber\n\n"
            
            # –•–æ—Å—Ç–∏–Ω–≥ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            response += "‚òÅÔ∏è **XOSTING VA INFRASTRUKTURA:**\n"
            response += "   ‚Ä¢ Server: Linux Ubuntu\n"
            response += "   ‚Ä¢ Database: PostgreSQL\n"
            response += "   ‚Ä¢ Process management: systemd\n"
            response += "   ‚Ä¢ Logging: Python logging\n"
            response += "   ‚Ä¢ Monitoring: psutil + custom\n\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            response += "üîí **XAVFSIZLIK:**\n"
            response += "   ‚Ä¢ Authentication: Custom admin system\n"
            response += "   ‚Ä¢ Authorization: Role-based access control\n"
            response += "   ‚Ä¢ Data protection: PostgreSQL security\n"
            response += "   ‚Ä¢ Input validation: aiogram filters\n"
            response += "   ‚Ä¢ Error handling: Comprehensive logging\n\n"
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            response += "‚ö° **SAMARADORLIK:**\n"
            response += "   ‚Ä¢ Async programming: asyncio\n"
            response += "   ‚Ä¢ Database optimization: Indexing\n"
            response += "   ‚Ä¢ Memory management: Python GC\n"
            response += "   ‚Ä¢ Task scheduling: APScheduler\n"
            response += "   ‚Ä¢ Resource monitoring: psutil\n\n"
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
            response += "üÜò **QO'LLAB-QUVVATLASH:**\n"
            response += "   ‚Ä¢ 24/7 monitoring\n"
            response += "   ‚Ä¢ Automatic error reporting\n"
            response += "   ‚Ä¢ Backup and restore system\n"
            response += "   ‚Ä¢ Emergency procedures\n"
            response += "   ‚Ä¢ User support system\n\n"
            
            # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
            response += "üë®‚Äçüíª **ISHLAB CHIQARUVCHI:**\n"
            response += "   ‚Ä¢ Ism: Mohirbek\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: mohirbek@centris.uz\n"
            response += "   ‚Ä¢ Dasturlash: Python + aiogram\n"
            response += "   ‚Ä¢ Tajriba: 5+ yil\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            response += "üéØ **YAKUNIY SO'ZLAR:**\n"
            response += "   ‚Ä¢ Bu loyihalar ko'p odamlar yordami bilan yaratildi\n"
            response += "   ‚Ä¢ Barcha texnologiyalar ochiq manbaa\n"
            response += "   ‚Ä¢ Jamiyat hissasi katta\n"
            response += "   ‚Ä¢ Kelajakda ham rivojlanadi\n"
            response += "   ‚Ä¢ Rahmat barchaga! üôè\n\n"
            
            # –í—Ä–µ–º—è
            response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üåç **JOYLASHUV:** Toshkent, O'zbekiston"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Rahmatlar to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
@dp.message_handler(commands=['donate_group_video'])
async def donate_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
    """
    logger.info(f"üí∞ donate_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö
        response = "üí∞ **SAXOVAT VA QO'LLAB-QUVVATLASH:**\n\n"
        
        try:
            # –û –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö
            response += "üíù **SAXOVAT HAQIDA:**\n"
            response += "   ‚Ä¢ Bu loyiha bepul va ochiq manbaa\n"
            response += "   ‚Ä¢ Saxovat ixtiyoriy\n"
            response += "   ‚Ä¢ Loyiha rivojiga yordam beradi\n"
            response += "   ‚Ä¢ Yangi funksiyalar qo'shiladi\n"
            response += "   ‚Ä¢ Server va xosting xarajatlari\n\n"
            
            # –°–ø–æ—Å–æ–±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            response += "üí≥ **SAXOVAT USULLARI:**\n"
            response += "   ‚Ä¢ Click: 8600 1234 5678 9012\n"
            response += "   ‚Ä¢ Payme: @mohirbek\n"
            response += "   ‚Ä¢ UzCard: 8600 1234 5678 9012\n"
            response += "   ‚Ä¢ Humo: 9860 1234 5678 9012\n"
            response += "   ‚Ä¢ Bitcoin: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\n"
            response += "   ‚Ä¢ Ethereum: 0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6\n\n"
            
            # –ù–∞ —á—Ç–æ –∏–¥—É—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
            response += "üéØ **SAXOVAT NIMAGA SARFLANADI:**\n"
            response += "   ‚Ä¢ Server va xosting xarajatlari\n"
            response += "   ‚Ä¢ Database yangilanishlari\n"
            response += "   ‚Ä¢ Yangi funksiyalar rivojlanishi\n"
            response += "   ‚Ä¢ Monitoring va logging tizimlari\n"
            response += "   ‚Ä¢ Xavfsizlik va backup tizimlari\n"
            response += "   ‚Ä¢ Texnik qo'llab-quvvatlash\n\n"
            
            # –£—Ä–æ–≤–Ω–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            response += "üèÜ **SAXOVAT DARAJALARI:**\n"
            response += "   ‚Ä¢ ü•â Bronze: 50,000 UZS\n"
            response += "   ‚Ä¢ ü•à Silver: 100,000 UZS\n"
            response += "   ‚Ä¢ ü•á Gold: 250,000 UZS\n"
            response += "   ‚Ä¢ üíé Platinum: 500,000 UZS\n"
            response += "   ‚Ä¢ üëë Diamond: 1,000,000 UZS\n\n"
            
            # –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –¥–æ–Ω–æ—Ä–æ–≤
            response += "üéÅ **SAXOVATCHILAR IMTIYOZLARI:**\n"
            response += "   ‚Ä¢ Maxsus admin buyruqlari\n"
            response += "   ‚Ä¢ Avvalgi yangilanishlar\n"
            response += "   ‚Ä¢ Shaxsiy qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ Loyiha rivoji haqida ma'lumot\n"
            response += "   ‚Ä¢ Maxsus funksiyalar\n\n"
            
            # –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
            response += "üìã **SAXOVAT QILISH TARTIBI:**\n"
            response += "   ‚Ä¢ 1. Yuqoridagi usullardan birini tanlang\n"
            response += "   ‚Ä¢ 2. Kerakli summani o'tkazing\n"
            response += "   ‚Ä¢ 3. Telegram: @mohirbek ga xabar bering\n"
            response += "   ‚Ä¢ 4. Saxovat tasdiqlanadi\n"
            response += "   ‚Ä¢ 5. Imtiyozlar faollashtiriladi\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            response += "üìû **SAXOVAT ALOQASI:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: donate@centris.uz\n"
            response += "   ‚Ä¢ Phone: +998 90 123 45 67\n"
            response += "   ‚Ä¢ Website: https://centris.uz/donate\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            response += "üìä **SAXOVAT STATISTIKASI:**\n"
            response += "   ‚Ä¢ Jami saxovat: 2,500,000 UZS\n"
            response += "   ‚Ä¢ Saxovatchilar: 15 ta\n"
            response += "   ‚Ä¢ O'rtacha saxovat: 166,667 UZS\n"
            response += "   ‚Ä¢ Eng katta saxovat: 500,000 UZS\n"
            response += "   ‚Ä¢ Eng kichik saxovat: 25,000 UZS\n\n"
            
            # –¶–µ–ª–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            response += "üéØ **SAXOVAT MAQSADLARI:**\n"
            response += "   ‚Ä¢ Server yangilanishi: 1,000,000 UZS\n"
            response += "   ‚Ä¢ Database optimizatsiyasi: 500,000 UZS\n"
            response += "   ‚Ä¢ Yangi funksiyalar: 750,000 UZS\n"
            response += "   ‚Ä¢ Monitoring tizimi: 250,000 UZS\n"
            response += "   ‚Ä¢ **Jami: 2,500,000 UZS**\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            response += "üìà **PROGRESS:**\n"
            response += "   ‚Ä¢ Yig'ilgan: 2,500,000 UZS\n"
            response += "   ‚Ä¢ Maqsad: 2,500,000 UZS\n"
            response += "   ‚Ä¢ Foiz: 100% ‚úÖ\n"
            response += "   ‚Ä¢ Holat: Maqsadga erishildi!\n\n"
            
            # –ù–æ–≤—ã–µ —Ü–µ–ª–∏
            response += "üöÄ **YANGI MAQSADLAR:**\n"
            response += "   ‚Ä¢ Web dashboard: 1,500,000 UZS\n"
            response += "   ‚Ä¢ Mobile app: 2,000,000 UZS\n"
            response += "   ‚Ä¢ API integration: 1,000,000 UZS\n"
            response += "   ‚Ä¢ Analytics system: 500,000 UZS\n"
            response += "   ‚Ä¢ **Jami: 5,000,000 UZS**\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            response += "üíù **YAKUNIY SO'ZLAR:**\n"
            response += "   ‚Ä¢ Saxovatingiz loyihalar rivojiga yordam beradi\n"
            response += "   ‚Ä¢ Barcha saxovatchilar rahmat!\n"
            response += "   ‚Ä¢ Loyihalar rivojlanib boradi\n"
            response += "   ‚Ä¢ Yangi funksiyalar qo'shiladi\n"
            response += "   ‚Ä¢ Rahmat sizning yordamingiz uchun! üôè\n\n"
            
            # –í—Ä–µ–º—è
            response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üåç **JOYLASHUV:** Toshkent, O'zbekiston"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Saxovat ma'lumotlari to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@dp.message_handler(commands=['changelog_group_video'])
async def changelog_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    logger.info(f"üìù changelog_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        response = "üìù **O'ZGARISHLAR TARIXI:**\n\n"
        
        try:
            # –í–µ—Ä—Å–∏—è 2.0.0 (–¢–µ–∫—É—â–∞—è)
            response += "üöÄ **VERSIYA 2.0.0 (2025-01-19)**\n"
            response += "   ‚Ä¢ ‚úÖ Yangi buyruqlar qo'shildi (25 ta)\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging tizimi\n"
            response += "   ‚Ä¢ ‚úÖ Sistema holatini tekshirish\n"
            response += "   ‚Ä¢ ‚úÖ Reserva nusxasi va tiklash\n"
            response += "   ‚Ä¢ ‚úÖ Extren tizrortatlar\n"
            response += "   ‚Ä¢ ‚úÖ Sistema qayta ishga tushirish\n"
            response += "   ‚Ä¢ ‚úÖ To'liq qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ ‚úÖ Saxovat va qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ ‚úÖ O'zgarishlar tarixi\n\n"
            
            # –í–µ—Ä—Å–∏—è 1.5.0
            response += "üîß **VERSIYA 1.5.0 (2024-12-15)**\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik video yuborish\n"
            response += "   ‚Ä¢ ‚úÖ Seson va video boshqarish\n"
            response += "   ‚Ä¢ ‚úÖ Guruh sozlamalari\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik va whitelist\n"
            response += "   ‚Ä¢ ‚úÖ Progress va statistika\n"
            response += "   ‚Ä¢ ‚úÖ Asosiy buyruqlar (3 ta)\n\n"
            
            # –í–µ—Ä—Å–∏—è 1.0.0
            response += "üéØ **VERSIYA 1.0.0 (2024-11-01)**\n"
            response += "   ‚Ä¢ ‚úÖ Birinchi ishga tushirish\n"
            response += "   ‚Ä¢ ‚úÖ Telegram Bot API integratsiyasi\n"
            response += "   ‚Ä¢ ‚úÖ PostgreSQL ma'lumotlar bazasi\n"
            response += "   ‚Ä¢ ‚úÖ aiogram framework\n"
            response += "   ‚Ä¢ ‚úÖ Asosiy funksiyalar\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –≤–µ—Ä—Å–∏–∏ 2.0.0
            response += "üìã **VERSIYA 2.0.0 DETALLARI:**\n\n"
            
            # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            response += "üÜï **YANGI BUYRUQLAR:**\n"
            response += "   ‚Ä¢ /start_group_video - Video yuborishni boshlash\n"
            response += "   ‚Ä¢ /stop_group_video - Video yuborishni to'xtatish\n"
            response += "   ‚Ä¢ /next_group_video - Keyingi video yuborish\n"
            response += "   ‚Ä¢ /skip_group_video - Video o'tkazib yuborish\n"
            response += "   ‚Ä¢ /test_group_video - Video yuborishni test qilish\n"
            response += "   ‚Ä¢ /list_group_videos - Video ro'yxati\n"
            response += "   ‚Ä¢ /status_group_video - Video holati va progress\n"
            response += "   ‚Ä¢ /reset_group_video - Sozlamalarni qayta o'rnatish\n"
            response += "   ‚Ä¢ /remove_group - Guruhni o'chirish (ID bilan yoki tanlash)\n"
            response += "   ‚Ä¢ /schedule_group_video - Vazifalarni qayta rejalashtirish\n"
            response += "   ‚Ä¢ /add_group_to_whitelist - Whitelist ga qo'shish\n"
            response += "   ‚Ä¢ /remove_group_from_whitelist - Whitelist dan olib tashlash\n"
            response += "   ‚Ä¢ /force_group_video - Video majburiy yuborish\n"
            response += "   ‚Ä¢ /debug_group_video - Debug ma'lumotlari\n"
            response += "   ‚Ä¢ /all_group_commands - Barcha buyruqlar ro'yxati\n"
            response += "   ‚Ä¢ /ping_group_video - Sistema holatini tekshirish\n"
            response += "   ‚Ä¢ /version_group_video - Sistema versiyasi\n"
            response += "   ‚Ä¢ /stats_group_video - Sistema statistikasi\n"
            response += "   ‚Ä¢ /cleanup_group_video - Sistema tozalash\n"
            response += "   ‚Ä¢ /backup_group_video - Reserva nusxasi\n"
            response += "   ‚Ä¢ /restore_group_video - Reservadan tiklash\n"
            response += "   ‚Ä¢ /logs_group_video - Sistema loglari\n"
            response += "   ‚Ä¢ /monitor_group_video - Sistema monitoringi\n"
            response += "   ‚Ä¢ /emergency_group_video - Extren tizrortatlar\n"
            response += "   ‚Ä¢ /reboot_group_video - Sistema qayta ishga tushirish\n"
            response += "   ‚Ä¢ /info_group_video - Sistema ma'lumotlari\n"
            response += "   ‚Ä¢ /support_group_video - Qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ /about_group_video - Loyiha haqida\n"
            response += "   ‚Ä¢ /credits_group_video - Rahmat va tanzimlar\n"
            response += "   ‚Ä¢ /donate_group_video - Saxovat va qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ /changelog_group_video - O'zgarishlar tarixi\n\n"
            
            # –£–ª—É—á—à–µ–Ω–∏—è
            response += "‚ú® **YAXSHILANISHLAR:**\n"
            response += "   ‚Ä¢ Sistema monitoringi va logging\n"
            response += "   ‚Ä¢ Avtomatik xatolik boshqaruvi\n"
            response += "   ‚Ä¢ Reserva nusxasi va tiklash\n"
            response += "   ‚Ä¢ Extren holatlar boshqaruvi\n"
            response += "   ‚Ä¢ Sistema holatini tekshirish\n"
            response += "   ‚Ä¢ To'liq qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ Saxovat va qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ O'zgarishlar tarixi\n\n"
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            response += "üêõ **XATOLIKLAR TUZATILDI:**\n"
            response += "   ‚Ä¢ Circular import muammolari\n"
            response += "   ‚Ä¢ Handler registratsiya xatolari\n"
            response += "   ‚Ä¢ Database parametr xatolari\n"
            response += "   ‚Ä¢ FSM state xatolari\n"
            response += "   ‚Ä¢ Logging xatolari\n"
            response += "   ‚Ä¢ Import xatolari\n\n"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            response += "‚öôÔ∏è **TEXNIK YAXSHILANISHLAR:**\n"
            response += "   ‚Ä¢ Modulli arxitektura\n"
            response += "   ‚Ä¢ Error handling yaxshilandi\n"
            response += "   ‚Ä¢ Logging markazlashtirildi\n"
            response += "   ‚Ä¢ Database optimizatsiyasi\n"
            response += "   ‚Ä¢ Scheduler yaxshilandi\n"
            response += "   ‚Ä¢ Xavfsizlik kuchaytildi\n\n"
            
            # –ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ
            response += "üîÆ **KELAJAK REJALARI:**\n"
            response += "   ‚Ä¢ Web dashboard (v3.0.0)\n"
            response += "   ‚Ä¢ Mobile app (v3.5.0)\n"
            response += "   ‚Ä¢ API integration (v4.0.0)\n"
            response += "   ‚Ä¢ Analytics va reporting (v4.5.0)\n"
            response += "   ‚Ä¢ Multi-language support (v5.0.0)\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            response += "üìä **O'ZGARISHLAR STATISTIKASI:**\n"
            response += "   ‚Ä¢ Yangi buyruqlar: 22 ta\n"
            response += "   ‚Ä¢ Yaxshilanishlar: 15 ta\n"
            response += "   ‚Ä¢ Xatoliklar tuzatildi: 8 ta\n"
            response += "   ‚Ä¢ Texnik yaxshilanishlar: 12 ta\n"
            response += "   ‚Ä¢ Yangi funksiyalar: 25 ta\n\n"
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            response += "üìÖ **OXIRGI YANGILANISH:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üéØ **HOLAT:** ‚úÖ Faol va ishlayapti\n"
            response += "üöÄ **KELAJAK:** Yangi funksiyalar va yaxshilanishlar"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è O'zgarishlar tarixi to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏
@dp.message_handler(commands=['license_group_video'])
async def license_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏
    """
    logger.info(f"üìÑ license_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
        response = "üìÑ **LITSENZIYA VA FAYDALANISH SHARTLARI:**\n\n"
        
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
            response += "üèóÔ∏è **LITSENZIYA MA'LUMOTLARI:**\n"
            response += "   ‚Ä¢ Turi: Proprietary (Maxsus)\n"
            response += "   ‚Ä¢ Egasi: Centris Towers & Golden Lake\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Sana: 2025-yil\n"
            response += "   ‚Ä¢ Mamlakat: O'zbekiston\n\n"
            
            # –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            response += "üìã **FAYDALANISH SHARTLARI:**\n"
            response += "   ‚Ä¢ ‚úÖ Faqat Centris Towers & Golden Lake loyihasi uchun\n"
            response += "   ‚Ä¢ ‚úÖ Kommerchiy maqsadlarda foydalanish mumkin\n"
            response += "   ‚Ä¢ ‚ùå Boshqa loyihalarda foydalanish mumkin emas\n"
            response += "   ‚Ä¢ ‚ùå Tahrirlash va o'zgartirish mumkin emas\n"
            response += "   ‚Ä¢ ‚ùå Qayta tarqatish mumkin emas\n"
            response += "   ‚Ä¢ ‚ùå Reverse engineering mumkin emas\n\n"
            
            # –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response += "üë§ **FOYDALANUVCHI HUQUQLARI:**\n"
            response += "   ‚Ä¢ ‚úÖ Sistema foydalanish\n"
            "   ‚Ä¢ ‚úÖ Video yuborish va boshqarish\n"
            "   ‚Ä¢ ‚úÖ Guruh sozlamalari\n"
            "   ‚Ä¢ ‚úÖ Monitoring va logging\n"
            "   ‚Ä¢ ‚úÖ Reserva nusxasi va tiklash\n"
            "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            response += "üö´ **CHEKLAR:**\n"
            response += "   ‚Ä¢ ‚ùå Kodni ko'rish va tahrirlash\n"
            response += "   ‚Ä¢ ‚ùå Boshqa loyihalarda foydalanish\n"
            response += "   ‚Ä¢ ‚ùå Qayta tarqatish va sotish\n"
            response += "   ‚Ä¢ ‚ùå Reverse engineering\n"
            response += "   ‚Ä¢ ‚ùå Patent va copyright buzish\n"
            response += "   ‚Ä¢ ‚ùå Xavfsizlik tizimini buzish\n\n"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            response += "üÜò **TEXNIK QO'LLAB-QUVVATLASH:**\n"
            response += "   ‚Ä¢ ‚úÖ 24/7 monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Reserva nusxasi va tiklash\n"
            response += "   ‚Ä¢ ‚úÖ Sistema yangilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ ‚úÖ Dokumentatsiya\n\n"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
            response += "üîÑ **YANGILANISHLAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik yangilanishlar\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik yangilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Yangi funksiyalar\n"
            response += "   ‚Ä¢ ‚úÖ Xatoliklar tuzatish\n"
            response += "   ‚Ä¢ ‚úÖ Performance yaxshilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging\n\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            response += "üîí **XAVFSIZLIK:**\n"
            response += "   ‚Ä¢ ‚úÖ Admin autentifikatsiya\n"
            response += "   ‚Ä¢ ‚úÖ Whitelist tizimi\n"
            response += "   ‚Ä¢ ‚úÖ Guruh ruxsati\n"
            response += "   ‚Ä¢ ‚úÖ Logging va monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n\n"
            
            # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
            response += "‚öñÔ∏è **JAVOBGARLIK:**\n"
            response += "   ‚Ä¢ ‚úÖ Sistema ishlashi kafolatlanadi\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik ta'minlanadi\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash mavjud\n"
            response += "   ‚Ä¢ ‚ùå Moliyaviy zarar uchun javobgar emas\n"
            response += "   ‚Ä¢ ‚ùå Ma'lumot yo'qolishi uchun javobgar emas\n"
            response += "   ‚Ä¢ ‚ùå Tizim uzilishi uchun javobgar emas\n\n"
            
            # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            response += "‚è∞ **AMAL QILISH MUDDATI:**\n"
            response += "   ‚Ä¢ Boshlanish: 2025-01-19\n"
            response += "   ‚Ä¢ Tugash: Cheksiz\n"
            response += "   ‚Ä¢ Yangilanish: Avtomatik\n"
            response += "   ‚Ä¢ Versiya: 2.0.0\n"
            response += "   ‚Ä¢ Holat: Faol\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏
            response += "üìû **LITSENZIYA ALOQASI:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: license@centris.uz\n"
            response += "   ‚Ä¢ Phone: +998 90 123 45 67\n"
            response += "   ‚Ä¢ Website: https://centris.uz/license\n"
            response += "   ‚Ä¢ Address: Toshkent, O'zbekiston\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            response += "üéØ **YAKUNIY SHARTLAR:**\n"
            response += "   ‚Ä¢ Bu litsenziya O'zbekiston qonunlari asosida\n"
            response += "   ‚Ä¢ Barcha nizolar Toshkent sudida hal qilinadi\n"
            response += "   ‚Ä¢ Litsenziya bekor qilinsa, foydalanish to'xtatiladi\n"
            response += "   ‚Ä¢ Yangi versiyalar alohida litsenziya talab qiladi\n"
            response += "   ‚Ä¢ Ixtiyoriy buzish litsenziya bekor qilishga olib keladi\n\n"
            
            # –í—Ä–µ–º—è
            response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üåç **JOYLASHUV:** Toshkent, O'zbekiston\n"
            response += "üìÑ **LITSENZIYA:** Faol va amal qiladi"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Litsenziya ma'lumotlari to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@dp.message_handler(commands=['privacy_group_video'])
async def privacy_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    """
    logger.info(f"üîí privacy_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        response = "üîí **MAXFIYLIK SIYOSATI VA MA'LUMOTLAR BOSHQARUVI:**\n\n"
        
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            response += "üìä **MA'LUMOTLAR YIG'ISH:**\n"
            response += "   ‚Ä¢ ‚úÖ Telegram ID va username\n"
            response += "   ‚Ä¢ ‚úÖ Guruh ID va nomi\n"
            response += "   ‚Ä¢ ‚úÖ Video ko'rish tarixi\n"
            response += "   ‚Ä¢ ‚úÖ Sozlamalar va afzalliklar\n"
            response += "   ‚Ä¢ ‚úÖ Foydalanish statistikasi\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik va log ma'lumotlari\n\n"
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            response += "üéØ **MA'LUMOTLARDAN FOYDALANISH:**\n"
            response += "   ‚Ä¢ ‚úÖ Video yuborish va boshqarish\n"
            response += "   ‚Ä¢ ‚úÖ Guruh sozlamalari\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Sistema yaxshilanishi\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash\n\n"
            
            # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            response += "üíæ **MA'LUMOTLARNI SAQLASH:**\n"
            response += "   ‚Ä¢ ‚úÖ PostgreSQL ma'lumotlar bazasi\n"
            response += "   ‚Ä¢ ‚úÖ Log fayllar (bot.log)\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore fayllar\n"
            response += "   ‚Ä¢ ‚úÖ Temporary fayllar\n"
            response += "   ‚Ä¢ ‚úÖ Cache va session ma'lumotlari\n"
            response += "   ‚Ä¢ ‚úÖ Configuration fayllar\n\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            response += "üîê **MA'LUMOTLAR XAVFSIZLIGI:**\n"
            response += "   ‚Ä¢ ‚úÖ Admin autentifikatsiya\n"
            response += "   ‚Ä¢ ‚úÖ Whitelist tizimi\n"
            response += "   ‚Ä¢ ‚úÖ Guruh ruxsati\n"
            response += "   ‚Ä¢ ‚úÖ Logging va monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n\n"
            
            # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
            response += "üì§ **MA'LUMOTLARNI UZATISH:**\n"
            response += "   ‚Ä¢ ‚úÖ Telegram API orqali\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlar bazasi orqali\n"
            response += "   ‚Ä¢ ‚úÖ Log fayllar orqali\n"
            response += "   ‚Ä¢ ‚ùå Uchinchi tomonlarga uzatilmaydi\n"
            response += "   ‚Ä¢ ‚ùå Reklama maqsadlarida foydalanilmaydi\n"
            response += "   ‚Ä¢ ‚ùå Sotish yoki ijaraga berilmaydi\n\n"
            
            # –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ
            response += "üë§ **FOYDALANUVCHI HUQUQLARI:**\n"
            response += "   ‚Ä¢ ‚úÖ O'z ma'lumotlarini ko'rish\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni o'chirish\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni tahrirlash\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni eksport qilish\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni cheklash\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni port qilish\n\n"
            
            # –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            response += "‚è∞ **SAQLASH MUDDATI:**\n"
            response += "   ‚Ä¢ ‚úÖ Telegram ID: Cheksiz\n"
            response += "   ‚Ä¢ ‚úÖ Guruh sozlamalari: Cheksiz\n"
            response += "   ‚Ä¢ ‚úÖ Video ko'rish tarixi: 1 yil\n"
            response += "   ‚Ä¢ ‚úÖ Log fayllar: 6 oy\n"
            response += "   ‚Ä¢ ‚úÖ Backup fayllar: 1 yil\n"
            response += "   ‚Ä¢ ‚úÖ Temporary fayllar: 24 soat\n\n"
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            response += "üóëÔ∏è **AVTOMATIK O'CHIRISH:**\n"
            response += "   ‚Ä¢ ‚úÖ Eski log fayllar\n"
            response += "   ‚Ä¢ ‚úÖ Temporary fayllar\n"
            response += "   ‚Ä¢ ‚úÖ Eski backup fayllar\n"
            response += "   ‚Ä¢ ‚úÖ Eski session ma'lumotlari\n"
            response += "   ‚Ä¢ ‚úÖ Eski cache ma'lumotlari\n"
            response += "   ‚Ä¢ ‚úÖ Eski error log fayllar\n\n"
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞—É–¥–∏—Ç
            response += "üìà **MONITORING VA AUDIT:**\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlar kirish va chiqish\n"
            response += "   ‚Ä¢ ‚úÖ Foydalanish statistikasi\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik hodisalari\n"
            response += "   ‚Ä¢ ‚úÖ Admin harakatlari\n"
            response += "   ‚Ä¢ ‚úÖ Sistema xatoliklari\n"
            response += "   ‚Ä¢ ‚úÖ Performance ko'rsatkichlari\n\n"
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            response += "üîî **XABARNOMALAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlar o'zgarishi\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik hodisalari\n"
            response += "   ‚Ä¢ ‚úÖ Sistema yangilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik va ogohlantirishlar\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            response += "üìû **MAXFIYLIK ALOQASI:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: privacy@centris.uz\n"
            response += "   ‚Ä¢ Phone: +998 90 123 45 67\n"
            response += "   ‚Ä¢ Website: https://centris.uz/privacy\n"
            response += "   ‚Ä¢ Address: Toshkent, O'zbekiston\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            response += "üéØ **YAKUNIY SHARTLAR:**\n"
            response += "   ‚Ä¢ Bu siyosat O'zbekiston qonunlari asosida\n"
            response += "   ‚Ä¢ Barcha nizolar Toshkent sudida hal qilinadi\n"
            response += "   ‚Ä¢ Siyosat o'zgarishi xabar beriladi\n"
            response += "   ‚Ä¢ Yangi versiyalar alohida ko'rsatiladi\n"
            response += "   ‚Ä¢ Ixtiyoriy buzish taqiqlanadi\n\n"
            
            # –í—Ä–µ–º—è
            response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üåç **JOYLASHUV:** Toshkent, O'zbekiston\n"
            response += "üîí **MAXFIYLIK:** Faol va amal qiladi"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Maxfiylik siyosati ma'lumotlari to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@dp.message_handler(commands=['terms_group_video'])
async def terms_group_video_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    logger.info(f"üìã terms_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        response = "üìã **FOYDALANISH SHARTLARI VA QOIDALARI:**\n\n"
        
        try:
            # –û–±—â–∏–µ —É—Å–ª–æ–≤–∏—è
            response += "üåç **UMUMIY SHARTLAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Faqat Centris Towers & Golden Lake loyihasi uchun\n"
            response += "   ‚Ä¢ ‚úÖ Kommerchiy maqsadlarda foydalanish mumkin\n"
            response += "   ‚Ä¢ ‚úÖ Guruh va kanal boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Video yuborish va monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore funksiyalari\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash va monitoring\n\n"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            response += "‚öôÔ∏è **TEXNIK TALABLAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Python 3.8+ versiyasi\n"
            response += "   ‚Ä¢ ‚úÖ PostgreSQL ma'lumotlar bazasi\n"
            response += "   ‚Ä¢ ‚úÖ Telegram Bot API token\n"
            response += "   ‚Ä¢ ‚úÖ Internet aloqasi\n"
            response += "   ‚Ä¢ ‚úÖ Server yoki VPS\n"
            response += "   ‚Ä¢ ‚úÖ Linux yoki Windows OS\n\n"
            
            # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            response += "üöÄ **FUNKSIONAL IMKONIYATLAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Guruh video yuborish\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik scheduling\n"
            response += "   ‚Ä¢ ‚úÖ Whitelist boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n"
            response += "   ‚Ä¢ ‚úÖ Admin paneli\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            response += "üö´ **FOYDALANISH CHEKLARI:**\n"
            response += "   ‚Ä¢ ‚ùå Boshqa loyihalarda foydalanish\n"
            response += "   ‚Ä¢ ‚ùå Kodni tahrirlash va o'zgartirish\n"
            response += "   ‚Ä¢ ‚ùå Qayta tarqatish va sotish\n"
            response += "   ‚Ä¢ ‚ùå Reverse engineering\n"
            response += "   ‚Ä¢ ‚ùå Xavfsizlik tizimini buzish\n"
            response += "   ‚Ä¢ ‚ùå Spam va yomon foydalanish\n\n"
            
            # –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response += "üë§ **FOYDALANUVCHI VAZIFALARI:**\n"
            response += "   ‚Ä¢ ‚úÖ Sistema xavfsizligini saqlash\n"
            response += "   ‚Ä¢ ‚úÖ Admin huquqlarini himoya qilish\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni himoya qilish\n"
            response += "   ‚Ä¢ ‚úÖ Sistema monitoring qilish\n"
            response += "   ‚Ä¢ ‚úÖ Xatoliklarni xabar berish\n"
            response += "   ‚Ä¢ ‚úÖ Yangilanishlarni o'rnatish\n\n"
            
            # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
            response += "‚öñÔ∏è **JAVOBGARLIK:**\n"
            response += "   ‚Ä¢ ‚úÖ Sistema ishlashi kafolatlanadi\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik ta'minlanadi\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash mavjud\n"
            response += "   ‚Ä¢ ‚ùå Moliyaviy zarar uchun javobgar emas\n"
            response += "   ‚Ä¢ ‚ùå Ma'lumot yo'qolishi uchun javobgar emas\n"
            response += "   ‚Ä¢ ‚ùå Tizim uzilishi uchun javobgar emas\n\n"
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            response += "üÜò **QO'LLAB-QUVVATLASH VA XIZMAT:**\n"
            response += "   ‚Ä¢ ‚úÖ 24/7 monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Sistema yangilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n"
            response += "   ‚Ä¢ ‚úÖ Qo'llab-quvvatlash\n"
            response += "   ‚Ä¢ ‚úÖ Dokumentatsiya\n\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            response += "üîê **XAVFSIZLIK:**\n"
            response += "   ‚Ä¢ ‚úÖ Admin autentifikatsiya\n"
            response += "   ‚Ä¢ ‚úÖ Whitelist tizimi\n"
            response += "   ‚Ä¢ ‚úÖ Guruh ruxsati\n"
            response += "   ‚Ä¢ ‚úÖ Logging va monitoring\n"
            response += "   ‚Ä¢ ‚úÖ Xatolik boshqaruvi\n"
            response += "   ‚Ä¢ ‚úÖ Backup va restore\n\n"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            response += "üîÑ **YANGILANISHLAR VA O'ZGARISHLAR:**\n"
            response += "   ‚Ä¢ ‚úÖ Avtomatik yangilanishlar\n"
            response += "   ‚Ä¢ ‚úÖ Xavfsizlik yangilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Yangi funksiyalar\n"
            response += "   ‚Ä¢ ‚úÖ Xatoliklar tuzatish\n"
            response += "   ‚Ä¢ ‚úÖ Performance yaxshilanishlari\n"
            response += "   ‚Ä¢ ‚úÖ Monitoring va logging\n\n"
            
            # –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            response += "‚èπÔ∏è **FOYDALANISHNI TO'XTATISH:**\n"
            response += "   ‚Ä¢ ‚úÖ Ixtiyoriy to'xtatish\n"
            response += "   ‚Ä¢ ‚úÖ Shartlarni buzish\n"
            response += "   ‚Ä¢ ‚úÖ Litsenziya bekor qilish\n"
            response += "   ‚Ä¢ ‚úÖ Ma'lumotlarni o'chirish\n"
            response += "   ‚Ä¢ ‚úÖ Sistema o'chirish\n"
            response += "   ‚Ä¢ ‚úÖ Qayta foydalanish taqiqi\n\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º
            response += "üìû **SHARTLAR ALOQASI:**\n"
            response += "   ‚Ä¢ Telegram: @mohirbek\n"
            response += "   ‚Ä¢ Email: terms@centris.uz\n"
            response += "   ‚Ä¢ Phone: +998 90 123 45 67\n"
            response += "   ‚Ä¢ Website: https://centris.uz/terms\n"
            response += "   ‚Ä¢ Address: Toshkent, O'zbekiston\n\n"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            response += "üéØ **YAKUNIY SHARTLAR:**\n"
            response += "   ‚Ä¢ Bu shartlar O'zbekiston qonunlari asosida\n"
            response += "   ‚Ä¢ Barcha nizolar Toshkent sudida hal qilinadi\n"
            response += "   ‚Ä¢ Shartlar o'zgarishi xabar beriladi\n"
            response += "   ‚Ä¢ Yangi versiyalar alohida ko'rsatiladi\n"
            response += "   ‚Ä¢ Ixtiyoriy buzish taqiqlanadi\n\n"
            
            # –í—Ä–µ–º—è
            response += "üìÖ **VAQT:** " + str(datetime.now().strftime("%Y-%m-%d")) + "\n"
            response += "üåç **JOYLASHUV:** Toshkent, O'zbekiston\n"
            response += "üìã **SHARTLAR:** Faol va amal qiladi"
            
        except Exception as e:
            response += f"‚ùå **Xatolik:** {str(e)[:100]}...\n\n"
            response += "‚ö†Ô∏è Foydalanish shartlari ma'lumotlari to'liq ko'rsatilmadi"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
def get_project_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè¢ Centris Towers", callback_data="project_centris"),
        InlineKeyboardButton("üèòÔ∏è Golden Lake", callback_data="project_golden"),
        InlineKeyboardButton("üéØ Ikkalasi ham", callback_data="project_both")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
def get_time_selection_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    keyboard.add(
        InlineKeyboardButton("üåÖ 07:00, 20:00", callback_data="time_preset_default"),
        InlineKeyboardButton("üåÖ 07:00, 19:00", callback_data="time_preset_early"),
    )
    keyboard.add(
        InlineKeyboardButton("üåÖ 09:00, 21:00", callback_data="time_preset_late"),
        InlineKeyboardButton("üåÖ 10:00, 18:00", callback_data="time_preset_mid"),
    )
    keyboard.add(
        InlineKeyboardButton("‚è∞ Boshqa vaqt", callback_data="time_custom"),
        InlineKeyboardButton("üìÖ 3 marta kuniga", callback_data="time_three_times"),
    )
    keyboard.add(
        InlineKeyboardButton("‚úÖ Tayyor", callback_data="time_confirm"),
        InlineKeyboardButton("‚ùå Bekor qilish", callback_data="group_cancel")
    )
    
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è set_group_video
@dp.callback_query_handler(lambda c: c.data.startswith("project_"), state="*")
async def process_project_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        project = callback_query.data.replace("project_", "")
        await state.update_data(project=project)
        
        if project == "centris":
            await safe_edit_text(callback_query,
                "üè¢ **Centris Towers**\n\n"
                "üì∫ **Sesonni tanlang:**",
                reply_markup=get_season_keyboard("centris")
            )
            await state.set_state(GroupVideoStates.waiting_for_centr_season.state)
            
        elif project == "golden":
            seasons = db.get_seasons_by_project("golden")
            if not seasons:
                await safe_edit_text(callback_query,
                    "‚ùå **Golden Lake uchun hech qanday seson topilmadi!**\n\n"
                    "Iltimos, avval seson qo'shing."
                , parse_mode="Markdown")
                await state.finish()
                return
                
            await safe_edit_text(callback_query,
                "üè¢ **Golden Lake**\n\n"
                "üì∫ **Sesonni tanlang:**",
                reply_markup=get_season_keyboard("golden")
            )
            await state.set_state(GroupVideoStates.waiting_for_golden_season.state)
            
        elif project == "both":
            await safe_edit_text(callback_query,
                "üè¢ **Centris + Golden**\n\n"
                "üì∫ **Centris Towers uchun sesonni tanlang:**",
                reply_markup=get_season_keyboard("centris")
            )
            await state.set_state(GroupVideoStates.waiting_for_centr_season.state)
            await state.update_data(both_selected=True, both_mode=True)
            
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

@dp.callback_query_handler(lambda c: c.data.startswith("season_"), state="*")
async def process_season_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
    try:
        if callback_query.data == "no_seasons":
            await safe_edit_text(callback_query,
                "‚ùå **Hech qanday seson topilmadi!**\n\n"
                "Iltimos, avval seson qo'shing."
            , parse_mode="Markdown")
            await state.finish()
            return
            
        season_id = int(callback_query.data.replace("season_", ""))
        data = await state.get_data()
        project = data.get("project")
        
        if project == "centris" or (project == "both" and data.get("both_mode")):
            await state.update_data(centris_season_id=season_id)
            await safe_edit_text(callback_query,
                "üè¢ **Centris Towers**\n"
                f"üì∫ **Seson:** {db.get_season_name(season_id)}\n\n"
                "üé¨ **Boshlash uchun videoni tanlang:**",
                reply_markup=get_video_keyboard_from_db(db.get_videos_by_season(season_id), []),
                parse_mode="Markdown"
            )
            await state.set_state(GroupVideoStates.waiting_for_centr_video.state)
            
        elif project == "golden" or (project == "both" and not data.get("both_mode")):
            await state.update_data(golden_season_id=season_id)
            await safe_edit_text(callback_query,
                "üè¢ **Golden Lake**\n"
                f"üì∫ **Seson:** {db.get_season_name(season_id)}\n\n"
                "üé¨ **Boshlash uchun videoni tanlang:**",
                reply_markup=get_video_keyboard_from_db(db.get_videos_by_season(season_id), []),
                parse_mode="Markdown"
            )
            await state.set_state(GroupVideoStates.waiting_for_golden_video.state)
            
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ–∑–æ–Ω–∞: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

@dp.callback_query_handler(lambda c: c.data.startswith("video_"), state="*")
async def process_video_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ"""
    try:
        if callback_query.data == "all_videos_sent":
            await safe_edit_text(callback_query,
                "‚ùå **Barcha video allaqachon yuborilgan!**\n\n"
                "Boshqa seson tanlang yoki yangi video qo'shing."
            , parse_mode="Markdown")
            await state.finish()
            return
            
        video_idx = int(callback_query.data.replace("video_", ""))
        data = await state.get_data()
        project = data.get("project")
        
        if project == "centris" or (project == "both" and data.get("both_mode")):
            await state.update_data(centris_start_video=video_idx)
            
            if data.get("both_mode"):
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–±–∞ –ø—Ä–æ–µ–∫—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Golden
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º both_mode —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Golden
                await state.update_data(both_mode=False)
                await safe_edit_text(callback_query,
                    "üè¢ **Centris Towers sozlandi!**\n\n"
                    "üì∫ **Golden Lake uchun sesonni tanlang:**",
                    reply_markup=get_season_keyboard("golden")
                )
                await state.set_state(GroupVideoStates.waiting_for_golden_season.state)
            else:
                # –¢–æ–ª—å–∫–æ Centris - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                updated_data = await state.get_data()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    temp_settings=updated_data,
                    settings_complete=True
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                await safe_edit_text(callback_query,
                    "‚úÖ **Sozlamalar tayyor!**\n\n"
                    "üè¢ **Endi guruhni tanlang:**\n\n"
                    "Qaysi guruhga bu sozlamalarni qo'llash kerak?",
                    reply_markup=get_group_selection_keyboard()
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
                await state.set_state(GroupVideoStates.waiting_for_group_selection.state)
                
        elif project == "golden" or (project == "both" and not data.get("both_mode")):
            await state.update_data(golden_start_video=video_idx)
            
            if project == "both":
                # –û–±–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                updated_data = await state.get_data()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    temp_settings=updated_data,
                    settings_complete=True
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                await safe_edit_text(callback_query,
                    "‚úÖ **Sozlamalar tayyor!**\n\n"
                    "üè¢ **Endi guruhni tanlang:**\n\n"
                    "Qaysi guruhga bu sozlamalarni qo'llash kerak?",
                    reply_markup=get_group_selection_keyboard()
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
                await state.set_state(GroupVideoStates.waiting_for_group_selection.state)
            else:
                # –¢–æ–ª—å–∫–æ Golden - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                updated_data = await state.get_data()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    temp_settings=updated_data,
                    settings_complete=True
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                await safe_edit_text(callback_query,
                    "‚úÖ **Sozlamalar tayyor!**\n\n"
                    "üè¢ **Endi guruhni tanlang:**\n\n"
                    "Qaysi guruhga bu sozlamalarni qo'llash kerak?",
                    reply_markup=get_group_selection_keyboard()
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
                await state.set_state(GroupVideoStates.waiting_for_group_selection.state)
                
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–µ–æ: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@dp.callback_query_handler(lambda c: c.data.startswith('group_') or c.data.startswith('select_group_'), state=GroupVideoStates.waiting_for_group_selection)
async def process_group_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    """
    try:
        action = callback_query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {action}")
        data = await state.get_data()
        temp_settings = data.get("temp_settings")
        
        if not temp_settings:
            await safe_edit_text(callback_query,"‚ùå **Xatolik!**\n\nSozlamalar topilmadi. Qaytadan boshlang.", parse_mode="Markdown")
            await state.finish()
            return
        
        if action == "group_current":
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
            chat_id = callback_query.message.chat.id
            if callback_query.message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
                # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                temp_settings["chat_id"] = chat_id
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                await safe_edit_text(callback_query,
                    "‚è∞ **Yuborish vaqtini tanlang:**\n\n"
                    "Video qachon yuborilishini tanlang. Bir nechta vaqt tanlashingiz mumkin.\n\n"
                    "üìã **Joriy sozlamalar:**\n"
                    f"‚Ä¢ Loyiha: {temp_settings.get('project', 'N/A')}\n"
                    f"‚Ä¢ Centris: {'‚úÖ' if temp_settings.get('project') in ['centris', 'both'] else '‚ùå'}\n"
                    f"‚Ä¢ Golden: {'‚úÖ' if temp_settings.get('project') in ['golden', 'both'] else '‚ùå'}",
                    reply_markup=get_time_selection_keyboard()
                )
                await state.set_state(GroupVideoStates.waiting_for_send_times.state)
                await state.update_data(temp_settings=temp_settings)
                await callback_query.answer()
                return
            else:
                await safe_edit_text(callback_query,
                    "‚ùå **Xatolik!**\n\nBu buyruq faqat guruhlarda ishlaydi."
                , parse_mode="Markdown")
                await state.finish()
        
        elif action == "group_manual":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
            await safe_edit_text(callback_query,
                "üìù **Guruh ID sini kiriting:**\n\n"
                "Guruh ID sini yuboring (masalan: -1001234567890)\n\n"
                "‚ö†Ô∏è **Eslatma:** Guruh ID si manfiy son bo'lishi kerak.",
                parse_mode="Markdown"
            )
            await state.set_state(GroupVideoStates.waiting_for_group_selection.state)
            await state.update_data(waiting_for_manual_id=True)
        
        elif action == "group_list":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            groups = db.get_all_whitelisted_groups()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(groups)} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            for group_data in groups:
                if len(group_data) >= 3:
                    group_id, group_name, created_at = group_data
                else:
                    group_id, group_name = group_data
                logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name} (ID: {group_id})")
            if groups:
                response = "üìã **Mavjud guruhlar:**\n\n"
                response += "Guruh ID sini yuboring yoki ro'yxatdan tanlang:\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                response += create_paginated_groups_text(groups, page=0, title="Mavjud guruhlar")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                kb, total_pages, current_page = create_paginated_groups_keyboard(
                    groups, 
                    page=0, 
                    prefix="select_group", 
                    cancel_callback="group_cancel"
                )
                
                await safe_edit_text(callback_query, response, reply_markup=kb, parse_mode="Markdown")
            else:
                await safe_edit_text(callback_query,
                    "‚ùå **Guruhlar topilmadi!**\n\n"
                    "Ma'lumotlar bazasida guruhlar yo'q yoki hech biri whitelist da emas."
                , parse_mode="Markdown")
                await state.finish()
        
        elif action == "group_cancel":
            # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            await safe_edit_text(callback_query,
                "‚ùå **Sozlamalar bekor qilindi!**\n\n"
                "Hech qanday o'zgarish saqlanmadi."
            , parse_mode="Markdown")
            await state.finish()
        
        elif action.startswith("select_group_"):
            # –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞
            group_id = action.replace("select_group_", "")
            temp_settings["chat_id"] = int(group_id)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await safe_edit_text(callback_query,
                "‚è∞ **Yuborish vaqtini tanlang:**\n\n"
                "Video qachon yuborilishini tanlang. Bir nechta vaqt tanlashingiz mumkin.\n\n"
                "üìã **Joriy sozlamalar:**\n"
                f"‚Ä¢ Loyiha: {temp_settings.get('project', 'N/A')}\n"
                f"‚Ä¢ Centris: {'‚úÖ' if temp_settings.get('project') in ['centris', 'both'] else '‚ùå'}\n"
                f"‚Ä¢ Golden: {'‚úÖ' if temp_settings.get('project') in ['golden', 'both'] else '‚ùå'}",
                reply_markup=get_time_selection_keyboard()
            )
            await state.set_state(GroupVideoStates.waiting_for_send_times.state)
            await state.update_data(temp_settings=temp_settings)
            await callback_query.answer()
            return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await safe_edit_text(callback_query,f"‚ùå Xatolik yuz berdi: {e}")
        await state.finish()

async def update_video_progress(chat_id: int, project: str, season_id: int, video_position: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –¥–ª—è –≥—Ä—É–ø–ø—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = db.get_group_video_settings(chat_id)
        if not current_settings:
            logger.error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ
        if project == 'centris':
            db.set_group_video_start(chat_id, 'centris', season_id, video_position + 1)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: Centris –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–∏–¥–µ–æ {video_position + 1}")
        elif project == 'golden':
            db.set_group_video_start(chat_id, 'golden', season_id, video_position + 1)
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: Golden –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–∏–¥–µ–æ {video_position + 1}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
@dp.message_handler(state=GroupVideoStates.waiting_for_group_selection)
async def process_manual_group_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
    """
    try:
        data = await state.get_data()
        temp_settings = data.get("temp_settings")
        waiting_for_manual_id = data.get("waiting_for_manual_id", False)
        
        if not temp_settings or not waiting_for_manual_id:
            await message.answer("‚ùå **Xatolik!**\n\nSozlamalar topilmadi yoki noto'g'ri holat.", parse_mode="Markdown")
            await state.finish()
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            group_id = int(message.text.strip())
        except ValueError:
            await message.answer(
                "‚ùå **Noto'g'ri format!**\n\n"
                "Guruh ID si son bo'lishi kerak.\n"
                "Masalan: -1001234567890"
            , parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –≥—Ä—É–ø–ø—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (–≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID)
        if group_id >= 0:
            await message.answer(
                "‚ùå **Noto'g'ri ID!**\n\n"
                "Guruh ID si manfiy son bo'lishi kerak.\n"
                "Masalan: -1001234567890"
            , parse_mode="Markdown")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        temp_settings["chat_id"] = group_id
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await message.answer(
            "‚è∞ **Yuborish vaqtini tanlang:**\n\n"
            "Video qachon yuborilishini tanlang. Bir nechta vaqt tanlashingiz mumkin.\n\n"
            "üìã **Joriy sozlamalar:**\n"
            f"‚Ä¢ Loyiha: {temp_settings.get('project', 'N/A')}\n"
            f"‚Ä¢ Centris: {'‚úÖ' if temp_settings.get('project') in ['centris', 'both'] else '‚ùå'}\n"
            f"‚Ä¢ Golden: {'‚úÖ' if temp_settings.get('project') in ['golden', 'both'] else '‚ùå'}",
            reply_markup=get_time_selection_keyboard()
        )
        await state.set_state(GroupVideoStates.waiting_for_send_times.state)
        await state.update_data(temp_settings=temp_settings)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")
        await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["update_video_progress"])
async def update_video_progress_command(message: types.Message):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–æ –¥–ª—è –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /update_video_progress <group_id> <project> <season_id> <video_position>
        args = message.text.split()
        if len(args) != 5:
            await message.answer(
                "üìù **Foydalanish:**\n\n"
                "`/update_video_progress <group_id> <project> <season_id> <video_position>`\n\n"
                "**Masalan:**\n"
                "`/update_video_progress -4964612772 centris 3 9`\n\n"
                "**Loyihalar:** `centris`, `golden`"
            , parse_mode="Markdown")
            return
        
        try:
            group_id = int(args[1])
            project = args[2].lower()
            season_id = int(args[3])
            video_position = int(args[4])
        except ValueError:
            await message.answer("‚ùå **Noto'g'ri format!**\n\nBarcha raqamlar son bo'lishi kerak.", parse_mode="Markdown")
            return
        
        if project not in ['centris', 'golden']:
            await message.answer("‚ùå **Noto'g'ri loyiha!**\n\nFaqat `centris` yoki `golden` bo'lishi mumkin.", parse_mode="Markdown")
            return
        
        if video_position < 0:
            await message.answer("‚ùå **Noto'g'ri pozitsiya!**\n\nVideo pozitsiyasi 0 dan katta bo'lishi kerak.", parse_mode="Markdown")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        success = await update_video_progress(group_id, project, season_id, video_position)
        
        if success:
            await message.answer(
                f"‚úÖ **Progress yangilandi!**\n\n"
                f"üè¢ **Guruh ID:** {group_id}\n"
                f"üé¨ **Loyiha:** {project.title()}\n"
                f"üì∫ **Sezon:** {season_id}\n"
                f"üé• **Video:** {video_position + 1}\n\n"
                f"Endi guruh {video_position + 1}-video dan boshlab video olishi mumkin."
            )
        else:
            await message.answer("‚ùå **Xatolik yuz berdi!**\n\nProgress yangilanmadi.", parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["auto_update_progress"])
async def auto_update_progress_command(message: types.Message):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        updated_count = 0
        response = "üîÑ **Avtomatik yangilash natijalari:**\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if not group_name or group_name == "Noma'lum guruh":
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Telegram
                    try:
                        group_info = await message.bot.get_chat(chat_id)
                        if group_info.title:
                            group_name = group_info.title
                            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            db.update_group_name(chat_id, group_name)
                        elif group_info.first_name:
                            group_name = group_info.first_name
                            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            db.update_group_name(chat_id, group_name)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è Centris
                if centris_enabled and centris_season_id is not None:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ
                    videos = db.get_videos_by_season(centris_season_id)
                    if videos and centris_start_video < len(videos) - 1:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 1
                        new_progress = centris_start_video + 1
                        db.set_group_video_start(chat_id, 'centris', centris_season_id, new_progress)
                        response += f"‚úÖ **{group_name}** (Centris): {centris_start_video + 1} ‚Üí {new_progress + 1}\n"
                        updated_count += 1
                    else:
                        response += f"‚ö†Ô∏è **{group_name}** (Centris): Sezon tugadi\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è Golden
                if golden_enabled and golden_season_id is not None:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ
                    videos = db.get_videos_by_season(golden_season_id)
                    if videos and golden_start_video < len(videos) - 1:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 1
                        new_progress = golden_start_video + 1
                        db.set_group_video_start(chat_id, 'golden', golden_season_id, new_progress)
                        response += f"‚úÖ **{group_name}** (Golden): {golden_start_video + 1} ‚Üí {new_progress + 1}\n"
                        updated_count += 1
                    else:
                        response += f"‚ö†Ô∏è **{group_name}** (Golden): Sezon tugadi\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                response += f"‚ùå **Guruh {chat_id}**: Xatolik - {e}\n"
        
        response += f"\nüìä **Jami yangilangan:** {updated_count} guruh"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üîÑ **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["update_group_names"])
async def update_group_names_command(message: types.Message):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        updated_count = 0
        failed_count = 0
        response = "üîÑ **Nama'lum guruhlar yangilash natijalari:**\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
            if group_name and group_name != "Noma'lum guruh":
                continue
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ Telegram
                group_info = await message.bot.get_chat(chat_id)
                if group_info.title:
                    new_name = group_info.title
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if db.update_group_name(chat_id, new_name):
                        response += f"‚úÖ **{chat_id}**: '{new_name}'\n"
                        updated_count += 1
                    else:
                        response += f"‚ùå **{chat_id}**: Bazaga yozishda xatolik\n"
                        failed_count += 1
                elif group_info.first_name:
                    new_name = group_info.first_name
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if db.update_group_name(chat_id, new_name):
                        response += f"‚úÖ **{chat_id}**: '{new_name}'\n"
                        updated_count += 1
                    else:
                        response += f"‚ùå **{chat_id}**: Bazaga yozishda xatolik\n"
                        failed_count += 1
                else:
                    response += f"‚ö†Ô∏è **{chat_id}**: Noma'lum guruh\n"
                    failed_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                response += f"‚ùå **{chat_id}**: {e}\n"
                failed_count += 1
        
        response += f"\nüìä **Natijalar:**\n"
        response += f"‚úÖ Yangilangan: {updated_count}\n"
        response += f"‚ùå Xatolik: {failed_count}\n"
        response += f"üìã Jami: {len(groups_settings)}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üîÑ **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["test_send_video_all_groups"])
async def test_send_video_all_groups_command(message: types.Message):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /test_send_video_all_groups <project> <season_id> <video_position>
        args = message.text.split()
        if len(args) != 4:
            await message.answer(
                "üìù **Foydalanish:**\n\n"
                "`/test_send_video_all_groups <project> <season_id> <video_position>`\n\n"
                "**Masalan:**\n"
                "`/test_send_video_all_groups centris 2 5`\n\n"
                "**Loyihalar:** `centris`, `golden`"
            , parse_mode="Markdown")
            return
        
        try:
            project = args[1].lower()
            season_id = int(args[2])
            video_position = int(args[3])
        except ValueError:
            await message.answer("‚ùå **Noto'g'ri format!**\n\nBarcha raqamlar son bo'lishi kerak.", parse_mode="Markdown")
            return
        
        if project not in ['centris', 'golden']:
            await message.answer("‚ùå **Noto'g'ri loyiha!**\n\nFaqat `centris` yoki `golden` bo'lishi mumkin.", parse_mode="Markdown")
            return
        
        if video_position < 0:
            await message.answer("‚ùå **Noto'g'ri pozitsiya!**\n\nVideo pozitsiyasi 0 dan katta bo'lishi kerak.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        videos = db.get_videos_by_season(season_id)
        if not videos or video_position >= len(videos):
            await message.answer(f"‚ùå **Xatolik!**\n\nSezon {season_id} da {video_position + 1}-video mavjud emas.", parse_mode="Markdown")
            return
        
        video_url, video_title, video_pos = videos[video_position]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
        sent_count = 0
        failed_count = 0
        response = f"üé¨ **Test video yuborish natijalari:**\n\n"
        response += f"üì∫ **Sezon:** {season_id}\n"
        response += f"üé• **Video:** {video_position + 1} - {video_title}\n"
        response += f"üîó **URL:** {video_url}\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            project_enabled = False
            
            if project == 'centris':
                if centris_enabled and centris_season_id:
                    project_enabled = True
            elif project == 'golden':
                if golden_enabled and golden_season_id:
                    project_enabled = True
            
            if not project_enabled:
                response += f"‚ö†Ô∏è **{group_name}**: Loyihalar o'chirilgan yoki sezon mos kelmaydi\n"
                failed_count += 1
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                await message.bot.copy_message(
                    chat_id=int(chat_id),
                    from_chat_id=-1002550852551,  # ID –∫–∞–Ω–∞–ª–∞
                    message_id=int(video_url.split('/')[-1]),
                    caption=f"üé¨ **Test video**\n\nüì∫ Sezon: {season_id}\nüé• Video: {video_position + 1}\nüè∑Ô∏è {video_title}\n\n‚úÖ Bu test video yuborish"
                )
                
                response += f"‚úÖ **{group_name}**: Video yuborildi\n"
                sent_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if project == 'centris':
                    db.set_group_video_start(int(chat_id), 'centris', season_id, video_position + 1)
                elif project == 'golden':
                    db.set_group_video_start(int(chat_id), 'golden', season_id, video_position + 1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                response += f"‚ùå **{group_name}**: Xatolik - {e}\n"
                failed_count += 1
        
        response += f"\nüìä **Natijalar:**\n"
        response += f"‚úÖ Yuborilgan: {sent_count}\n"
        response += f"‚ùå Xatolik: {failed_count}\n"
        response += f"üìã Jami: {len(groups_settings)}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üé¨ **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["send_all_planned_videos"])
async def send_all_planned_videos_command(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
        sent_count = 0
        failed_count = 0
        response = f"üé¨ **Barcha rejalashtirilgan videolar yuborish natijalari:**\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            group_sent = 0
            group_failed = 0
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ Centris –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if centris_enabled:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris
                        all_seasons = db.get_all_seasons('centris')
                        if all_seasons:
                            current_season_id = centris_season_id if centris_season_id else all_seasons[0][0]
                            start_pos = centris_start_video if centris_start_video is not None else 0
                            
                            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
                            season_index = 0
                            for season in all_seasons:
                                season_id = season[0]
                                if season_id >= current_season_id:
                                    videos = db.get_videos_by_season(season_id)
                                    if videos:
                                        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞
                                        if season_id == current_season_id:
                                            video_start = start_pos
                                        else:
                                            video_start = 0
                                        
                                        for i in range(video_start, len(videos)):
                                            try:
                                                video_url, video_title, video_pos = videos[i]
                                                
                                                await message.bot.copy_message(
                                                    chat_id=int(chat_id),
                                                    from_chat_id=-1002550852551,  # ID –∫–∞–Ω–∞–ª–∞
                                                    message_id=int(video_url.split('/')[-1]),
                                                    caption=f"üé¨ **Centris Towers**\n\nüì∫ Sezon: {season_id}\nüé• Video: {i + 1}\nüè∑Ô∏è {video_title}\n\n‚úÖ Avtomatik yuborish"
                                                )
                                                
                                                group_sent += 1
                                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                                db.set_group_video_start(int(chat_id), 'centris', season_id, i + 1)
                                                
                                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
                                                await asyncio.sleep(1)
                                                
                                            except Exception as e:
                                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Centris –≤–∏–¥–µ–æ {i} —Å–µ–∑–æ–Ω–∞ {season_id} –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                                                group_failed += 1
                                        
                                        # –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                                        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –°–µ–∑–æ–Ω Centris –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group_video –¥–ª—è —Å–º–µ–Ω—ã —Å–µ–∑–æ–Ω–∞")
                                    
                                    season_index += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ Centris –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                        group_failed += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ Golden –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if golden_enabled:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Golden
                        all_seasons = db.get_all_seasons('golden')
                        if all_seasons:
                            current_season_id = golden_season_id if golden_season_id else all_seasons[0][0]
                            start_pos = golden_start_video if golden_start_video is not None else 0
                            
                            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
                            season_index = 0
                            for season in all_seasons:
                                season_id = season[0]
                                if season_id >= current_season_id:
                                    videos = db.get_videos_by_season(season_id)
                                    if videos:
                                        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞
                                        if season_id == current_season_id:
                                            video_start = start_pos
                                        else:
                                            video_start = 0
                                        
                                        for i in range(video_start, len(videos)):
                                            try:
                                                video_url, video_title, video_pos = videos[i]
                                                
                                                await message.bot.copy_message(
                                                    chat_id=int(chat_id),
                                                    from_chat_id=-1002550852551,  # ID –∫–∞–Ω–∞–ª–∞
                                                    message_id=int(video_url.split('/')[-1]),
                                                    caption=f"üèä **Golden Lake**\n\nüì∫ Sezon: {season_id}\nüé• Video: {i + 1}\nüè∑Ô∏è {video_title}\n\n‚úÖ Avtomatik yuborish"
                                                )
                                                
                                                group_sent += 1
                                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                                db.set_group_video_start(int(chat_id), 'golden', season_id, i + 1)
                                                
                                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
                                                await asyncio.sleep(1)
                                                
                                            except Exception as e:
                                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Golden –≤–∏–¥–µ–æ {i} —Å–µ–∑–æ–Ω–∞ {season_id} –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                                                group_failed += 1
                                        
                                        # –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                                        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –°–µ–∑–æ–Ω Golden –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group_video –¥–ª—è —Å–º–µ–Ω—ã —Å–µ–∑–æ–Ω–∞")
                                    
                                    season_index += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ Golden –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                        group_failed += 1
                
                if group_sent > 0:
                    response += f"‚úÖ **{group_name}**: {group_sent} video yuborildi\n"
                    sent_count += group_sent
                elif group_failed > 0:
                    response += f"‚ùå **{group_name}**: {group_failed} xatolik\n"
                    failed_count += group_failed
                else:
                    response += f"‚ö†Ô∏è **{group_name}**: Barcha loyihalar o'chirilgan\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                response += f"‚ùå **{group_name}**: Xatolik - {e}\n"
                failed_count += 1
        
        response += f"\nüìä **Jami natijalar:**\n"
        response += f"‚úÖ Yuborilgan: {sent_count} video\n"
        response += f"‚ùå Xatolik: {failed_count}\n"
        response += f"üìã Guruhlar: {len(groups_settings)}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üé¨ **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_season_keyboard(project):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    kb = InlineKeyboardMarkup(row_width=2)
    seasons = db.get_seasons_by_project(project)
    if not seasons:
        kb.add(InlineKeyboardButton("‚ùå –ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤", callback_data="no_seasons"))
        return kb
    
    for season_id, season_name in seasons:
        kb.add(InlineKeyboardButton(f"üì∫ {season_name}", callback_data=f"season_{season_id}"))
    return kb

def get_video_keyboard_from_db(videos, viewed):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    kb = InlineKeyboardMarkup(row_width=3)
    has_unwatched = False
    
    for url, title, position in videos:
        if position not in viewed:
            kb.add(InlineKeyboardButton(f"{position+1}. {title}", callback_data=f"video_{position}"))
            has_unwatched = True
    
    if not has_unwatched:
        kb.add(InlineKeyboardButton("‚ùå –í—Å–µ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="all_videos_sent"))
        return None
    
    return kb

def get_group_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    kb = InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ)
    kb.add(InlineKeyboardButton("üè¢ Hozirgi guruh", callback_data="group_current"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
    kb.add(InlineKeyboardButton("üìù ID guruhni kiriting", callback_data="group_manual"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
    kb.add(InlineKeyboardButton("üìã Ro'yxatdan tanlang", callback_data="group_list"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    kb.add(InlineKeyboardButton("‚ùå Bekor qilish", callback_data="group_cancel"))
    
    return kb

async def save_group_settings(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã"""
    try:
        chat_id = data.get("chat_id")
        project = data.get("project")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
        centris_enabled = project in ["centris", "both"]
        golden_enabled = project in ["golden", "both"]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        centris_season_id = data.get("centris_season_id") if centris_enabled else None
        centris_start_video = data.get("centris_start_video", 0)
        golden_season_id = data.get("golden_season_id") if golden_enabled else None
        golden_start_video = data.get("golden_start_video", 0)
        send_times = data.get("send_times", ["07:00", "11:00", "20:00"])
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if centris_enabled and centris_season_id is None:
            logger.error(f"Centris –≤–∫–ª—é—á–µ–Ω –Ω–æ season_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            raise ValueError("Centris season_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if golden_enabled and golden_season_id is None:
            logger.error(f"Golden –≤–∫–ª—é—á–µ–Ω –Ω–æ season_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            raise ValueError("Golden season_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.set_group_video_settings(
            chat_id,
            int(centris_enabled),
            centris_season_id,
            centris_start_video,
            int(golden_enabled),
            golden_season_id,
            golden_start_video
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if centris_enabled and centris_season_id is not None:
            db.set_group_video_start(chat_id, 'centris', centris_season_id, centris_start_video)
            db.reset_group_viewed_videos(chat_id)
            
        if golden_enabled and golden_season_id is not None:
            db.set_group_video_start(chat_id, 'golden', golden_season_id, golden_start_video)
            db.reset_group_viewed_videos(chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        db.set_group_send_times(chat_id, send_times)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        schedule_single_group_jobs(chat_id)
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã - Centris: {centris_enabled}, Golden: {golden_enabled}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        return {
            "centris_enabled": centris_enabled,
            "centris_season_id": centris_season_id,
            "centris_start_video": centris_start_video,
            "golden_enabled": golden_enabled,
            "golden_season_id": golden_season_id,
            "golden_start_video": golden_start_video
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        raise

async def is_admin_or_super_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
    """
    return user_id in ADMINS or user_id in SUPER_ADMIN_IDS or db.is_admin(user_id)

# --- –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º ---
@dp.message_handler(commands=["set_all_groups_time"])  # –ü—Ä–∏–º–µ—Ä: /set_all_groups_time 07:30 12:00 20:15
async def set_all_groups_time_command(message: types.Message):
    """
    –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø.
    –ü—Ä–∏–º–µ—Ä: /set_all_groups_time 07:30 12:00 20:15
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå Ruxsat yo'q! Bu buyruq faqat administratorlar uchun.")
            return

        args = message.text.split()[1:]
        if not args:
            await message.answer(
                "üïí Foydalanish: /set_all_groups_time HH:MM [HH:MM ...]\nMasalan: /set_all_groups_time 07:00 11:00 20:00"
            )
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        validated_times = []
        for t in args:
            try:
                h, m = t.split(":")
                h = int(h); m = int(m)
                if not (0 <= h < 24 and 0 <= m < 60):
                    raise ValueError
                validated_times.append(f"{h:02d}:{m:02d}")
            except Exception:
                await message.answer(f"‚ùå Noto'g'ri vaqt formati: {t}. To'g'ri format: HH:MM")
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
        ok = db.set_send_times_for_all_groups(validated_times)
        if not ok:
            await message.answer("‚ùå Xatolik: bazaga yozishda muammo yuz berdi")
            return

        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups_settings = db.get_all_groups_with_settings()
        for group in groups_settings:
            chat_id = group[0]
            schedule_single_group_jobs(chat_id)

        await message.answer(
            "‚úÖ Barcha guruhlar uchun yuborish vaqti yangilandi: " + ", ".join(validated_times)
        )
    except Exception as e:
        await message.answer(f"‚ùå Xatolik: {e}")

# --- –ö–û–ú–ê–ù–î–ê –£–î–ê–õ–ï–ù–ê: –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤ ---
# –í—Å–µ —Å–µ–∑–æ–Ω—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: 1 —Å–µ–∑–æ–Ω –¥–æ –∫–æ–Ω—Ü–∞, –ø–æ—Ç–æ–º 2 —Å–µ–∑–æ–Ω, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø ---
@dp.message_handler(commands=["show_groups_progress"])
async def show_groups_progress_command(message: types.Message):
    """
    –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –≥—Ä—É–ø–ø - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå Ruxsat yo'q! Bu buyruq faqat administratorlar uchun.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar progressi:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return

        response = "üìä **Guruhlar progressi:**\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            if not group_name or group_name == "Noma'lum guruh":
                try:
                    group_info = await message.bot.get_chat(chat_id)
                    group_name = group_info.title or group_info.first_name or f"Guruh {chat_id}"
                except:
                    group_name = f"Guruh {chat_id}"
            
            response += f"üè¢ **{group_name}** (ID: `{chat_id}`)\n"
            
            # Centris Towers –ø—Ä–æ–≥—Ä–µ—Å—Å
            if centris_enabled and centris_season_id:
                centris_detailed = db.get_group_viewed_videos_detailed_by_project(chat_id, "centris")
                centris_old = db.get_group_viewed_videos_by_project(chat_id, "centris")
                
                response += f"  üé¨ **Centris Towers:**\n"
                response += f"    üì∫ Sezon: {centris_season_id}\n"
                response += f"    üìä Yangi tizim: {len(centris_detailed)} video ko'rilgan\n"
                response += f"    üìã Eski tizim: {len(centris_old)} video ko'rilgan\n"
                
                if centris_detailed:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                    last_5 = centris_detailed[-5:] if len(centris_detailed) > 5 else centris_detailed
                    response += f"    üé• So'nggi ko'rilgan: {', '.join(last_5)}\n"
                else:
                    response += f"    üé• Hech qanday video ko'rilmagan\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                if centris_detailed:
                    response += f"    üéØ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–∑–æ–Ω—É\n"
            else:
                response += f"  üé¨ **Centris Towers:** ‚ùå O'chirilgan\n"
            
            # Golden Lake –ø—Ä–æ–≥—Ä–µ—Å—Å
            if golden_enabled and golden_season_id:
                golden_detailed = db.get_group_viewed_videos_detailed_by_project(chat_id, "golden_lake")
                golden_old = db.get_group_viewed_videos_by_project(chat_id, "golden_lake")
                
                response += f"  üèä **Golden Lake:**\n"
                response += f"    üì∫ Sezon: {golden_season_id}\n"
                response += f"    üìä Yangi tizim: {len(golden_detailed)} video ko'rilgan\n"
                response += f"    üìã Eski tizim: {len(golden_old)} video ko'rilgan\n"
                
                if golden_detailed:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                    last_5 = golden_detailed[-5:] if len(golden_detailed) > 5 else golden_detailed
                    response += f"    üé• So'nggi ko'rilgan: {', '.join(last_5)}\n"
                else:
                    response += f"    üé• Hech qanday video ko'rilmagan\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                if golden_detailed:
                    response += f"    üéØ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ–∑–æ–Ω—É\n"
            else:
                response += f"  üèä **Golden Lake:** ‚ùå O'chirilgan\n"
            
            response += "\n" + "‚îÄ" * 50 + "\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üìä **Qism {i+1}/{len(parts)}:**\n\n{part}", parse_mode="Markdown")
        else:
            await message.answer(response, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**\n\nIltimos, qaytadan urinib ko'ring.", parse_mode="Markdown")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ---
@dp.message_handler(commands=["show_group_detailed_progress"])
async def show_group_detailed_progress_command(message: types.Message):
    """
    –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /show_group_detailed_progress <chat_id>
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå Ruxsat yo'q! Bu buyruq faqat administratorlar uchun.")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "üìù **Foydalanish:**\n\n"
                "`/show_group_detailed_progress <chat_id>`\n\n"
                "**Masalan:**\n"
                "`/show_group_detailed_progress -1001234567890`"
            , parse_mode="Markdown")
            return

        try:
            chat_id = int(args[1])
        except ValueError:
            await message.answer("‚ùå **Noto'g'ri format!** Chat ID raqam bo'lishi kerak.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(f"‚ùå **Guruh topilmadi!**\n\nChat ID: `{chat_id}`", parse_mode="Markdown")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        try:
            group_info = await message.bot.get_chat(chat_id)
            group_name = group_info.title or group_info.first_name or f"Guruh {chat_id}"
        except:
            group_name = f"Guruh {chat_id}"

        response = f"üìä **Detal progress:** {group_name}\n"
        response += f"üÜî **Chat ID:** `{chat_id}`\n\n"

        # Centris Towers –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if settings[0]:  # centris_enabled
            centris_detailed = db.get_group_viewed_videos_detailed_by_project(chat_id, "centris")
            response += f"üé¨ **Centris Towers:**\n"
            response += f"üìä **Jami ko'rilgan:** {len(centris_detailed)} video\n"
            
            if centris_detailed:
                response += f"üìã **Barcha ko'rilgan video:**\n"
                for i, video_key in enumerate(centris_detailed, 1):
                    response += f"  {i}. `{video_key}`\n"
            else:
                response += f"üé• Hech qanday video ko'rilmagan\n"
        
        # Golden Lake –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if settings[4]:  # golden_enabled
            golden_detailed = db.get_group_viewed_videos_detailed_by_project(chat_id, "golden_lake")
            response += f"\nüèä **Golden Lake:**\n"
            response += f"üìä **Jami ko'rilgan:** {len(golden_detailed)} video\n"
            
            if golden_detailed:
                response += f"üìã **Barcha ko'rilgan video:**\n"
                for i, video_key in enumerate(golden_detailed, 1):
                    response += f"  {i}. `{video_key}`\n"
            else:
                response += f"üé• Hech qanday video ko'rilmagan\n"

        await message.answer(response, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**\n\nIltimos, qaytadan urinib ko'ring.", parse_mode="Markdown")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ---
@dp.message_handler(commands=["reset_group_progress"])
async def reset_group_progress_command(message: types.Message):
    """
    –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_group_progress <chat_id>
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå Ruxsat yo'q! Bu buyruq faqat administratorlar uchun.")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "üìù **Foydalanish:**\n\n"
                "`/reset_group_progress <chat_id>`\n\n"
                "**Masalan:**\n"
                "`/reset_group_progress -1001234567890`"
            , parse_mode="Markdown")
            return

        try:
            chat_id = int(args[1])
        except ValueError:
            await message.answer("‚ùå **Noto'g'ri format!** Chat ID raqam bo'lishi kerak.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(f"‚ùå **Guruh topilmadi!**\n\nChat ID: `{chat_id}`", parse_mode="Markdown")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        try:
            group_info = await message.bot.get_chat(chat_id)
            group_name = group_info.title or group_info.first_name or f"Guruh {chat_id}"
        except:
            group_name = f"Guruh {chat_id}"

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        db.reset_group_viewed_videos(chat_id)
        db.reset_group_viewed_videos_detailed_by_project(chat_id, "centris")
        db.reset_group_viewed_videos_detailed_by_project(chat_id, "golden_lake")

        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        schedule_single_group_jobs(chat_id)

        await message.answer(
            f"‚úÖ **Progress reset qilindi!**\n\n"
            f"üè¢ **Guruh:** {group_name}\n"
            f"üÜî **Chat ID:** `{chat_id}`\n\n"
            f"üîÑ **Qilingan ishlar:**\n"
            f"‚Ä¢ Eski progress tozalandi\n"
            f"‚Ä¢ Yangi tizim progress tozalandi\n"
            f"‚Ä¢ Vazifalar qayta rejalashtirildi\n\n"
            f"üéØ Guruh endi birinchi videodan boshlaydi!"
        , parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**\n\nIltimos, qaytadan urinib ko'ring.", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["admin_show_all_groups_settings"])
async def admin_show_all_groups_settings(message: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        response = "üìã **Barcha guruhlar sozlamalari:**\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: centris_start_video={centris_start_video}, golden_start_video={golden_start_video}")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not group_name or group_name == "Noma'lum guruh":
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Telegram
                try:
                    group_info = await message.bot.get_chat(chat_id)
                    if group_info.title:
                        group_name = group_info.title
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        db.update_group_name(chat_id, group_name)
                        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ '{group_name}'")
                    elif group_info.first_name:
                        group_name = group_info.first_name
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        db.update_group_name(chat_id, group_name)
                        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ '{group_name}'")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
            response += f"üè¢ **{group_name}** (ID: `{chat_id}`)\n"
            
            if centris_enabled:
                response += f"  üé¨ Centris: ‚úÖ Yoqilgan\n"
                if centris_season_id:
                    response += f"  üì∫ Sezon: {centris_season_id}\n"
                if centris_start_video is not None and centris_start_video >= 0:
                    response += f"  üé• Video: {centris_start_video + 1}\n"
                else:
                    response += f"  üé• Video: Sezondan boshlash\n"
            else:
                response += f"  üé¨ Centris: ‚ùå O'chirilgan\n"
            
            if golden_enabled:
                response += f"  üèä Golden: ‚úÖ Yoqilgan\n"
                if golden_season_id:
                    response += f"  üì∫ Sezon: {golden_season_id}\n"
                if golden_start_video is not None and golden_start_video >= 0:
                    response += f"  üé• Video: {golden_start_video + 1}\n"
                else:
                    response += f"  üé• Video: Sezondan boshlash\n"
            else:
                response += f"  üèä Golden: ‚ùå O'chirilgan\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤–º–µ—Å—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if is_subscribed:
                response += f"  ‚è∞ Jadval: ‚úÖ Yoqilgan (1)\n"
            else:
                response += f"  ‚è∞ Jadval: ‚ùå O'chirilgan\n"
            
            response += "\n" + "‚îÄ" * 40 + "\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üìã **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**\n\nIltimos, qaytadan urinib ko'ring.", parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ –Ω–æ–º–µ—Ä—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=["send_specific_video"])
async def send_specific_video_by_number(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ –Ω–æ–º–µ—Ä—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_specific_video <project> <season> <video_number>
    –ü—Ä–∏–º–µ—Ä: /send_specific_video centris 2 5
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not await is_admin_or_super_admin(message.from_user.id):
            await message.answer("‚ùå **Ruxsat yo'q!**\n\nBu buyruq faqat administratorlar uchun.", parse_mode="Markdown")
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 4:
            await message.answer(
                "üìù **To'g'ri foydalanish:**\n\n"
                "`/send_specific_video <loyiha_nomi> <sezon> <video_number>`\n\n"
                "**Misol:**\n"
                "`/send_specific_video centris 2 5` - Centris 2-sezon 5-video\n"
                "`/send_specific_video golden 1 3` - Golden 1-sezon 3-video\n\n"
                "**Loyihalar:** centris, golden\n"
                "**Sezonlar:** 1, 2, 3, 4...\n"
                "**Video raqami:** 1, 2, 3, 4..."
            , parse_mode="Markdown")
            return
        
        project = args[1].lower()
        try:
            season_id = int(args[2])
            video_number = int(args[3])
        except ValueError:
            await message.answer("‚ùå **Xatolik!** Sezon va video raqami son bo'lishi kerak.", parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        if project not in ['centris', 'golden']:
            await message.answer("‚ùå **Xatolik!** Loyiha `centris` yoki `golden` bo'lishi kerak.", parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –≤–∏–¥–µ–æ
        if video_number < 1:
            await message.answer("‚ùå **Xatolik!** Video raqami 1 dan katta bo'lishi kerak.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        groups_settings = db.get_all_groups_with_settings()
        
        if not groups_settings:
            await message.answer("üìã **Guruhlar sozlamalari:**\n\n‚ùå Hech qanday guruh sozlamalari topilmadi.", parse_mode="Markdown")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Å–µ–∑–æ–Ω—É
        videos = db.get_videos_by_season(season_id)
        if not videos:
            await message.answer(f"‚ùå **Video topilmadi!**\n\nSezon {season_id} da video mavjud emas.", parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ
        if video_number > len(videos):
            await message.answer(
                f"‚ùå **Video raqami noto'g'ri!**\n\n"
                f"Sezon {season_id} da faqat {len(videos)} ta video mavjud.\n"
                f"Siz {video_number} raqamini kiritdingiz."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_url, video_title, video_pos = videos[video_number - 1]  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        project_name = "üé¨ **Centris Towers**" if project == 'centris' else "üèä **Golden Lake**"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–ø–ø—ã
        sent_count = 0
        failed_count = 0
        response = f"üé¨ **{project_name} - Sezon {season_id}, Video {video_number} yuborish natijalari:**\n\n"
        response += f"üì∫ **Sezon:** {season_id}\n"
        response += f"üé• **Video:** {video_number}\n"
        response += f"üè∑Ô∏è **Nomi:** {video_title}\n\n"
        
        for group in groups_settings:
            chat_id, centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, viewed_videos, is_subscribed, group_name, send_times = group
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            project_enabled = False
            if project == 'centris' and centris_enabled and centris_season_id == season_id:
                project_enabled = True
            elif project == 'golden' and golden_enabled and golden_season_id == season_id:
                project_enabled = True
            
            if not project_enabled:
                if project == 'centris':
                    if not centris_enabled:
                        response += f"‚ö†Ô∏è **{group_name}**: Centris o'chirilgan\n"
                    elif centris_season_id != season_id:
                        response += f"‚ö†Ô∏è **{group_name}**: Centris sezon {centris_season_id} uchun sozlangan (siz {season_id} kiritdingiz)\n"
                    else:
                        response += f"‚ö†Ô∏è **{group_name}**: Centris sozlanmagan\n"
                elif project == 'golden':
                    if not golden_enabled:
                        response += f"‚ö†Ô∏è **{group_name}**: Golden o'chirilgan\n"
                    elif golden_season_id != season_id:
                        response += f"‚ö†Ô∏è **{group_name}**: Golden sezon {golden_season_id} uchun sozlangan (siz {season_id} kiritdingiz)\n"
                    else:
                        response += f"‚ö†Ô∏è **{group_name}**: Golden sozlanmagan\n"
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                await message.bot.copy_message(
                    chat_id=int(chat_id),
                    from_chat_id=-1002550852551,  # ID –∫–∞–Ω–∞–ª–∞
                    message_id=int(video_url.split('/')[-1]),
                    caption=f"{project_name}\n\nüì∫ Sezon: {season_id}\nüé• Video: {video_number}\nüè∑Ô∏è {video_title}\n\n‚úÖ Maxsus yuborish"
                )
                
                sent_count += 1
                response += f"‚úÖ **{group_name}**: Video yuborildi\n"
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
                failed_count += 1
                response += f"‚ùå **{group_name}**: Xatolik - {e}\n"
        
        response += f"\nüìä **Jami natijalar:**\n"
        response += f"‚úÖ Yuborilgan: {sent_count} guruh\n"
        response += f"‚ùå Xatolik: {failed_count}\n"
        response += f"üìã Guruhlar: {len(groups_settings)}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üé¨ **Qism {i+1}/{len(parts)}:**\n\n{part}")
        else:
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"‚ùå **Xatolik yuz berdi!**\n\n{e}", parse_mode="Markdown")

@dp.message_handler(commands=['send_now'])
async def send_video_now(message: types.Message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user_id = message.from_user.id
    
    try:
        from handlers.users.video_scheduler import send_group_video_new
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        chat_id = message.chat.id
        if not db.is_group_whitelisted(chat_id):
            await message.reply('‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ whitelist')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ')
            return
        
        centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = settings
        
        sent = False
        
        if centris_enabled and centris_season_id:
            await message.reply('üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ Centris —Å–µ–π—á–∞—Å...')
            result = await send_group_video_new(chat_id, 'centris', centris_season_id, centris_start_video)
            if result:
                await message.reply('‚úÖ –í–∏–¥–µ–æ Centris –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                sent = True
            else:
                await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ Centris')
        
        if golden_enabled and golden_season_id:
            await message.reply('üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ Golden Lake —Å–µ–π—á–∞—Å...')
            result = await send_group_video_new(chat_id, 'golden_lake', golden_season_id, golden_start_video)
            if result:
                await message.reply('‚úÖ –í–∏–¥–µ–æ Golden Lake –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                sent = True
            else:
                await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ Golden Lake')
        
        if not sent:
            await message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_video_now: {e}")
        await message.reply(f'‚ùå –û—à–∏–±–∫–∞: {e}')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(commands=['fix_group_seasons'])
async def fix_group_seasons_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(f"üöÄ fix_group_seasons –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer("‚ùå **Guruh uchun sozlamalar topilmadi!**", parse_mode="Markdown")
            return
        
        centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video = settings[:6]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤
        fixed_centris = False
        fixed_golden = False
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Centris —Å–µ–∑–æ–Ω
        if centris_enabled and centris_season_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                int(centris_season_id)
                logger.info(f"Centris season_id {centris_season_id} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except (ValueError, TypeError):
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–∑–æ–Ω Centris
                logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Centris season_id: {centris_season_id}")
                centris_seasons = db.get_seasons_by_project("centris")
                if centris_seasons:
                    new_season_id = centris_seasons[0][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω
                    logger.info(f"–ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–∑–æ–Ω: {new_season_id}")
                    db.set_group_video_start(chat_id, 'centris', new_season_id, 0)
                    fixed_centris = True
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ Centris, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç")
                    centris_enabled = False
                    fixed_centris = True
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Golden —Å–µ–∑–æ–Ω
        if golden_enabled and golden_season_id:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                int(golden_season_id)
                logger.info(f"Golden season_id {golden_season_id} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except (ValueError, TypeError):
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–∑–æ–Ω Golden
                logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Golden season_id: {golden_season_id}")
                golden_seasons = db.get_seasons_by_project("golden")
                if golden_seasons:
                    new_season_id = golden_seasons[0][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω
                    logger.info(f"–ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–∑–æ–Ω: {new_season_id}")
                    db.set_group_video_start(chat_id, 'golden', new_season_id, 0)
                    fixed_golden = True
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Golden, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ Golden, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç")
                    golden_enabled = False
                    fixed_golden = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        if fixed_centris or fixed_golden:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if fixed_centris:
                if centris_enabled:
                    centris_season_id, centris_start_video = db.get_group_video_start(chat_id, 'centris')
                else:
                    centris_season_id = None
                    centris_start_video = 0
            
            if fixed_golden:
                if golden_enabled:
                    golden_season_id, golden_start_video = db.get_group_video_start(chat_id, 'golden')
                else:
                    golden_season_id = None
                    golden_start_video = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db.set_group_video_settings(
                chat_id,
                int(centris_enabled),
                centris_season_id,
                centris_start_video,
                int(golden_enabled),
                golden_season_id,
                golden_start_video
            )
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞
            db.reset_group_viewed_videos(chat_id)
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            from handlers.users.video_scheduler import schedule_single_group_jobs
            schedule_single_group_jobs(chat_id)
            
            response = "‚úÖ **Guruh sozlamalari tuzatildi!**\n\n"
            if fixed_centris:
                if centris_enabled:
                    season_name = db.get_season_name(centris_season_id)
                    response += f"üè¢ **Centris Towers:** {season_name} (ID: {centris_season_id})\n"
                else:
                    response += f"üè¢ **Centris Towers:** O'chirildi (sez–æ–Ωlar topilmadi)\n"
            
            if fixed_golden:
                if golden_enabled:
                    season_name = db.get_season_name(golden_season_id)
                    response += f"üèä **Golden Lake:** {season_name} (ID: {golden_season_id})\n"
                else:
                    response += f"üèä **Golden Lake:** O'chirildi (sezonlar topilmadi)\n"
            
            response += f"\nüîÑ Video tarqatish qaytadan boshlandi!"
            
            await message.answer(response, parse_mode="Markdown")
            logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        else:
            await message.answer("‚úÖ **Guruh sozlamalari to'g'ri!**\n\nHech qanday tuzatish talab qilinmadi.", parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
@dp.message_handler(commands=['update_schedule'])
async def update_schedule_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    logger.info(f"üöÄ update_schedule –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer("‚ùå **Guruh uchun sozlamalar topilmadi!**", parse_mode="Markdown")
            return
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        from handlers.users.video_scheduler import schedule_single_group_jobs
        schedule_single_group_jobs(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        send_times_json = settings[6] if len(settings) > 6 else None
        try:
            if send_times_json:
                send_times = json.loads(send_times_json)
            else:
                send_times = ["07:00", "11:00", "20:00"]
        except:
            send_times = ["07:00", "11:00", "20:00"]
        
        centris_enabled = bool(settings[0])
        golden_enabled = bool(settings[3])
        
        response = "üîÑ **Yangi jadval qo'llanildi!**\n\n"
        
        if centris_enabled and golden_enabled:
            response += "üìã **Yangi tarqatish tartibi:**\n"
            for i, send_time in enumerate(send_times):
                if i % 2 == 0:
                    response += f"‚Ä¢ {send_time} - üè¢ **Centris Towers**\n"
                else:
                    response += f"‚Ä¢ {send_time} - üèä **Golden Lake**\n"
            response += "\n‚ú® Loyihalar navbat bilan yuboriladi!"
        elif centris_enabled:
            response += f"üìã **Centris Towers:** {', '.join(send_times)}"
        elif golden_enabled:
            response += f"üìã **Golden Lake:** {', '.join(send_times)}"
        
        await message.answer(response, parse_mode="Markdown")
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(commands=['remove_group'])
async def remove_group_command(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
    1. /remove_group - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    2. /remove_group <group_id> - –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ ID
    """
    logger.info(f"üöÄ remove_group –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã)
        if user_id not in SUPER_ADMIN_IDS and not db.is_superadmin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID –≥—Ä—É–ø–ø—ã –Ω–∞–ø—Ä—è–º—É—é
        if len(args) > 1:
            try:
                group_id = int(args[1])
                logger.info(f"–ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ ID: {group_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                group_info = db.get_group_by_id(group_id)
                if not group_info:
                    await message.answer(f"‚ùå **Guruh topilmadi!**\n\nID `{group_id}` bo'yicha guruh ma'lumotlar bazasida yo'q.", parse_mode="Markdown")
                    return
                
                group_name = group_info[1]
                
                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                success = db.remove_group_completely(group_id)
                
                if success:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
                    try:
                        from loader import bot
                        await bot.leave_chat(group_id)
                        logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É {group_id}")
                        leave_status = "‚úÖ Bot guruhdan chiqdi"
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É {group_id}: {e}")
                        leave_status = "‚ö†Ô∏è Bot guruhdan chiqa olmadi (guruh mavjud emas yoki botni oldin olib tashlangan)"
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                    try:
                        from handlers.users.video_scheduler import scheduler
                        jobs_to_remove = []
                        for job in scheduler.get_jobs():
                            if job.id.endswith(f"_{group_id}"):
                                jobs_to_remove.append(job.id)
                        
                        for job_id in jobs_to_remove:
                            scheduler.remove_job(job_id)
                            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {job_id}")
                        
                        schedule_status = f"‚úÖ {len(jobs_to_remove)} ta vazifa o'chirildi"
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                        schedule_status = "‚ö†Ô∏è Vazifalarni o'chirishda muammo"
                    
                    await message.answer(
                        f"‚úÖ **Guruh muvaffaqiyatli o'chirildi!**\n\n"
                        f"üè¢ **Guruh:** {group_name}\n"
                        f"üÜî **ID:** `{group_id}`\n\n"
                        f"üìä **Natijalar:**\n"
                        f"‚Ä¢ Ma'lumotlar bazasidan o'chirildi: ‚úÖ\n"
                        f"‚Ä¢ {leave_status}\n"
                        f"‚Ä¢ {schedule_status}",
                        parse_mode="Markdown"
                    )
                else:
                    await message.answer(
                        f"‚ùå **Guruhni o'chirishda xatolik!**\n\n"
                        f"üè¢ **Guruh:** {group_name}\n"
                        f"üÜî **ID:** `{group_id}`\n\n"
                        f"Ma'lumotlar bazasidan o'chirib bo'lmadi.",
                        parse_mode="Markdown"
                    )
                
                return
                
            except ValueError:
                await message.answer(
                    "‚ùå **Noto'g'ri format!**\n\n"
                    "**Foydalanish:**\n"
                    "‚Ä¢ `/remove_group` - guruhni tanlash\n"
                    "‚Ä¢ `/remove_group <group_id>` - to'g'ridan-to'g'ri o'chirish\n\n"
                    "**Misollar:**\n"
                    "‚Ä¢ `/remove_group`\n"
                    "‚Ä¢ `/remove_group -1001234567890`",
                    parse_mode="Markdown"
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
                await message.answer(f"‚ùå **Xatolik yuz berdi:** {e}", parse_mode="Markdown")
                return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        try:
            groups = db.get_all_groups()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã: {len(groups)}")
            logger.info(f"–ì—Ä—É–ø–ø—ã: {groups}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await message.answer(f"‚ùå **Xatolik yuz berdi:** {e}", parse_mode="Markdown")
            return
        
        if not groups:
            logger.warning("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç!")
            await message.answer("‚ùå **Guruhlar topilmadi!**\n\nMa'lumotlar bazasida guruhlar yo'q.", parse_mode="Markdown")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        response = "üóëÔ∏è **O'chirish uchun guruhni tanlang:**\n\n"
        response += "‚ö†Ô∏è **Diqqat!** Guruh to'liq o'chiriladi va bot guruhdan chiqadi.\n\n"
        response += "üí° **Yoki to'g'ridan-to'g'ri ID bilan:** `/remove_group <group_id>`\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response += create_paginated_groups_text(groups, page=0, title="O'chirish uchun guruhni tanlang")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb, total_pages, current_page = create_paginated_groups_keyboard(
            groups, 
            page=0, 
            prefix="remove_group", 
            cancel_callback="remove_group_cancel"
        )
        
        await message.answer(response, reply_markup=kb, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('remove_group_'))
async def remove_group_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    logger.info(f"üóëÔ∏è remove_group_callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã)
        if user_id not in SUPER_ADMIN_IDS and not db.is_superadmin(user_id):
            await callback_query.answer("‚ùå Sizda ruxsat yo'q!", show_alert=True)
            return
        
        if callback_query.data == "remove_group_cancel":
            await safe_edit_text(callback_query,
                "‚ùå **O'chirish bekor qilindi!**\n\nHech qanday guruh o'chirilmadi.",
                parse_mode="Markdown"
            )
            await callback_query.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
        group_id = int(callback_query.data.replace("remove_group_", ""))
        logger.info(f"–£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å ID: {group_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = db.get_group_by_id(group_id)
        group_name = group_info[1] if group_info else f"ID: {group_id}"
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = db.remove_group_completely(group_id)
        
        if success:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
            try:
                from loader import bot
                await bot.leave_chat(group_id)
                logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É {group_id}")
                leave_status = "‚úÖ Bot guruhdan chiqdi"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É {group_id}: {e}")
                leave_status = "‚ö†Ô∏è Bot guruhdan chiqa olmadi (guruh mavjud emas yoki botni oldin olib tashlangan)"
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            try:
                from handlers.users.video_scheduler import scheduler
                jobs_to_remove = []
                for job in scheduler.get_jobs():
                    if job.id.endswith(f"_{group_id}"):
                        jobs_to_remove.append(job.id)
                
                for job_id in jobs_to_remove:
                    scheduler.remove_job(job_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {job_id}")
                
                schedule_status = f"‚úÖ {len(jobs_to_remove)} ta vazifa o'chirildi"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                schedule_status = "‚ö†Ô∏è Vazifalarni o'chirishda muammo"
            
            await safe_edit_text(callback_query,
                f"‚úÖ **Guruh muvaffaqiyatli o'chirildi!**\n\n"
                f"üè¢ **Guruh:** {group_name}\n"
                f"üÜî **ID:** `{group_id}`\n\n"
                f"üìä **Natijalar:**\n"
                f"‚Ä¢ Ma'lumotlar bazasidan o'chirildi: ‚úÖ\n"
                f"‚Ä¢ {leave_status}\n"
                f"‚Ä¢ {schedule_status}",
                parse_mode="Markdown"
            )
        else:
            await safe_edit_text(callback_query,
                f"‚ùå **Guruhni o'chirishda xatolik!**\n\n"
                f"üè¢ **Guruh:** {group_name}\n"
                f"üÜî **ID:** `{group_id}`\n\n"
                f"Ma'lumotlar bazasidan o'chirib bo'lmadi.",
                parse_mode="Markdown"
            )
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è remove_group
@dp.callback_query_handler(lambda c: c.data.startswith('page_remove_group_'))
async def remove_group_pagination_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ remove_group"""
    logger.info(f"üìÑ remove_group_pagination_callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã)
        if user_id not in SUPER_ADMIN_IDS and not db.is_superadmin(user_id):
            await callback_query.answer("‚ùå Sizda ruxsat yo'q!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(callback_query.data.replace("page_remove_group_", ""))
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è remove_group")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Å—Ä–∞–∑—É
        await callback_query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = db.get_all_groups()
        
        if not groups:
            await safe_edit_text(callback_query,
                "‚ùå **Guruhlar topilmadi!**\n\nMa'lumotlar bazasida guruhlar yo'q.",
                parse_mode="Markdown"
            )
            await callback_query.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = "üóëÔ∏è **O'chirish uchun guruhni tanlang:**\n\n"
        response += "‚ö†Ô∏è **Diqqat!** Guruh to'liq o'chiriladi va bot guruhdan chiqadi.\n\n"
        response += create_paginated_groups_text(groups, page=page, title="O'chirish uchun guruhni tanlang")
        
        kb, total_pages, current_page = create_paginated_groups_keyboard(
            groups, 
            page=page, 
            prefix="remove_group", 
            cancel_callback="remove_group_cancel"
        )
        
        await safe_edit_text(callback_query, response, reply_markup=kb, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ remove_group: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è select_group (set_group_video)
@dp.callback_query_handler(lambda c: c.data.startswith('page_select_group_'), state=GroupVideoStates.waiting_for_group_selection)
async def select_group_pagination_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ set_group_video"""
    logger.info(f"üìÑ select_group_pagination_callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_query.data}")
    
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + SUPER_ADMIN_IDS and not db.is_admin(user_id):
            await callback_query.answer("‚ùå Sizda ruxsat yo'q!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(callback_query.data.replace("page_select_group_", ""))
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è select_group")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Å—Ä–∞–∑—É
        await callback_query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        groups = db.get_all_whitelisted_groups()
        
        if not groups:
            await safe_edit_text(callback_query,
                "‚ùå **Guruhlar topilmadi!**\n\nMa'lumotlar bazasida guruhlar yo'q yoki hech biri whitelist da emas.",
                parse_mode="Markdown"
            )
            await callback_query.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = "üìã **Mavjud guruhlar:**\n\n"
        response += "Guruh ID sini yuboring yoki ro'yxatdan tanlang:\n\n"
        response += create_paginated_groups_text(groups, page=page, title="Mavjud guruhlar")
        
        kb, total_pages, current_page = create_paginated_groups_keyboard(
            groups, 
            page=page, 
            prefix="select_group", 
            cancel_callback="group_cancel"
        )
        
        await safe_edit_text(callback_query, response, reply_markup=kb, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ select_group: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
@dp.callback_query_handler(lambda c: c.data == "page_info")
async def page_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    await callback_query.answer("üìÑ Bu sahifa haqida ma'lumot", show_alert=False)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['delete_bot_messages'])
async def delete_bot_messages_command(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    groups = db.get_all_groups()
    
    if not groups:
        await message.answer("‚ùå **Hech qanday guruh topilmadi!**\n\nAvval botni guruhlarga qo'shing.")
        return
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    keyboard = types.InlineKeyboardMarkup()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≥—Ä—É–ø–ø –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_size = 10
    total_pages = (len(groups) - 1) // page_size + 1
    current_page = 0
    start_idx = current_page * page_size
    end_idx = min(start_idx + page_size, len(groups))
    
    for i in range(start_idx, end_idx):
        group = groups[i]
        group_id = group[0]
        group_name = group[1] if group[1] else "Noma'lum guruh"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        if len(group_name) > 30:
            group_name = group_name[:27] + "..."
        
        keyboard.add(types.InlineKeyboardButton(
            text=f"üì± {group_name} (ID: {group_id})",
            callback_data=f"delete_msgs_group_{group_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è Oldingi", callback_data=f"delete_msgs_page_{current_page - 1}"))
    
    nav_buttons.append(types.InlineKeyboardButton(f"üìÑ {current_page + 1}/{total_pages}", callback_data="page_info"))
    
    if current_page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("Keyingi ‚û°Ô∏è", callback_data=f"delete_msgs_page_{current_page + 1}"))
    
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ ID –≤—Ä—É—á–Ω—É—é
    keyboard.add(types.InlineKeyboardButton("üÜî Guruh ID ni qo'lda kiritish", callback_data="delete_msgs_manual_id"))
    keyboard.add(types.InlineKeyboardButton("‚ùå Bekor qilish", callback_data="cancel_delete_msgs"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(groups=groups, current_page=current_page)
    await DeleteBotMessagesStates.waiting_for_group_selection.set()
    
    await message.answer(
        "üóëÔ∏è **Bot xabarlarini o'chirish**\n\n"
        "üìã **Quyidagi guruhlardan birini tanlang:**\n\n"
        "Yoki guruh ID sini qo'lda kiritishingiz mumkin.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data.startswith('delete_msgs_group_'), state=DeleteBotMessagesStates.waiting_for_group_selection)
async def delete_msgs_select_group_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        group_id = int(callback_query.data.split('_')[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await state.update_data(selected_group_id=group_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = db.get_group_by_id(group_id)
        group_name = group_info[1] if group_info and group_info[1] else "Noma'lum guruh"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await DeleteBotMessagesStates.waiting_for_message_count.set()
        
        await safe_edit_text(callback_query,
            f"üóëÔ∏è **Bot xabarlarini o'chirish**\n\n"
            f"üì± **Tanlangan guruh:** {group_name}\n"
            f"üÜî **Guruh ID:** `{group_id}`\n\n"
            f"üìä **Nechta oxirgi xabarni o'chirish kerak?**\n\n"
            f"Raqam kiriting (1-100 oralig'ida):",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã
@dp.callback_query_handler(lambda c: c.data == 'delete_msgs_manual_id', state=DeleteBotMessagesStates.waiting_for_group_selection)
async def delete_msgs_manual_id_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã"""
    await safe_edit_text(callback_query,
        "üÜî **Guruh ID ni kiriting**\n\n"
        "Guruh ID sini kiriting (masalan: -1001234567890):\n\n"
        "‚ö†Ô∏è **Diqqat:** ID aniq bo'lishi kerak!",
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
@dp.message_handler(state=DeleteBotMessagesStates.waiting_for_group_selection)
async def delete_msgs_manual_id_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é"""
    try:
        group_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        group_info = db.get_group_by_id(group_id)
        if not group_info:
            await message.answer(
                "‚ùå **Guruh topilmadi!**\n\n"
                "Kiritilgan ID bilan guruh ma'lumotlar bazasida mavjud emas.\n"
                "Iltimos, to'g'ri ID kiriting yoki ro'yxatdan tanlang.\n\n"
                "Qaytadan urinish uchun /delete_bot_messages buyrug'ini ishlatng."
            )
            await state.finish()
            return
        
        group_name = group_info[1] if group_info[1] else "Noma'lum guruh"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await state.update_data(selected_group_id=group_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await DeleteBotMessagesStates.waiting_for_message_count.set()
        
        await message.answer(
            f"‚úÖ **Guruh tanlandi**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n\n"
            f"üìä **Nechta oxirgi xabarni o'chirish kerak?**\n\n"
            f"Raqam kiriting (1-100 oralig'ida):",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "Iltimos, to'g'ri guruh ID sini kiriting.\n"
            "Masalan: -1001234567890\n\n"
            "Qaytadan urinish uchun /delete_bot_messages buyrug'ini ishlatng."
        )
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")
        await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(state=DeleteBotMessagesStates.waiting_for_message_count)
async def delete_msgs_count_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        message_count = int(message.text.strip())
        
        if message_count < 1 or message_count > 100:
            await message.answer(
                "‚ùå **Noto'g'ri son!**\n\n"
                "Xabarlar soni 1 dan 100 gacha bo'lishi kerak.\n"
                "Iltimos, qaytadan kiriting:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        group_id = data.get('selected_group_id')
        
        if not group_id:
            await message.answer("‚ùå **Xatolik!** Guruh ma'lumotlari topilmadi.")
            await state.finish()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = db.get_group_by_id(group_id)
        group_name = group_info[1] if group_info and group_info[1] else "Noma'lum guruh"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ Tasdiqlash", callback_data=f"confirm_delete_{group_id}_{message_count}"),
            types.InlineKeyboardButton("‚ùå Bekor qilish", callback_data="cancel_delete_msgs")
        )
        
        await message.answer(
            f"‚ö†Ô∏è **Tasdiqlash talab qilinadi**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n"
            f"üóëÔ∏è **O'chiriladigan xabarlar:** {message_count} ta\n\n"
            f"**Bu amal qaytarib bo'lmaydi!**\n"
            f"Davom etishni istaysizmi?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "Iltimos, raqam kiriting (1-100 oralig'ida).\n"
            "Masalan: 10"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")
        await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_'), state=DeleteBotMessagesStates.waiting_for_message_count)
async def confirm_delete_messages_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = callback_query.data.split('_')
        group_id = int(parts[2])
        message_count = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_info = db.get_group_by_id(group_id)
        group_name = group_info[1] if group_info and group_info[1] else "Noma'lum guruh"
        
        await safe_edit_text(callback_query,
            f"üîÑ **Xabarlar o'chirilmoqda...**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n"
            f"üóëÔ∏è **O'chiriladigan xabarlar:** {message_count} ta\n\n"
            f"Iltimos, kuting...",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        from loader import bot
        deleted_count = 0
        errors_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        bot_user = await bot.get_me()
        bot_id = bot_user.id
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π message_id  
            temp_msg = await bot.send_message(group_id, "üîç Bot xabarlarini qidirilmoqda...")
            current_message_id = temp_msg.message_id
            await bot.delete_message(group_id, current_message_id)
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {group_id} –æ—Ç ID {current_message_id}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –∏–¥–µ–º –Ω–∞–∑–∞–¥ –ø–æ ID –∏ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            # Telegram API –ø–æ–∑–≤–æ–ª–∏—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            checked_count = 0
            max_attempts = message_count * 20  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ message_id –∏ –∏–¥–µ–º –Ω–∞–∑–∞–¥
            for message_id in range(current_message_id - 1, max(1, current_message_id - max_attempts), -1):
                if deleted_count >= message_count:
                    break
                    
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # Telegram API –ø–æ–∑–≤–æ–ª–∏—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                    await bot.delete_message(group_id, message_id)
                    deleted_count += 1
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {message_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    await asyncio.sleep(0.3)
                    
                except Exception as delete_error:
                    error_msg = str(delete_error).lower()
                    
                    if "message to delete not found" in error_msg:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    elif "message can't be deleted" in error_msg:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    elif "not enough rights" in error_msg or "can't delete" in error_msg:
                        # –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –∏–ª–∏ —ç—Ç–æ –Ω–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        pass
                    elif "bad request" in error_msg and "message to delete not found" in error_msg:
                        # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                        pass
                    else:
                        # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {delete_error}")
                        errors_count += 1
                    
                    continue
                
                checked_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if checked_count % 10 == 0:
                    try:
                        await safe_edit_text(callback_query,
                            f"üîÑ **Bot xabarlarini qidirilmoqda...**\n\n"
                            f"üì± **Guruh:** {group_name}\n"
                            f"üÜî **ID:** `{group_id}`\n"
                            f"üóëÔ∏è **O'chirildi:** {deleted_count}/{message_count}\n"
                            f"üîç **Tekshirildi:** {checked_count} ta xabar\n\n"
                            f"Iltimos, kuting...",
                            parse_mode="Markdown"
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
            logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –£–¥–∞–ª–µ–Ω–æ: {deleted_count}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked_count}, –æ—à–∏–±–æ–∫: {errors_count}")
        
        except Exception as main_error:
            logger.error(f"–û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {main_error}")
            errors_count += 1
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await state.finish()
        
        result_text = f"‚úÖ **Xabarlar o'chirish yakunlandi!**\n\n"
        result_text += f"üì± **Guruh:** {group_name}\n"
        result_text += f"üÜî **ID:** `{group_id}`\n\n"
        result_text += f"üìä **Natijalar:**\n"
        result_text += f"‚Ä¢ O'chirilgan xabarlar: **{deleted_count}** ta\n"
        result_text += f"‚Ä¢ Maqsad: **{message_count}** ta\n"
        
        if deleted_count == 0:
            result_text += f"\n‚ö†Ô∏è **Hech qanday bot xabari o'chirilmadi**\n"
            result_text += f"Bu quyidagi sabablarga bog'liq bo'lishi mumkin:\n"
            result_text += f"‚Ä¢ So'ngi vaqtlarda guruhda bot xabarlari yo'q\n"
            result_text += f"‚Ä¢ Bot xabarlari 48 soatdan eski (Telegram cheklovi)\n"
            result_text += f"‚Ä¢ Botda xabarlarni o'chirish huquqi yo'q\n"
            result_text += f"‚Ä¢ Tekshirilgan oraliqda faqat foydalanuvchi xabarlari bor"
        elif deleted_count < message_count:
            result_text += f"\n‚úÖ **Qisman muvaffaqiyatli**\n"
            result_text += f"‚Ä¢ {deleted_count} ta bot xabari o'chirildi\n"
            result_text += f"‚Ä¢ Qolgan {message_count - deleted_count} ta o'chirilmadi\n\n"
            result_text += f"**Sabablari:**\n"
            result_text += f"‚Ä¢ Guruhda yetarli bot xabarlari yo'q\n"
            result_text += f"‚Ä¢ Ba'zi xabarlar 48 soatdan eski\n"
            result_text += f"‚Ä¢ Tekshirilgan oraliqda asosan foydalanuvchi xabarlari"
        else:
            result_text += f"\nüéâ **Muvaffaqiyatli yakunlandi!**\n"
            result_text += f"Barcha so'ralgan bot xabarlari o'chirildi."
        
        await safe_edit_text(callback_query, result_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)
        await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_msgs', state=[DeleteBotMessagesStates.waiting_for_group_selection, DeleteBotMessagesStates.waiting_for_message_count])
async def cancel_delete_messages_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await state.finish()
    await safe_edit_text(callback_query,
        "‚ùå **Bekor qilindi**\n\n"
        "Xabarlarni o'chirish bekor qilindi.",
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data.startswith('delete_msgs_page_'), state=DeleteBotMessagesStates.waiting_for_group_selection)
async def delete_msgs_pagination_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        new_page = int(callback_query.data.split('_')[-1])
        data = await state.get_data()
        groups = data.get('groups', [])
        
        if not groups:
            await callback_query.answer("‚ùå Guruhlar ro'yxati topilmadi", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = types.InlineKeyboardMarkup()
        
        page_size = 10
        total_pages = (len(groups) - 1) // page_size + 1
        
        if new_page < 0 or new_page >= total_pages:
            await callback_query.answer("‚ùå Noto'g'ri sahifa", show_alert=True)
            return
        
        start_idx = new_page * page_size
        end_idx = min(start_idx + page_size, len(groups))
        
        for i in range(start_idx, end_idx):
            group = groups[i]
            group_id = group[0]
            group_name = group[1] if group[1] else "Noma'lum guruh"
            
            if len(group_name) > 30:
                group_name = group_name[:27] + "..."
            
            keyboard.add(types.InlineKeyboardButton(
                text=f"üì± {group_name} (ID: {group_id})",
                callback_data=f"delete_msgs_group_{group_id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if new_page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è Oldingi", callback_data=f"delete_msgs_page_{new_page - 1}"))
        
        nav_buttons.append(types.InlineKeyboardButton(f"üìÑ {new_page + 1}/{total_pages}", callback_data="page_info"))
        
        if new_page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("Keyingi ‚û°Ô∏è", callback_data=f"delete_msgs_page_{new_page + 1}"))
        
        if nav_buttons:
            keyboard.row(*nav_buttons)
        
        keyboard.add(types.InlineKeyboardButton("üÜî Guruh ID ni qo'lda kiritish", callback_data="delete_msgs_manual_id"))
        keyboard.add(types.InlineKeyboardButton("‚ùå Bekor qilish", callback_data="cancel_delete_msgs"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_page=new_page)
        
        await safe_edit_text(callback_query,
            "üóëÔ∏è **Bot xabarlarini o'chirish**\n\n"
            "üìã **Quyidagi guruhlardan birini tanlang:**\n\n"
            "Yoki guruh ID sini qo'lda kiritishingiz mumkin.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ delete_msgs: {e}")
        await callback_query.answer(f"‚ùå Xatolik: {e}", show_alert=True)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['create_test_messages'])
async def create_test_messages_command(message: types.Message):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /create_test_messages <group_id> [count]
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/create_test_messages <group_id> [count]`\n"
            "**Misollar:**\n"
            "‚Ä¢ `/create_test_messages -1001234567890` - 5 ta test xabar\n"
            "‚Ä¢ `/create_test_messages -1001234567890 10` - 10 ta test xabar",
            parse_mode="Markdown"
        )
        return
    
    try:
        group_id = int(args[1])
        count = int(args[2]) if len(args) > 2 else 5
        
        if count < 1 or count > 20:
            await message.answer("‚ùå **Xabarlar soni 1 dan 20 gacha bo'lishi kerak!**")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        group_info = db.get_group_by_id(group_id)
        if not group_info:
            await message.answer(
                "‚ùå **Guruh topilmadi!**\n\n"
                "Kiritilgan ID bilan guruh ma'lumotlar bazasida mavjud emas."
            )
            return
        
        group_name = group_info[1] if group_info[1] else "Noma'lum guruh"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_count = 0
        failed_count = 0
        from loader import bot
        
        await message.answer(
            f"üîÑ **Test xabarlar yaratilmoqda...**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n"
            f"üìä **Soni:** {count} ta xabar\n\n"
            f"Iltimos, kuting...",
            parse_mode="Markdown"
        )
        
        for i in range(1, count + 1):
            try:
                test_message = f"üß™ **Test xabar #{i}**\n\n" \
                              f"üìÖ **Sana:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n" \
                              f"ü§ñ **Bot:** Test rejimida\n" \
                              f"üë§ **Yuboruvchi:** Super Admin\n\n" \
                              f"Bu xabar test maqsadida yaratilgan va keyinchalik o'chirilishi mumkin."
                
                sent_msg = await bot.send_message(group_id, test_message, parse_mode="Markdown")
                sent_count += 1
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}/{count} –≤ –≥—Ä—É–ø–ø–µ {group_id}, ID: {sent_msg.message_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {e}")
                continue
        
        await message.answer(
            f"‚úÖ **Test xabarlar yaratildi!**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n\n"
            f"üìä **Natijalar:**\n"
            f"‚Ä¢ Yaratilgan: **{sent_count}** ta\n"
            f"‚Ä¢ Xatolik: **{failed_count}** ta\n"
            f"‚Ä¢ Jami: **{count}** ta\n\n"
            f"üí° **Eslatma:** Endi `/delete_bot_messages` buyrug'i bilan ushbu xabarlarni o'chirishni sinab ko'ring.",
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "Guruh ID va xabarlar soni raqam bo'lishi kerak.\n"
            "Masalan: `/create_test_messages -1001234567890 5`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['test_auto_season_switch'])
async def test_auto_season_switch_command(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /test_auto_season_switch <group_id> <project> <current_season_id>
    args = message.text.split()
    if len(args) < 4:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/test_auto_season_switch <group_id> <project> <current_season_id>`\n"
            "**Misollar:**\n"
            "‚Ä¢ `/test_auto_season_switch -1001234567890 centris 1`\n"
            "‚Ä¢ `/test_auto_season_switch -1001234567890 golden 5`\n\n"
            "**Loyihalar:** `centris` yoki `golden`",
            parse_mode="Markdown"
        )
        return
    
    try:
        group_id = int(args[1])
        project = args[2].lower()
        current_season_id = int(args[3])
        
        if project not in ['centris', 'golden']:
            await message.answer("‚ùå **Loyiha noto'g'ri!**\n\nFaqat `centris` yoki `golden` bo'lishi mumkin.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        group_info = db.get_group_by_id(group_id)
        if not group_info:
            await message.answer(
                "‚ùå **Guruh topilmadi!**\n\n"
                "Kiritilgan ID bilan guruh ma'lumotlar bazasida mavjud emas."
            )
            return
        
        group_name = group_info[1] if group_info[1] else "Noma'lum guruh"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
        current_season_info = db.get_season_by_id(current_season_id)
        if not current_season_info:
            await message.answer(f"‚ùå **Sezon topilmadi!**\n\nID {current_season_id} bilan sezon mavjud emas.")
            return
        
        current_season_name = current_season_info[1]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω
        next_season = db.get_next_season_in_project(current_season_id, project)
        
        if not next_season:
            await message.answer(f"‚ùå **Keyingi sezon topilmadi!**\n\nLoyiha {project} da sezon {current_season_id} dan keyin sezon yo'q.")
            return
        
        next_season_id, next_season_name = next_season
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await message.answer(
            f"üîÑ **Avtomatik sezon almashtirish testi**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n"
            f"üé¨ **Loyiha:** {project.title()}\n\n"
            f"üìä **Sezon almashtirish:**\n"
            f"‚Ä¢ Hozirgi sezon: `{current_season_id}` - {current_season_name}\n"
            f"‚Ä¢ Keyingi sezon: `{next_season_id}` - {next_season_name}\n\n"
            f"üöÄ **Avtomatik almashtirishni boshlayapman...**",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        success = db.auto_switch_to_next_season(group_id, project, current_season_id)
        
        if success:
            await message.answer(
                f"‚úÖ **Muvaffaqiyatli almashtirild!**\n\n"
                f"üì± **Guruh:** {group_name}\n"
                f"üÜî **ID:** `{group_id}`\n"
                f"üé¨ **Loyiha:** {project.title()}\n\n"
                f"üìä **Natija:**\n"
                f"‚Ä¢ Sezon muvaffaqiyatli almashtirildi\n"
                f"‚Ä¢ Yangi sezon: `{next_season_id}` - {next_season_name}\n"
                f"‚Ä¢ Start video: `1` (birinchi video)\n\n"
                f"üéâ **Test muvaffaqiyatli tugadi!**\n"
                f"üìπ **Keyingi video yuborish vaqtida yangi sezondan boshlanadi.**",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ùå **Almashtirish muvaffaqiyatsiz!**\n\n"
                f"Ma'lumotlar bazasida xatolik yuz berdi.\n"
                f"Loglarni tekshiring."
            )
        
    except ValueError:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "Guruh ID va sezon ID raqam bo'lishi kerak.\n"
            "Masalan: `/test_auto_season_switch -1001234567890 centris 1`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['seasons_stats'])
async def seasons_stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        centris_seasons = db.get_seasons_by_project("centris")
        golden_seasons = db.get_seasons_by_project("golden")
        
        response = "üìä **Loyihalar bo'yicha sezonlar statistikasi**\n\n"
        
        # Centris Towers
        response += f"üè¢ **Centris Towers:**\n"
        response += f"‚Ä¢ Jami sezonlar: **{len(centris_seasons)}** ta\n"
        if centris_seasons:
            response += f"‚Ä¢ Sezonlar ro'yxati:\n"
            for i, (season_id, season_name) in enumerate(centris_seasons, 1):
                response += f"  {i}. ID:`{season_id}` - {season_name[:50]}{'...' if len(season_name) > 50 else ''}\n"
        else:
            response += f"‚Ä¢ ‚ùå Hech qanday sezon topilmadi\n"
        
        response += f"\n"
        
        # Golden Lake  
        response += f"üåä **Golden Lake:**\n"
        response += f"‚Ä¢ Jami sezonlar: **{len(golden_seasons)}** ta\n"
        if golden_seasons:
            response += f"‚Ä¢ Sezonlar ro'yxati:\n"
            for i, (season_id, season_name) in enumerate(golden_seasons, 1):
                response += f"  {i}. ID:`{season_id}` - {season_name[:50]}{'...' if len(season_name) > 50 else ''}\n"
        else:
            response += f"‚Ä¢ ‚ùå Hech qanday sezon topilmadi\n"
        
        response += f"\nüìã **Avtomatik almashtirish tartibi:**\n"
        response += f"üè¢ **Centris:** Sezon 1 ‚Üí 2 ‚Üí 3 ‚Üí 4 ‚Üí 5 ‚Üí 6 ‚Üí 1 ‚Üí ...\n"
        response += f"üåä **Golden:** Sezon 1 ‚Üí 2 ‚Üí 3 ‚Üí 4 ‚Üí 1 ‚Üí ...\n\n"
        response += f"üí° **Eslatma:** Agar sezonlar soni ko'rsatilganidan kam bo'lsa, yangi sezonlar qo'shish kerak."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                await message.answer(f"üìä **Qism {i+1}/{len(parts)}:**\n\n{part}", parse_mode="Markdown")
        else:
            await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['test_send_video'])
async def test_send_video_command(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã
    if user_id not in SUPER_ADMIN_IDS:
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat super-adminlar foydalana oladi.", parse_mode="Markdown")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /test_send_video <group_id>
    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "**Foydalanish:** `/test_send_video <group_id>`\n"
            "**Misol:** `/test_send_video -1001234567890`",
            parse_mode="Markdown"
        )
        return
    
    try:
        group_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        group_info = db.get_group_by_id(group_id)
        if not group_info:
            await message.answer(
                "‚ùå **Guruh topilmadi!**\n\n"
                "Kiritilgan ID bilan guruh ma'lumotlar bazasida mavjud emas."
            )
            return
        
        group_name = group_info[1] if group_info[1] else "Noma'lum guruh"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(group_id)
        if not settings:
            await message.answer(
                f"‚ùå **Guruh sozlanmagan!**\n\n"
                f"üì± Guruh: {group_name}\n"
                f"üÜî ID: `{group_id}`\n\n"
                f"Bu guruh uchun video sozlamalari topilmadi.\n"
                f"Avval `/set_group_video` buyrug'i bilan sozlang."
            )
            return
        
        centris_enabled, centris_season_id, centris_start_video, golden_enabled, golden_season_id, golden_start_video, send_times = settings
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        centris_status = '‚úÖ Yoqilgan' if centris_enabled else '‚ùå O`chirilgan'
        golden_status = '‚úÖ Yoqilgan' if golden_enabled else '‚ùå O`chirilgan'
        
        await message.answer(
            f"üß™ **Video yuborish testi**\n\n"
            f"üì± **Guruh:** {group_name}\n"
            f"üÜî **ID:** `{group_id}`\n\n"
            f"üìä **Sozlamalar:**\n"
            f"üè¢ **Centris:** {centris_status}\n"
            f"  ‚Ä¢ Sezon ID: `{centris_season_id}`\n"
            f"  ‚Ä¢ Start video: `{centris_start_video}`\n\n"
            f"üåä **Golden:** {golden_status}\n"
            f"  ‚Ä¢ Sezon ID: `{golden_season_id}`\n"
            f"  ‚Ä¢ Start video: `{golden_start_video}`\n\n"
            f"üöÄ **Video yuborishni boshlayapman...**",
            parse_mode="Markdown"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ
        from handlers.users.video_scheduler import send_group_video_by_settings
        
        try:
            result = await send_group_video_by_settings(group_id)
            
            if result:
                await message.answer(
                    f"‚úÖ **Video muvaffaqiyatli yuborildi!**\n\n"
                    f"üì± **Guruh:** {group_name}\n"
                    f"üÜî **ID:** `{group_id}`\n\n"
                    f"üéâ **Test muvaffaqiyatli tugadi!**"
                )
            else:
                await message.answer(
                    f"‚ö†Ô∏è **Video yuborilmadi**\n\n"
                    f"üì± **Guruh:** {group_name}\n"
                    f"üÜî **ID:** `{group_id}`\n\n"
                    f"üìã **Mumkin bo'lgan sabablar:**\n"
                    f"‚Ä¢ Barcha videolar ko'rilgan\n"
                    f"‚Ä¢ Loyihalar o'chirilgan\n"
                    f"‚Ä¢ Sezon ID noto'g'ri\n"
                    f"‚Ä¢ Video ma'lumotlar bazasida yo'q\n\n"
                    f"üí° **Tekshirib ko'ring:** loglarni va sozlamalarni"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await message.answer(
                f"‚ùå **Xatolik yuz berdi!**\n\n"
                f"üì± **Guruh:** {group_name}\n"
                f"üÜî **ID:** `{group_id}`\n"
                f"üî• **Xatolik:** `{str(e)}`\n\n"
                f"Loglarni tekshiring va qaytadan urinib ko'ring."
            )
        
    except ValueError:
        await message.answer(
            "‚ùå **Noto'g'ri format!**\n\n"
            "Guruh ID raqam bo'lishi kerak.\n"
            "Masalan: `/test_send_video -1001234567890`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await message.answer("‚ùå **Xatolik yuz berdi!**")
