from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from handlers import groups
from db import db
from loader import dp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from data.config import ADMINS, SUPER_ADMIN_ID

logger.info(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –≤ group_video_commands.py, dp ID: {id(dp)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(commands=['set_group_video'])
async def set_group_video_command(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ set_group_video –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    if user_id not in ADMINS + [SUPER_ADMIN_ID] and not db.is_admin(user_id):
        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
        await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.")
        return
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    chat_type = message.chat.type
    chat_id = message.chat.id
    
    logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}, ID —á–∞—Ç–∞: {chat_id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    if chat_type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        logger.info("‚úÖ –≠—Ç–æ –≥—Ä—É–ø–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é")
        # –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
        await message.answer(
            "üìπ **GURUH UCHUN VIDEO TARQATISH SOZLAMALARI**\n\n"
            "üè¢ **Loyihani tanlang:**",
            reply_markup=get_project_keyboard(),
            parse_mode="Markdown"
        )
    else:
        logger.info("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ –º–µ–Ω—é")
        # –ö–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        await message.answer(
            "üìπ **VIDEO TARQATISH SOZLAMALARI**\n\n"
            "üè¢ **Loyihani tanlang:**",
            reply_markup=get_project_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    from handlers.users.group_video_states import GroupVideoStates
    await state.set_state(GroupVideoStates.waiting_for_project.state)
    await state.update_data(chat_id=chat_id)
    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, chat_id: {chat_id}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥—Ä—É–ø–ø—ã
@dp.message_handler(commands=['show_group_video_settings'])
async def show_group_video_settings(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
    """
    logger.info(f"üöÄ show_group_video_settings –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ {message.chat.id} ({message.chat.type})")
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ADMINS + [SUPER_ADMIN_ID] and not db.is_admin(user_id):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            await message.answer("‚ùå **Sizda bu buyruqni bajarish uchun ruxsat yo'q!**\n\nFaqat adminlar foydalana oladi.")
            return
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ
        if message.chat.type not in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
            logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ")
            await message.answer("‚ö†Ô∏è Bu buyruq faqat guruhlarda ishlaydi.")
            return
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        settings = db.get_group_video_settings(chat_id)
        if not settings:
            await message.answer(
                "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
                "‚ùå **Hech qanday sozlamalar topilmadi!**\n\n"
                "Video tarqatishni yoqish uchun /set_group_video buyrug'ini ishlating."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        centris_start = db.get_group_video_start(chat_id, 'centris')
        golden_start = db.get_group_video_start(chat_id, 'golden')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö
        centris_season_name = "N/A"
        golden_season_name = "N/A"
        
        if settings[1]:  # centris_season
            centris_season_info = db.get_season_by_id(settings[1])
            if centris_season_info:
                centris_season_name = centris_season_info[1]  # season_name
        
        if settings[5]:  # golden_season
            golden_season_info = db.get_season_by_id(settings[5])
            if golden_season_info:
                golden_season_name = golden_season_info[1]  # season_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìπ **GURUH VIDEO SOZLAMALARI**\n\n"
        
        # Centris Towers
        response += "üè¢ **Centris Towers:**\n"
        if settings[0]:  # centris_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {centris_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {centris_start[1] if centris_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # Golden Lake
        response += "üèòÔ∏è **Golden Lake:**\n"
        if settings[4]:  # golden_enabled
            response += f"   ‚úÖ Yoqilgan\n"
            response += f"   üì∫ Seson: {golden_season_name}\n"
            response += f"   üé¨ Boshlash videosi: {golden_start[1] if golden_start[0] else 0}\n"
        else:
            response += "   ‚ùå O'chirilgan\n"
        
        response += "\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = db.get_subscription_status(chat_id)
        response += f"üì° **Obuna holati:** {'‚úÖ Faol' if is_subscribed else '‚ùå Faol emas'}\n"
        
        # Whitelist —Å—Ç–∞—Ç—É—Å
        is_whitelisted = db.is_group_whitelisted(chat_id)
        response += f"üîí **Whitelist:** {'‚úÖ Ruxsat berilgan' if is_whitelisted else '‚ùå Ruxsat berilmagan'}\n"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ Yangilash", callback_data="refresh_settings"),
            InlineKeyboardButton("‚öôÔ∏è O'zgartirish", callback_data="edit_settings")
        )
        
        await message.answer(response, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer(f"‚ùå Xatolik yuz berdi: {e}")

logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
def get_project_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè¢ Centris Towers", callback_data="project_centris"),
        InlineKeyboardButton("üèòÔ∏è Golden Lake", callback_data="project_golden"),
        InlineKeyboardButton("üéØ Ikkalasi ham", callback_data="project_both")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è set_group_video
@dp.callback_query_handler(lambda c: c.data.startswith("project_"), state="*")
async def process_project_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        project = callback_query.data.replace("project_", "")
        await state.update_data(project=project)
        
        if project == "centris":
            await callback_query.message.edit_text(
                "üè¢ **Centris Towers**\n\n"
                "üì∫ **Sesonni tanlang:**",
                reply_markup=get_season_keyboard("centris"),
                parse_mode="Markdown"
            )
            from handlers.users.group_video_states import GroupVideoStates
            await state.set_state(GroupVideoStates.waiting_for_centr_season.state)
            
        elif project == "golden":
            seasons = db.get_seasons_by_project("golden")
            if not seasons:
                await callback_query.message.edit_text(
                    "‚ùå **Golden Lake uchun hech qanday seson topilmadi!**\n\n"
                    "Iltimos, avval seson qo'shing."
                )
                await state.finish()
                return
                
            await callback_query.message.edit_text(
                "üè¢ **Golden Lake**\n\n"
                "üì∫ **Sesonni tanlang:**",
                reply_markup=get_season_keyboard("golden"),
                parse_mode="Markdown"
            )
            from handlers.users.group_video_states import GroupVideoStates
            await state.set_state(GroupVideoStates.waiting_for_golden_season.state)
            
        elif project == "both":
            await callback_query.message.edit_text(
                "üè¢ **Centris + Golden**\n\n"
                "üì∫ **Centris Towers uchun sesonni tanlang:**",
                reply_markup=get_season_keyboard("centris"),
                parse_mode="Markdown"
            )
            from handlers.users.group_video_states import GroupVideoStates
            await state.set_state(GroupVideoStates.waiting_for_centr_season.state)
            await state.update_data(both_selected=True)
            
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

@dp.callback_query_handler(lambda c: c.data.startswith("season_"), state="*")
async def process_season_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
    try:
        if callback_query.data == "no_seasons":
            await callback_query.message.edit_text(
                "‚ùå **Hech qanday seson topilmadi!**\n\n"
                "Iltimos, avval seson qo'shing."
            )
            await state.finish()
            return
            
        season_id = int(callback_query.data.replace("season_", ""))
        data = await state.get_data()
        project = data.get("project")
        
        if project == "centris" or (project == "both" and data.get("both_selected")):
            await state.update_data(centris_season_id=season_id)
            await callback_query.message.edit_text(
                "üè¢ **Centris Towers**\n"
                f"üì∫ **Seson:** {db.get_season_name(season_id)}\n\n"
                "üé¨ **Boshlash uchun videoni tanlang:**",
                reply_markup=get_video_keyboard_from_db(db.get_videos_by_season(season_id), []),
                parse_mode="Markdown"
            )
            from handlers.users.group_video_states import GroupVideoStates
            await state.set_state(GroupVideoStates.waiting_for_centr_video.state)
            
        elif project == "golden":
            await state.update_data(golden_season_id=season_id)
            await callback_query.message.edit_text(
                "üè¢ **Golden Lake**\n"
                f"üì∫ **Seson:** {db.get_season_name(season_id)}\n\n"
                "üé¨ **Boshlash uchun videoni tanlang:**",
                reply_markup=get_video_keyboard_from_db(db.get_videos_by_season(season_id), []),
                parse_mode="Markdown"
            )
            from handlers.users.group_video_states import GroupVideoStates
            await state.set_state(GroupVideoStates.waiting_for_golden_video.state)
            
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ–∑–æ–Ω–∞: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

@dp.callback_query_handler(lambda c: c.data.startswith("video_"), state="*")
async def process_video_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ"""
    try:
        if callback_query.data == "all_videos_sent":
            await callback_query.message.edit_text(
                "‚ùå **Barcha video allaqachon yuborilgan!**\n\n"
                "Boshqa seson tanlang yoki yangi video qo'shing."
            )
            await state.finish()
            return
            
        video_idx = int(callback_query.data.replace("video_", ""))
        data = await state.get_data()
        project = data.get("project")
        
        if project == "centris" or (project == "both" and data.get("both_selected")):
            await state.update_data(centris_start_video=video_idx)
            
            if data.get("both_selected"):
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–±–∞ –ø—Ä–æ–µ–∫—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Golden
                await callback_query.message.edit_text(
                    "üè¢ **Centris Towers sozlandi!**\n\n"
                    "üì∫ **Golden Lake uchun sesonni tanlang:**",
                    reply_markup=get_season_keyboard("golden"),
                    parse_mode="Markdown"
                )
                from handlers.users.group_video_states import GroupVideoStates
                await state.set_state(GroupVideoStates.waiting_for_golden_season.state)
            else:
                # –¢–æ–ª—å–∫–æ Centris - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await save_group_settings(data)
                await callback_query.message.edit_text(
                    "‚úÖ **Centris Towers sozlamalari saqlandi!**\n\n"
                    "üé¨ Video tarqatish faollashtirildi."
                )
                await state.finish()
                
        elif project == "golden":
            await state.update_data(golden_start_video=video_idx)
            
            if data.get("both_selected"):
                # –û–±–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await save_group_settings(data)
                await callback_query.message.edit_text(
                    "‚úÖ **Barcha sozlamalar saqlandi!**\n\n"
                    "üé¨ Video tarqatish faollashtirildi."
                )
                await state.finish()
            else:
                # –¢–æ–ª—å–∫–æ Golden - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await save_group_settings(data)
                await callback_query.message.edit_text(
                    "‚úÖ **Golden Lake sozlamalari saqlandi!**\n\n"
                    "üé¨ Video tarqatish faollashtirildi."
                )
                await state.finish()
                
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–¥–µ–æ: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi!")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_season_keyboard(project):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    kb = InlineKeyboardMarkup(row_width=2)
    seasons = db.get_seasons_by_project(project)
    if not seasons:
        kb.add(InlineKeyboardButton("‚ùå –ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤", callback_data="no_seasons"))
        return kb
    
    for season_id, season_name in seasons:
        kb.add(InlineKeyboardButton(f"üì∫ {season_name}", callback_data=f"season_{season_id}"))
    return kb

def get_video_keyboard_from_db(videos, viewed):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    kb = InlineKeyboardMarkup(row_width=3)
    has_unwatched = False
    
    for url, title, position in videos:
        if position not in viewed:
            kb.add(InlineKeyboardButton(f"{position+1}. {title}", callback_data=f"video_{position}"))
            has_unwatched = True
    
    if not has_unwatched:
        kb.add(InlineKeyboardButton("‚ùå –í—Å–µ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="all_videos_sent"))
        return None
    
    return kb

async def save_group_settings(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã"""
    try:
        chat_id = data.get("chat_id")
        project = data.get("project")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
        centris_enabled = project in ["centris", "both"]
        golden_enabled = project in ["golden", "both"]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        centris_season_id = data.get("centris_season_id") if centris_enabled else None
        centris_start_video = data.get("centris_start_video", 0)
        golden_season_id = data.get("golden_season_id") if golden_enabled else None
        golden_start_video = data.get("golden_start_video", 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.set_group_video_settings(
            chat_id,
            int(centris_enabled),
            centris_season_id,
            centris_start_video,
            int(golden_enabled),
            golden_start_video
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if centris_enabled and centris_season_id is not None:
            db.set_group_video_start(chat_id, 'centris', centris_season_id, centris_start_video)
            db.reset_group_viewed_videos(chat_id)
            
        if golden_enabled and golden_season_id is not None:
            db.set_group_video_start(chat_id, 'golden', golden_season_id, golden_start_video)
            db.reset_group_viewed_videos(chat_id)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        from handlers.users.video_scheduler import schedule_group_jobs
        schedule_group_jobs()
        
        logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã - Centris: {centris_enabled}, Golden: {golden_enabled}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã: {e}")
        raise
