from datetime import datetime, timedelta
import logging
from handlers.users.group_video_states import GroupVideoStates
from handlers.users.video_lists import VIDEO_LIST_1, VIDEO_LIST_2, VIDEO_LIST_3, VIDEO_LIST_4, VIDEO_LIST_5, VIDEO_LIST_GOLDEN_1
from data.config import ADMINS, SUPER_ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

try:
    from aiogram import types
    from aiogram.dispatcher import FSMContext
    from aiogram.dispatcher.filters.builtin import Command
    from aiogram.types import MediaGroup
    import asyncio
    from db import db
    from loader import dp, bot
    print("dp –≤ admin_image_sender.py:", id(dp))
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.dispatcher.filters.state import State, StatesGroup

    # FSM definitions moved to: GroupVideoStates in `handlers.users.group_video_states`

    # --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞ ---
    class AddSeasonStates(StatesGroup):
        waiting_for_project = State()
        waiting_for_season_name = State()
        waiting_for_video_links = State()
        waiting_for_video_titles = State()

    # --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞ ---
    class EditSeasonStates(StatesGroup):
        waiting_for_season_id = State()
        waiting_for_new_name = State()
        waiting_for_action = State()  # edit_name, edit_video, delete_video, delete_season

    # --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ ---
    class EditVideoStates(StatesGroup):
        waiting_for_video_id = State()
        waiting_for_new_url = State()
        waiting_for_new_title = State()
        waiting_for_new_position = State()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    async def safe_edit_text(callback_query: types.CallbackQuery, text: str, reply_markup=None, parse_mode=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫—É 'Message is not modified'"""
        try:
            await callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as e:
            if "Message is not modified" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {e}")
                await callback_query.answer()
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback_query.answer()

    # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è set_group_video ---
    def get_project_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üè¢ Centris Towers", callback_data="project_centris"),
            InlineKeyboardButton("üè¢ Golden Lake", callback_data="project_golden"),
            InlineKeyboardButton("üè¢ Centris + Golden", callback_data="project_both")
            )

    def get_season_keyboard(project):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞"""
        kb = InlineKeyboardMarkup(row_width=2)
        seasons = db.get_seasons_by_project(project)
        if not seasons:
            kb.add(InlineKeyboardButton("‚ùå –ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤", callback_data="no_seasons"))
            return kb
        
        for season_id, season_name in seasons:
                kb.add(InlineKeyboardButton(f"üì∫ {season_name}", callback_data=f"season_{season_id}"))
        return kb

    def get_video_keyboard_from_db(videos, viewed):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ"""
        kb = InlineKeyboardMarkup(row_width=3)
        has_unwatched = False
        
        for url, title, position in videos:
            if position not in viewed:
                kb.add(InlineKeyboardButton(f"{position+1}. {title}", callback_data=f"video_{position}"))
                has_unwatched = True
        
        if not has_unwatched:
            kb.add(InlineKeyboardButton("‚ùå –í—Å–µ –≤–∏–¥–µ–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="all_videos_sent"))
            return None
        
        return kb

    @dp.message_handler(Command('set_start_video'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def set_start_video_command(message: types.Message, state: FSMContext):
        await message.answer(
            "Har kungi video yuborishni qaysi videodan boshlashni belgilang.\n"
            "Video raqamini kiriting (1-15):"
        )
        await state.set_state("waiting_for_video_number")

    # –ö–æ–º–∞–Ω–¥–∞ /set_group_video –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ handlers/users/group_video_commands.py
    # –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

    # --- –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
    @dp.message_handler(commands=['test_command'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
    async def test_command_handler(message: types.Message):
        """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        await message.answer("‚úÖ **–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!**\n\n–ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.")
        print(f"–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")

    @dp.message_handler(state="waiting_for_video_number")
    async def process_video_number(message: types.Message, state: FSMContext):
        if message.from_user.id != SUPER_ADMIN_ID and message.from_user.id not in ADMINS:
            await message.answer("Sizda bu buyruqni bajarish uchun ruxsat yo'q.")
            await state.finish()
            return

        try:
            video_number = int(message.text)
            if 1 <= video_number <= 15:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.set_start_video_index(video_number - 1)  # –ò–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                await message.answer(f"Har kungi video yuborish {video_number}-chi videodan boshlanadi.")
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {video_number}")
            else:
                await message.answer("Video raqami 1-15 oralig'ida bo'lishi kerak.")
        except ValueError:
            await message.answer("Iltimos, to'g'ri raqam kiriting (1-15).")
        
        await state.finish()

    @dp.message_handler(Command('send_media'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def send_media_command(message: types.Message, state: FSMContext):
        await message.answer(
            "Iltimos, barcha foydalanuvchilarga jo'natmoqchi bo'lgan rasmlar yoki videolarni yuboring. "
            "Tugatganingizdan so'ng /done buyrug'ini kiritin.")
        await state.set_state("waiting_for_media")
        await state.update_data(media=[])

    @dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO], state="waiting_for_media")
    async def process_media(message: types.Message, state: FSMContext):
        if message.from_user.id != SUPER_ADMIN_ID and message.from_user.id not in ADMINS:
            await message.answer("Sizda bu buyruqni bajarish uchun ruxsat yo'q.")
            await state.finish()
            return

        data = await state.get_data()
        media = data.get('media', [])

        if message.photo:
            file_id = message.photo[-1].file_id
            media_type = 'photo'
        elif message.video:
            file_id = message.video.file_id
            media_type = 'video'

        media.append({'file_id': file_id, 'type': media_type})
        await state.update_data(media=media)
        await message.answer(
            f"{media_type.capitalize()} qo'shildi. Jami: {len(media)}. Yana yuboring yoki /done buyrug'i bilan yakunlang.")

    @dp.message_handler(Command('done'), state="waiting_for_media")
    async def finish_media_collection(message: types.Message, state: FSMContext):
        if message.from_user.id != SUPER_ADMIN_ID and message.from_user.id not in ADMINS:
            await message.answer("Sizda bu buyruqni bajarish uchun ruxsat yo'q.")
            await state.finish()
            return

        data = await state.get_data()
        media = data.get('media', [])

        if not media:
            await message.answer("Siz birorta ham rasm yoki video yubormadingiz.")
            await state.finish()
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        await message.answer(
            "Media fayllar qabul qilindi. Endi media bilan birga jo'natiladigan opisaniyeni kiriting. "
            "Agar opisaniye kerak bo'lmasa, /skip buyrug'ini kiriting.")
        await state.set_state("waiting_for_caption")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(media=media)

    @dp.message_handler(Command('skip'), state="waiting_for_caption")
    async def skip_caption(message: types.Message, state: FSMContext):
        if message.from_user.id != SUPER_ADMIN_ID and message.from_user.id not in ADMINS:
            await message.answer("Sizda bu buyruqni bajarish uchun ruxsat yo'q.")
            await state.finish()
            return

        await process_media_sending(message, state, caption="")

    @dp.message_handler(state="waiting_for_caption")
    async def process_caption(message: types.Message, state: FSMContext):
        if message.from_user.id != SUPER_ADMIN_ID and message.from_user.id not in ADMINS:
            await message.answer("Sizda bu buyruqni bajarish uchun ruxsat yo'q.")
            await state.finish()
            return

        caption = message.text
        await process_media_sending(message, state, caption)

    async def process_media_sending(message: types.Message, state: FSMContext, caption: str):
        data = await state.get_data()
        media = data.get('media', [])

        total_media = len(media)
        await message.answer(f"Jami {total_media} ta media qabul qilindi. Opisaniye: {caption or 'yoq'}. Jo'natish boshlanadi...")

        users = db.get_all_users()


        chunk_size = 10
        media_chunks = [media[i:i + chunk_size] for i in range(0, len(media), chunk_size)]

        sent_count = 0
        for user_id in users:
            try:
                for chunk in media_chunks:
                    media_group = MediaGroup()
                    for i, item in enumerate(chunk):
                        if item['type'] == 'photo':
                            if i == 0 and caption:
                                media_group.attach_photo(item['file_id'], caption=caption)
                            else:
                                media_group.attach_photo(item['file_id'])
                        elif item['type'] == 'video':
                            if i == 0 and caption:
                                media_group.attach_video(item['file_id'], caption=caption)
                            else:
                                media_group.attach_video(item['file_id'])
                    await bot.send_media_group(
                        chat_id=user_id,
                        media=media_group,
                        protect_content=True
                    )
                    await asyncio.sleep(1)
                sent_count += 1
            except Exception as e:
                print(f"Media guruhini foydalanuvchiga yuborish mumkin emas {user_id}: {e}")
                continue

        await message.answer(
            f"{total_media} ta mediadan media guruhlar {sent_count} foydalanuvchilarga muvaffaqiyatli yuborildi!")
        await state.finish()

    @dp.message_handler(state="waiting_for_media")
    async def invalid_input(message: types.Message, state: FSMContext):
        await message.answer("Iltimos, rasm yoki video yuboring yoki /done buyrug'i bilan kirishni yakunlang.")
        await state.set_state("waiting_for_media")

    @dp.message_handler(Command('get_all_users'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def get_all_users_command(message: types.Message):
        users_data = db.get_all_users_data()
        if not users_data:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_id, name, phone, datetime, video_index, preferred_time, is_group in users_data:
            user_type = "–ì—Ä—É–ø–ø–∞" if is_group else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            response += f"ID: {user_id}\n"
            response += f"–¢–∏–ø: {user_type}\n"
            response += f"–ò–º—è: {name}\n"
            if not is_group:
                response += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            response += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime}\n"
            response += f"–ò–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ: {video_index}\n"
            response += f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {preferred_time}\n"
            response += "-" * 30 + "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4096:
            for x in range(0, len(response), 4096):
                await message.answer(response[x:x+4096])
        else:
            await message.answer(response)

    @dp.message_handler(Command('banned_groups'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def banned_groups_command(message: types.Message):
        banned_groups = db.get_banned_groups()
        if not banned_groups:
            await message.answer("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –Ω–µ—Ç.")
            return

        response = "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n"
        for group_id, group_name in banned_groups:
            response += f"ID: {group_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group_name}\n"
            response += "-" * 30 + "\n"

        await message.answer(response)

    @dp.message_handler(Command('unban_group'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def unban_group_command(message: types.Message):
        try:
            group_id = int(message.text.split()[1])
            db.unban_group(group_id)
            await message.answer(f"–ì—Ä—É–ø–ø–∞ {group_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban_group <ID_–≥—Ä—É–ø–ø—ã>")

    @dp.message_handler(Command('reset_group_videos'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def reset_group_videos_command(message: types.Message, state: FSMContext):
        chat_id = message.chat.id
        db.reset_group_viewed_videos(chat_id)
        await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.")

    @dp.message_handler(Command('add_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def add_season_command(message: types.Message, state: FSMContext):
        print('add_season_command –≤—ã–∑–≤–∞–Ω')
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("Centris Towers", callback_data="add_project_centris"),
            InlineKeyboardButton("Golden Lake", callback_data="add_project_golden")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞:", reply_markup=kb)
        await state.set_state(AddSeasonStates.waiting_for_project.state)

    @dp.callback_query_handler(lambda c: c.data.startswith("add_project_"), state=AddSeasonStates.waiting_for_project.state)
    async def add_season_project(callback_query: types.CallbackQuery, state: FSMContext):
        project = callback_query.data.replace("add_project_", "")
        
        # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤
        if project == "centr":
            project = "centris"
        elif project == "golden":
            project = "golden"
        
        logger.info(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project}")
        await state.update_data(project=project)
        await safe_edit_text(callback_query, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
        await state.set_state(AddSeasonStates.waiting_for_season_name.state)

    @dp.message_handler(state=AddSeasonStates.waiting_for_season_name)
    async def add_season_name(message: types.Message, state: FSMContext):
        await state.update_data(season_name=message.text.strip())
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ (–∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        await state.set_state(AddSeasonStates.waiting_for_video_links.state)

    @dp.message_handler(state=AddSeasonStates.waiting_for_video_links)
    async def add_season_video_links(message: types.Message, state: FSMContext):
        links = [l.strip() for l in message.text.strip().splitlines() if l.strip()]
        await state.update_data(video_links=links)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ (–∫–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏):")
        await state.set_state(AddSeasonStates.waiting_for_video_titles.state)

    @dp.message_handler(state=AddSeasonStates.waiting_for_video_titles)
    async def add_season_video_titles(message: types.Message, state: FSMContext):
        titles = [t.strip() for t in message.text.strip().splitlines() if t.strip()]
        data = await state.get_data()
        links = data.get("video_links", [])
        if len(links) != len(titles):
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ ({len(links)}) –∏ –Ω–∞–∑–≤–∞–Ω–∏–π ({len(titles)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ:")
            return
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞: project={data.get('project')}, season_name={data.get('season_name')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω –∏ –≤–∏–¥–µ–æ –≤ –±–∞–∑—É
        project = data.get("project")
        season_name = data.get("season_name")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        if project == "centr":
            project = "centris"
            logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å 'centr' –Ω–∞ 'centris'")
        
        logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project}")
        season_info = db.add_season_with_videos(project, season_name, links, titles)
        
        if season_info:
            logger.info(f"–°–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {season_info}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            logger.info(f"–í—ã–∑—ã–≤–∞–µ–º update_season_keyboards_for_all_chats –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
            await update_season_keyboards_for_all_chats(project)
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            try:
                from handlers.users.video_selector import clear_season_keyboard_cache
                logger.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
                clear_season_keyboard_cache(project)
                logger.info(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            try:
                logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
                clear_season_keyboard_cache()  # –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
                logger.info("‚úÖ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ–≥–æ –∫—ç—à–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            logger.info(f"–í—ã–∑—ã–≤–∞–µ–º notify_active_groups_about_new_season –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}")
            await notify_active_groups_about_new_season(project, season_name, len(links))
            
            # –û–ë–ù–û–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            try:
                from handlers.users.video_selector import force_update_main_menu
                logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                updated_main_menu = force_update_main_menu()
                
                if updated_main_menu:
                    logger.info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer(
                        "üîÑ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!** –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                        reply_markup=updated_main_menu
                    )
                    
                    # –ï—Å–ª–∏ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"‚úÖ –°–µ–∑–æ–Ω '{season_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '{project}'!\n\n"
                        f"üìä ID —Å–µ–∑–æ–Ω–∞: {season_info['season_id']}\n"
                        f"üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {season_info['video_count']}\n\n"
                        "üîÑ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!** –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤—ã—à–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞."
                    )
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"‚úÖ –°–µ–∑–æ–Ω '{season_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '{project}'!\n\n"
                        f"üìä ID —Å–µ–∑–æ–Ω–∞: {season_info['season_id']}\n"
                        f"üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {season_info['video_count']}\n\n"
                        "üí° **–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!** –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Å—Ä–∞–∑—É.\n\n"
                        "üîß **–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
                        "   /test_cache - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
                        "   /sync_keyboards - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n"
                        "   /force_refresh_seasons - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å\n"
                        "   /update_main_menu - –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                        "üì± **–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é - –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è!**"
                    )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    f"‚úÖ –°–µ–∑–æ–Ω '{season_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '{project}'!\n\n"
                    f"üìä ID —Å–µ–∑–æ–Ω–∞: {season_info['season_id']}\n"
                    f"üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {season_info['video_count']}\n\n"
                    "üí° **–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!** –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Å—Ä–∞–∑—É.\n\n"
                    "üîß **–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
                    "   /test_cache - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
                    "   /sync_keyboards - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n"
                    "   /force_refresh_seasons - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å\n"
                    "   /update_main_menu - –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                    "üì± **–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é - –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è!**"
                )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞ –≤ –ë–î")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        await state.finish()

    @dp.message_handler(Command('refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö
        """
        try:
            from handlers.users.video_selector import clear_season_keyboard_cache
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            clear_season_keyboard_cache()
            
            await message.answer("‚úÖ –ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ—á–∏—â–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
                               "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ 'Centris towers' –∏–ª–∏ 'Golden lake' "
                               "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def cache_status_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤
        """
        try:
            from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
            import time
            
            current_time = time.time()
            
            if not _season_keyboard_cache:
                await message.answer("üìã –ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –ø—É—Å—Ç.")
                return
            
            status_text = "üìã –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            for cache_key, keyboard in _season_keyboard_cache.items():
                if cache_key in _cache_timestamp:
                    age = current_time - _cache_timestamp[cache_key]
                    age_minutes = int(age // 60)
                    age_seconds = int(age % 60)
                    
                    status_text += f"üîë {cache_key}:\n"
                    status_text += f"   ‚è∞ –í–æ–∑—Ä–∞—Å—Ç: {age_minutes}–º {age_seconds}—Å\n"
                    status_text += f"   üì± –ö–Ω–æ–ø–æ–∫: {len(keyboard.keyboard)}\n\n"
            
            await message.answer(status_text)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞: {e}")

    @dp.message_handler(Command('test_cache'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_cache_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache, _season_keyboard_cache, _cache_timestamp
            
            logger.info("=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–≠–®–ê ===")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à
            current_cache_size = len(_season_keyboard_cache)
            current_timestamp_size = len(_cache_timestamp)
            
            response = f"üß™ **–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø**\n\n"
            response += f"üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:**\n"
            response += f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {current_cache_size}\n"
            response += f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫: {current_timestamp_size}\n"
            
            if current_cache_size > 0:
                response += f"   ‚Ä¢ –ö–ª—é—á–∏ –≤ –∫—ç—à–µ: {list(_season_keyboard_cache.keys())}\n"
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            clear_season_keyboard_cache()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons_count = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons_count = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response += f"\nüîÑ **–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:**\n"
            response += f"   ‚Ä¢ Centris Towers: {centris_seasons_count} —Å–µ–∑–æ–Ω–æ–≤\n"
            response += f"   ‚Ä¢ Golden Lake: {golden_seasons_count} —Å–µ–∑–æ–Ω–æ–≤\n"
            response += f"   ‚Ä¢ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(_season_keyboard_cache)}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é")
            centris_seasons_db = db.get_seasons_by_project("centris")
            golden_seasons_db = db.get_seasons_by_project("golden")
            
            response += f"\nüóÑÔ∏è **–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î:**\n"
            response += f"   ‚Ä¢ Centris Towers –≤ –ë–î: {len(centris_seasons_db)} —Å–µ–∑–æ–Ω–æ–≤\n"
            response += f"   ‚Ä¢ Golden Lake –≤ –ë–î: {len(golden_seasons_db)} —Å–µ–∑–æ–Ω–æ–≤\n"
            
            if centris_seasons_db:
                response += f"   ‚Ä¢ Centris —Å–µ–∑–æ–Ω—ã: {[name for _, name in centris_seasons_db]}\n"
            if golden_seasons_db:
                response += f"   ‚Ä¢ Golden —Å–µ–∑–æ–Ω—ã: {[name for _, name in golden_seasons_db]}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if centris_seasons_count == len(centris_seasons_db) and golden_seasons_count == len(golden_seasons_db):
                response += f"\n‚úÖ **–†–ï–ó–£–õ–¨–¢–ê–¢: –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!**\n"
                response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–î."
            else:
                response += f"\n‚ùå **–†–ï–ó–£–õ–¨–¢–ê–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ!**\n"
                response += f"–ö—ç—à –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î."
            
            logger.info("=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–≠–®–ê ===")
            
            await message.answer(response, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞: {e}")

    @dp.message_handler(Command('sync_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def sync_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            from handlers.users.video_selector import clear_season_keyboard_cache, get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û sync_keyboards ===")
            
            # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
            logger.info("–û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
            clear_season_keyboard_cache()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
            centris_seasons_db = db.get_seasons_by_project("centris")
            golden_seasons_db = db.get_seasons_by_project("golden")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            centris_count = len(centris_keyboard.keyboard) - 1
            golden_count = len(golden_keyboard.keyboard) - 1
            
            response = f"üîÑ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
            response += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:**\n"
            response += f"   ‚Ä¢ Centris Towers: {centris_count} —Å–µ–∑–æ–Ω–æ–≤ (–ë–î: {len(centris_seasons_db)})\n"
            response += f"   ‚Ä¢ Golden Lake: {golden_count} —Å–µ–∑–æ–Ω–æ–≤ (–ë–î: {len(golden_seasons_db)})\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            centris_sync = centris_count == len(centris_seasons_db)
            golden_sync = golden_count == len(golden_seasons_db)
            
            if centris_sync and golden_sync:
                response += f"‚úÖ **–í–°–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!**\n"
                response += f"–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            else:
                response += f"‚ö†Ô∏è **–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:**\n"
                if not centris_sync:
                    response += f"   ‚Ä¢ Centris Towers: –∫—ç—à {centris_count} vs –ë–î {len(centris_seasons_db)}\n"
                if not golden_sync:
                    response += f"   ‚Ä¢ Golden Lake: –∫—ç—à {golden_count} vs –ë–î {len(golden_seasons_db)}\n"
                response += f"\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /force_refresh_seasons"
            
            response += f"\n\nüí° **–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ–∑–æ–Ω—ã!**"
            
            await message.answer(response, parse_mode="Markdown")
            
            logger.info(f"=== –ö–û–ù–ï–¶ sync_keyboards ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_position)
    async def process_new_video_position(message: types.Message, state: FSMContext):
        try:
            new_position = int(message.text.strip())
            data = await state.get_data()
            video_id = data.get("video_id")
            url = data.get("url")
            title = data.get("title")
            
            if db.update_video(video_id, url, title, new_position):
                await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_position}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):")
            return
        
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_season_"))
    async def confirm_delete_season(callback_query: types.CallbackQuery):
        season_id = int(callback_query.data.replace("confirm_delete_season_", ""))
        
        if db.delete_season(season_id):
            await safe_edit_text(callback_query, "‚úÖ –°–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await safe_edit_text(callback_query, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞.")
        
        await callback_query.answer()

    @dp.callback_query_handler(lambda c: c.data == "cancel_delete")
    async def cancel_delete_season(callback_query: types.CallbackQuery):
        await safe_edit_text(callback_query, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback_query.answer()

    @dp.message_handler(Command('delete_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def delete_season_command(message: types.Message):
        try:
            # –ü–∞—Ä—Å–∏–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_season <ID_—Å–µ–∑–æ–Ω–∞>")
                return
            
            season_id = int(args[1])
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_by_season(season_id)
            
            response = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            response += "–í—Å–µ –≤–∏–¥–µ–æ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!"
            
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            
            await message.answer(response, reply_markup=kb)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ).")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('season_help'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def season_help_command(message: types.Message):
        help_text = """
üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞–º–∏:**

**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/add_season` - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
‚Ä¢ `/list_seasons` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ–∑–æ–Ω—ã

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ `/edit_season` - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–∑–æ–Ω
  - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (URL, –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è)
  - –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ

**–£–¥–∞–ª–µ–Ω–∏–µ:**
‚Ä¢ `/delete_season <ID>` - –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω –ø–æ ID

**–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `/migrate_old_seasons` - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/fix_season_order` - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º)

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∑–æ–Ω: `/add_season`
2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–∑–æ–Ω—ã: `/list_seasons`
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω: `/edit_season` (–∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å ID)
4. –£–¥–∞–ª–∏—Ç—å —Å–µ–∑–æ–Ω: `/delete_season 5`
5. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫: `/fix_season_order`

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!

üìù **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –º–µ–Ω—é
‚Ä¢ –ù–æ–≤—ã–µ —Å–µ–∑–æ–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        await message.answer(help_text)

    @dp.message_handler(Command('migrate_old_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def migrate_old_seasons_command(message: types.Message):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω—ã –≤ –±–∞–∑–µ
            centris_seasons = db.get_seasons_by_project("centris")
            golden_seasons = db.get_seasons_by_project("golden")
            
            if centris_seasons or golden_seasons:
                await message.answer("–°–µ–∑–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            old_centris_seasons = [
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 1.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_1, CAPTION_LIST_1),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 2.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_2, CAPTION_LIST_2),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 3.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_3, CAPTION_LIST_3),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 4.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_4, CAPTION_LIST_4),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä 5.0 I I –ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤", VIDEO_LIST_5, CAPTION_LIST_5),
                ("centris", "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers", VIDEO_LIST_6, CAPTION_LIST_6),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∑–æ–Ω—ã Golden Lake
            old_golden_seasons = [
                ("golden", "Golden lake 1", VIDEO_LIST_GOLDEN_1, GOLDEN_LIST),
            ]
            
            migrated_count = 0
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Centris Towers
            for project, season_name, video_list, caption_list in old_centris_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º Golden Lake
            for project, season_name, video_list, caption_list in old_golden_seasons:
                if len(video_list) == len(caption_list):
                    db.add_season_with_videos(project, season_name, video_list, caption_list)
                    migrated_count += 1
            
            await message.answer(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {migrated_count} —Å–µ–∑–æ–Ω–æ–≤.")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @dp.message_handler(Command('fix_season_order'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_order_command(message: types.Message):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã Centris Towers
            centris_seasons = db.get_seasons_by_project("centris")
            
            if not centris_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ Centris Towers –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers"
            tour_season = None
            other_seasons = []
            
            for season_id, season_name in centris_seasons:
                if season_name == "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers":
                    tour_season = (season_id, season_name)
                else:
                    other_seasons.append((season_id, season_name))
            
            if not tour_season:
                await message.answer("–°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–µ–∑–æ–Ω "–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ ID
            tour_season_id, tour_season_name = tour_season
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞
            videos = db.get_videos_by_season(tour_season_id)
            if not videos:
                await message.answer("–í —Å–µ–∑–æ–Ω–µ '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' –Ω–µ—Ç –≤–∏–¥–µ–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            video_data = [(url, title, position) for url, title, position in videos]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ–∑–æ–Ω (–≤–∏–¥–µ–æ —É–¥–∞–ª—è—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ)
            if db.delete_season(tour_season_id):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω –∑–∞–Ω–æ–≤–æ
                urls = [data[0] for data in video_data]
                titles = [data[1] for data in video_data]
                db.add_season_with_videos("centris", tour_season_name, urls, titles)
                
                await message.answer("‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–µ–∑–æ–Ω '–Ø“õ–∏–Ω–ª–∞—Ä I –¢–∞—à—Ä–∏—Ñ Centris Towers' —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
                
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(commands=['fix_season_project'], user_id=ADMINS + [SUPER_ADMIN_ID])
    async def fix_season_project_command(message: types.Message):
        try:
            args = message.text.split()
            if len(args) != 3:
                await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fix_season_project <season_id> <project>")
                return
            season_id = int(args[1])
            new_project = args[2]
            if db.update_season_project(season_id, new_project):
                await message.answer(f"Project —Å–µ–∑–æ–Ω–∞ {season_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_project}'")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ project —Å–µ–∑–æ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('force_update_keyboards'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_update_keyboards_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –∫—ç—à–∞
        """
        try:
            await message.answer("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            try:
                from db import db
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
                centris_seasons = db.get_seasons_by_project("centris")
                golden_seasons = db.get_seasons_by_project("golden")
                
                centris_count = len(centris_seasons)
                golden_count = len(golden_seasons)
                
                response = f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞):**\n\n"
                response += f"üè¢ **Centris Towers**: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in centris_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                response += f"\nüèñÔ∏è **Golden Lake**: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n"
                for season_id, season_name in golden_seasons:
                    response += f"   ‚Ä¢ {season_name} (ID: {season_id})\n"
                
                await message.answer(response)
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à
                try:
                    from handlers.users.video_selector import clear_season_keyboard_cache
                    clear_season_keyboard_cache()
                    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω: {e}")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('simple_cache_status'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def simple_cache_status_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
        """
        try:
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
            try:
                from handlers.users.video_selector import _season_keyboard_cache, _cache_timestamp
                await message.answer("‚úÖ –ú–æ–¥—É–ª—å video_selector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                if not _season_keyboard_cache:
                    await message.answer("üìã –ö—ç—à –ø—É—Å—Ç - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!")
                else:
                    cache_size = len(_season_keyboard_cache)
                    await message.answer(f"üìã –í –∫—ç—à–µ {cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
            except ImportError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞: {e}")
                
        except Exception as e:
            await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('test_commands'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def test_commands_command(message: types.Message):
        """
        –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
        """
        try:
            await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
            logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(Command('instant_refresh'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def instant_refresh_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard
            
            logger.info("=== –ù–ê–ß–ê–õ–û instant_refresh ===")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–±–µ–∑ –∫—ç—à–∞)
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1
            golden_seasons = len(golden_keyboard.keyboard) - 1
            
            response = f"‚ö° **–ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î!**\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ instant_refresh ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    @dp.message_handler(Command('force_refresh_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def force_refresh_seasons_command(message: types.Message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        """
        try:
            from handlers.users.video_selector import get_season_keyboard, clear_season_keyboard_cache
            
            logger.info("=== –ù–ê–ß–ê–õ–û force_refresh_seasons ===")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            logger.info("–û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            clear_season_keyboard_cache()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            logger.info("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            centris_keyboard = get_season_keyboard("centris")
            golden_keyboard = get_season_keyboard("golden")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤
            centris_seasons = len(centris_keyboard.keyboard) - 1  # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            golden_seasons = len(golden_keyboard.keyboard) - 1   # –º–∏–Ω—É—Å –∫–Ω–æ–ø–∫–∞ "Orqaga qaytish"
            
            response = f"üîÑ **–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            response += f"üì± **Centris Towers** ({centris_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Centris
            await message.answer(response, reply_markup=centris_keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ Golden Lake
            response2 = f"üì± **Golden Lake** ({golden_seasons} —Å–µ–∑–æ–Ω–æ–≤):\n"
            await message.answer(response2, reply_markup=golden_keyboard)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_response = f"‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            final_response += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            final_response += f"   ‚Ä¢ Centris Towers: {centris_seasons} —Å–µ–∑–æ–Ω–æ–≤\n"
            final_response += f"   ‚Ä¢ Golden Lake: {golden_seasons} —Å–µ–∑–æ–Ω–æ–≤\n\n"
            final_response += f"üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤.\n"
            final_response += f"üîß –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_cache"
            
            await message.answer(final_response)
            
            logger.info(f"=== –ö–û–ù–ï–¶ force_refresh_seasons ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('list_seasons'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def list_seasons_command(message: types.Message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Centris Towers
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –¥–ª—è Golden Lake
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            response = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ‚Ä¢ {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            if not centris_seasons and not golden_seasons:
                response += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
            
            await message.answer(response)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(Command('edit_season'), user_id=ADMINS + [SUPER_ADMIN_ID])
    async def edit_season_command(message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ
            centris_seasons = db.get_seasons_with_videos_by_project("centris")
            golden_seasons = db.get_seasons_with_videos_by_project("golden")
            
            if not centris_seasons and not golden_seasons:
                await message.answer("–ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
            
            if centris_seasons:
                response += "üè¢ Centris Towers:\n"
                for season_id, season_name, video_count in centris_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
                response += "\n"
            
            if golden_seasons:
                response += "üèòÔ∏è Golden Lake:\n"
                for season_id, season_name, video_count in golden_seasons:
                    response += f"  ID {season_id}: {season_name} ({video_count} –≤–∏–¥–µ–æ)\n"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_season_id.state)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_season_id)
    async def process_season_id_for_edit(message: types.Message, state: FSMContext):
        try:
            season_id = int(message.text.strip())
            season_data = db.get_season_by_id(season_id)
            
            if not season_data:
                await message.answer("–°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            season_id, project, season_name = season_data
            videos = db.get_videos_with_ids_by_season(season_id)
            
            await state.update_data(season_id=season_id, project=project, season_name=season_name)
            
            response = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:\n"
            response += f"ID: {season_id}\n"
            response += f"–ü—Ä–æ–µ–∫—Ç: {project}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {season_name}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {len(videos)}\n\n"
            
            if videos:
                response += "–í–∏–¥–µ–æ –≤ —Å–µ–∑–æ–Ω–µ:\n"
                for video_id, url, title, position in videos:
                    response += f"  ID {video_id}: {title} (–ø–æ–∑–∏—Ü–∏—è {position})\n"
            
            response += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞\n"
            response += "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
            response += "3. –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditSeasonStates.waiting_for_action.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditSeasonStates.waiting_for_action)
    async def process_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
            await state.set_state(EditSeasonStates.waiting_for_new_name.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(EditVideoStates.waiting_for_video_id.state)
        elif action == "4":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞
            kb = InlineKeyboardMarkup(row_width=2)
            kb.add(
                InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_season_{season_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            )
            await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–µ–∑–æ–Ω –∏ –≤—Å–µ –µ–≥–æ –≤–∏–¥–µ–æ?", reply_markup=kb)
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditSeasonStates.waiting_for_new_name)
    async def process_new_season_name(message: types.Message, state: FSMContext):
        new_name = message.text.strip()
        data = await state.get_data()
        season_id = data.get("season_id")
        
        if db.update_season(season_id, new_name):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_video_id)
    async def process_video_id_for_edit(message: types.Message, state: FSMContext):
        try:
            video_id = int(message.text.strip())
            video_data = db.get_video_by_id(video_id)
            
            if not video_data:
                await message.answer("–í–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            
            video_id, season_id, url, title, position = video_data
            await state.update_data(video_id=video_id, season_id=season_id, url=url, title=title, position=position)
            
            response = f"üìπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:\n"
            response += f"ID: {video_id}\n"
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            response += f"–ü–æ–∑–∏—Ü–∏—è: {position}\n"
            response += f"URL: {url}\n\n"
            response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            response += "1. –ò–∑–º–µ–Ω–∏—Ç—å URL\n"
            response += "2. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            response += "3. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
            response += "4. –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ\n"
            response += "5. –û—Ç–º–µ–Ω–∞"
            
            await message.answer(response)
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_video_edit_action(message: types.Message, state: FSMContext):
        action = message.text.strip()
        data = await state.get_data()
        
        if action == "1":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_url.state)
        elif action == "2":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:")
            await state.set_state(EditVideoStates.waiting_for_new_title.state)
        elif action == "3":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–µ–æ (—á–∏—Å–ª–æ):")
            await state.set_state(EditVideoStates.waiting_for_new_position.state)
        elif action == "4":
            video_id = data.get("video_id")
            if db.delete_video(video_id):
                await message.answer("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.")
            await state.finish()
        elif action == "5":
            await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5):")

    @dp.message_handler(state=EditVideoStates.waiting_for_new_url)
    async def process_new_video_url(message: types.Message, state: FSMContext):
        new_url = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        title = data.get("title")
        position = data.get("position")
        
        if db.update_video(video_id, new_url, title, position):
            await message.answer(f"‚úÖ URL –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤–∏–¥–µ–æ.")
        
        await state.finish()

    @dp.message_handler(state=EditVideoStates.waiting_for_new_title)
    async def process_new_video_title(message: types.Message, state: FSMContext):
        new_title = message.text.strip()
        data = await state.get_data()
        video_id = data.get("video_id")
        url = data.get("url")
        position = data.get("position")
        
        if db.update_video(video_id, url, new_title, position):
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
        
        await state.finish()

except Exception as exx:
    from datetime import datetime
    now = datetime.now()
    formatted_date_time = now.strftime('%Y-%m-%d %H:%M:%S')
    print('admin image sender', formatted_date_time, f'error {exx}')

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Command('update_main_menu'), user_id=ADMINS + [SUPER_ADMIN_ID])
async def update_main_menu_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    try:
        from handlers.users.video_selector import force_update_main_menu
        
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        updated_main_menu = force_update_main_menu()
        
        if updated_main_menu:
            logger.info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "üîÑ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!** –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:",
                reply_markup=updated_main_menu
            )
            
            await message.answer(
                "‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ –±–∞–∑—ã."
            )
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ –ë–î
@dp.message_handler(Command('check_menu_sync'), user_id=ADMINS + [SUPER_ADMIN_ID])
async def check_menu_sync_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        from handlers.users.video_selector import get_main_menu_keyboard
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ë–î...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        centris_seasons = db.get_seasons_by_project("centris")
        golden_seasons = db.get_seasons_by_project("golden")
        
        centris_count = len(centris_seasons)
        golden_count = len(golden_seasons)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        current_menu = get_main_menu_keyboard()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        centris_button = None
        golden_button = None
        
        for row in current_menu.keyboard:
            for button in row:
                if button.text.startswith("Centris towers"):
                    centris_button = button.text
                elif button.text.startswith("Golden lake"):
                    golden_button = button.text
        
        response = "üîç **–ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ**\n\n"
        response += f"üìä **–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:**\n"
        response += f"   ‚Ä¢ Centris: {centris_count} —Å–µ–∑–æ–Ω–æ–≤\n"
        response += f"   ‚Ä¢ Golden: {golden_count} —Å–µ–∑–æ–Ω–æ–≤\n\n"
        
        response += f"üì± **–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:**\n"
        response += f"   ‚Ä¢ Centris: {centris_button or '–ù–ï –ù–ê–ô–î–ï–ù–ê'}\n"
        response += f"   ‚Ä¢ Golden: {golden_button or '–ù–ï –ù–ê–ô–î–ï–ù–ê'}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if centris_button and golden_button:
            centris_menu_count = int(centris_button.split('(')[1].split()[0])
            golden_menu_count = int(golden_button.split('(')[1].split()[0])
            
            if centris_menu_count == centris_count and golden_menu_count == golden_count:
                response += "‚úÖ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò–î–ï–ê–õ–¨–ù–ê–Ø!**\n"
                response += "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            else:
                response += "‚ö†Ô∏è **–û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–ó–õ–ò–ß–ò–Ø!**\n"
                if centris_menu_count != centris_count:
                    response += f"   ‚Ä¢ Centris: –º–µ–Ω—é {centris_menu_count} vs –ë–î {centris_count}\n"
                if golden_menu_count != golden_count:
                    response += f"   ‚Ä¢ Golden: –º–µ–Ω—é {golden_menu_count} vs –ë–î {golden_count}\n"
                response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_main_menu –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        else:
            response += "‚ùå **–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –ö–ù–û–ü–û–ö**\n"
            response += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏."
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def update_season_keyboards_for_all_chats(project):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞"""
    logger.info(f'=== –ù–ê–ß–ê–õ–û update_season_keyboards_for_all_chats –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project} ===')
    try:
        from handlers.users.video_selector import clear_season_keyboard_cache
        clear_season_keyboard_cache(project)
        logger.info(f'‚úÖ –ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–∑–æ–Ω–æ–≤ –æ—á–∏—â–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}')
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å–µ–∑–æ–Ω–æ–≤: {e}')
    logger.info(f'=== –ö–û–ù–ï–¶ update_season_keyboards_for_all_chats –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project} ===')

async def notify_active_groups_about_new_season(project, season_name, video_count):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    try:
        project_names = {'centris': 'ÔøΩÔøΩ Centris Towers', 'golden': 'üèòÔ∏è Golden Lake'}
        project_display_name = project_names.get(project, project)
        logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è {project_display_name}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ: {e}')
