from datetime import datetime, timedelta
import logging

try:

    from aiogram import types
    from aiogram.dispatcher import FSMContext
    from aiogram.dispatcher.filters.builtin import CommandStart
    from aiogram.types import ParseMode, Message, ReplyKeyboardRemove
    from db import db
    from keyboards.default.reply import key, get_lang_for_button
    from loader import dp, bot
    from states import RegistrationStates

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = logging.getLogger(__name__)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ
    def get_video_caption() -> str:
        caption = (
            "‚úÖ1/15\n\n"
            "–ú–∞–≤–∑—É: Centris Towers'–¥–∞–≥–∏ –ª–æ–±–±–∏\n\n"
            "–ò–±—Ä–æ“≥–∏–º –ú–∞–º–∞—Å–∞–∏–¥–æ–≤ \"Centris Towers\" –ª–æ–π–∏“≥–∞—Å–∏ –∞—Å–æ—Å—á–∏—Å–∏\n\n"
            "<a href=\"https://youtu.be/Dg4H7JhGRFI\">4–ö —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫—û—Ä–∏—à</a>\n\n"
            "Centris Towers - –∏–Ω–Ω–æ–≤–∞—Ü–∏—è –≤–∞ –∑–∞–º–æ–Ω–∞–≤–∏–π —É—Å–ª—É–± –≥—É–ª–ª–∞–±-—è—à–Ω–∞–π–¥–∏–≥–∞–Ω —è–Ω–≥–∏ –∞–≤–ª–æ–¥ –±–∏–∑–Ω–µ—Å –º–∞—Ä–∫–∞–∑–∏\n\n"
            "üìû –ê–ª–æ“õ–∞ —É—á—É–Ω: <a href=\"tel:+998501554444\">+998501554444</a>\n\n"
            "<a href=\"https://t.me/centris1\">–ú–µ–Ω–µ–∂–µ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à</a>\n\n"
            "(<a href=\"https://yandex.ru/maps/org/110775045050\">üìç–ú–∞–Ω–∑–∏–ª: –¢–æ—à–∫–µ–Ω—Ç —à–∞“≥—Ä–∏, –ù—É—Ä–æ–Ω–∏–π–ª–∞—Ä –∫—û—á–∞—Å–∏ 2</a>)\n"
            "üöÄ<a href=\"https://t.me/centris_towers\">–¢–µ–ª–µ–≥—Ä–∞–º</a> ‚Ä¢ "
            "üì∑<a href=\"https://www.instagram.com/centristowers_uz/\">–ò–Ω—Å—Ç–∞–≥—Ä–∞–º</a> ‚Ä¢ "
            "‚è∏<a href=\"https://www.youtube.com/@CentrisTowers\">You Tube</a>"
        )
        return caption


    # @dp.message_handler(CommandStart())
    # async def bot_start(message: types.Message):
    #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è security.py"""
    #     pass


    @dp.message_handler(state=RegistrationStates.name)
    async def register_name_handler(message: types.Message, state: FSMContext):
        name = message.text
        async with state.proxy() as data:
            data['name'] = name

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
        await message.answer("Telefon raqamingizni kiriting", reply_markup=key())
        await RegistrationStates.phone.set()

    @dp.message_handler(state=RegistrationStates.phone, content_types=types.ContentType.TEXT)
    async def process_phone_text(message: Message, state: FSMContext):
        contact = message.text

        if contact.startswith('+998') and len(contact) == 13:
            await save_user_data(message, state, contact)
        else:
            await message.answer(
                "Telefon raqam noto'g'ri kiritildi, iltimos telefon raqamni +998XXXXXXXXX formatda kiriting yoki 'Kontakni yuborish' tugmasiga bosing.",
                reply_markup=key()
            )
            await RegistrationStates.phone.set()

    @dp.message_handler(state=RegistrationStates.phone, content_types=types.ContentType.CONTACT)
    async def process_phone_contact(message: Message, state: FSMContext):
        contact = message.contact.phone_number
        await save_user_data(message, state, contact)

    async def save_user_data(message: Message, state: FSMContext, contact: str):
        async with state.proxy() as data:
            name = data.get('name')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —è–∑—ã–∫–∞
            db.update(message.from_user.id, name, contact)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            db.set_subscription_status(message.from_user.id, 1)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∞–Ω")

            await message.answer("Ro'yxatdan muvaffaqiyatli o'tdingiz!", reply_markup=ReplyKeyboardRemove())

            video_path = 'video_1.mp4'
            caption = get_video_caption()
            with open(video_path, 'rb') as video:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=video,
                    caption=caption,
                    parse_mode="HTML",
                    supports_streaming=True,
                    reply_markup=get_lang_for_button(message),
                    protect_content=True
                )

        await state.finish()

except Exception as exx:
    from datetime import datetime
    now = datetime.now()
    formatted_date_time = now.strftime("%Y-%m-%d %H:%M:%S")
    print(f"–û—à–∏–±–∫–∞ –≤ user_registration: {formatted_date_time} - {exx}")