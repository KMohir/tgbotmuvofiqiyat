#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å parse_mode –≤ keyboard —Ñ—É–Ω–∫—Ü–∏—è—Ö
"""

import re

def fix_keyboard_parse_mode_errors(filepath):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ —Å parse_mode –≤ keyboard —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    print(f"–ò—Å–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫–∏ —Å parse_mode –≤ keyboard —Ñ—É–Ω–∫—Ü–∏—è—Ö: {filepath}")
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    fixes_count = 0
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –£–±–∏—Ä–∞–µ–º parse_mode –∏–∑ keyboard —Ñ—É–Ω–∫—Ü–∏–π
    keyboard_patterns = [
        # get_project_keyboard(), parse_mode="Markdown" -> get_project_keyboard()
        (r'reply_markup=get_project_keyboard\(\),\s*parse_mode="Markdown"', r'reply_markup=get_project_keyboard()'),
        
        # get_time_selection_keyboard(), parse_mode="Markdown" -> get_time_selection_keyboard()
        (r'reply_markup=get_time_selection_keyboard\(\),\s*parse_mode="Markdown"', r'reply_markup=get_time_selection_keyboard()'),
        
        # get_group_selection_keyboard(, parse_mode="Markdown") -> get_group_selection_keyboard()
        (r'reply_markup=get_group_selection_keyboard\(,\s*parse_mode="Markdown"\)', r'reply_markup=get_group_selection_keyboard()'),
        
        # get_season_keyboard("centris", parse_mode="Markdown") -> get_season_keyboard("centris")
        (r'get_season_keyboard\("centris",\s*parse_mode="Markdown"\)', r'get_season_keyboard("centris")'),
        (r'get_season_keyboard\("golden",\s*parse_mode="Markdown"\)', r'get_season_keyboard("golden")'),
        
        # get_video_keyboard_from_db(..., parse_mode="Markdown") -> get_video_keyboard_from_db(...)
        (r'get_video_keyboard_from_db\([^)]+\),\s*parse_mode="Markdown"\)', r'get_video_keyboard_from_db(db.get_videos_by_season(season_id), [])'),
    ]
    
    for pattern, replacement in keyboard_patterns:
        matches = re.findall(pattern, content)
        if matches:
            print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª—è—é {len(matches)} –æ—à–∏–±–æ–∫ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: {pattern[:50]}...")
            content = re.sub(pattern, replacement, content)
            fixes_count += len(matches)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixes_count} –æ—à–∏–±–æ–∫ —Å keyboard —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    return fixes_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    filepath = 'handlers/users/group_video_commands.py'
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö –° KEYBOARD –§–£–ù–ö–¶–ò–Ø–ú–ò\n")
    
    fixes = fix_keyboard_parse_mode_errors(filepath)
    print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–û! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixes} –æ—à–∏–±–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é...")
    import subprocess
    result = subprocess.run(['python', '-m', 'py_compile', filepath], 
                          capture_output=True, text=True)
    if result.returncode == 0:
        print("‚úÖ –§–∞–π–ª –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!")
    else:
        print("‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
        print(result.stderr)

if __name__ == "__main__":
    main()
