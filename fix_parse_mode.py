#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è parse_mode="Markdown" 
–∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ** –≤ Telegram –±–æ—Ç–µ
"""

import re
import os

def fix_parse_mode_in_file(filepath):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç parse_mode –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filepath}")
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ message.answer —Å ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–µ–∑ parse_mode
    pattern = r'(await\s+message\.answer\([^)]*\*\*[^)]*\))(?!\s*,\s*parse_mode)'
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    matches = re.findall(pattern, content)
    if not matches:
        print(f"  ‚úÖ –í —Ñ–∞–π–ª–µ {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ parse_mode")
        return 0
    
    print(f"  üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ parse_mode")
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    def replace_func(match):
        original = match.group(1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ parse_mode
        if 'parse_mode' in original:
            return original
        
        # –î–æ–±–∞–≤–ª—è–µ–º parse_mode="Markdown" –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
        if original.endswith(')'):
            return original[:-1] + ', parse_mode="Markdown")'
        else:
            return original + ', parse_mode="Markdown"'
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    new_content = re.sub(pattern, replace_func, content)
    
    # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    patterns = [
        # message.reply —Å ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        (r'(await\s+message\.reply\([^)]*\*\*[^)]*\))(?!\s*,\s*parse_mode)', r'\1, parse_mode="Markdown"'),
        # callback_query.message.answer —Å ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        (r'(await\s+callback_query\.message\.answer\([^)]*\*\*[^)]*\))(?!\s*,\s*parse_mode)', r'\1, parse_mode="Markdown"'),
        # callback_query.message.edit_text —Å ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        (r'(await\s+callback_query\.message\.edit_text\([^)]*\*\*[^)]*\))(?!\s*,\s*parse_mode)', r'\1, parse_mode="Markdown"'),
    ]
    
    total_fixes = 0
    for pattern, replacement in patterns:
        matches = re.findall(pattern, new_content)
        if matches:
            print(f"  üîß –ò—Å–ø—Ä–∞–≤–ª—è—é {len(matches)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            new_content = re.sub(pattern, replacement, new_content)
            total_fixes += len(matches)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {len(matches) + total_fixes} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filepath}")
    return len(matches) + total_fixes

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    files_to_fix = [
        'handlers/users/group_video_commands.py',
        'handlers/users/user_commands.py', 
        'handlers/users/video_selector.py',
        'handlers/users/help.py',
        'handlers/users/support_call.py',
        'handlers/users/security.py',
        'handlers/users/admin_security.py',
        'handlers/groups/group_handler.py',
    ]
    
    total_fixes = 0
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PARSE_MODE –í TELEGRAM –ë–û–¢–ï\n")
    
    for filepath in files_to_fix:
        if os.path.exists(filepath):
            fixes = fix_parse_mode_in_file(filepath)
            total_fixes += fixes
        else:
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–û! –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {total_fixes} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram!")

if __name__ == "__main__":
    main()
